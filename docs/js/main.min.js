/**
 * Modules in this bundle
 * @license
 * 
 * sketch-threejs.js:
 *   version: 2.0.0
 * 
 * gl-matrix:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   maintainers: toji <tojiro@gmail.com>, hughsk <hughskennedy@gmail.com>
 *   contributors: Brandon Jones <tojiro@gmail.com>, Colin MacKenzie IV <sinisterchipmunk@gmail.com>
 *   homepage: http://glmatrix.net
 *   version: 2.3.2
 * 
 * js-util:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: yoichi kobayashi
 *   homepage: https://github.com/ykob/js-util#readme
 *   version: 1.0.2
 * 
 * This header is generated by licensify (https://github.com/twada/licensify)
 */
!function n(e,t,o){function a(r,c){if(!t[r]){if(!e[r]){var s="function"==typeof require&&require;if(!c&&s)return s(r,!0);if(i)return i(r,!0);var l=new Error("Cannot find module '"+r+"'");throw l.code="MODULE_NOT_FOUND",l}var u=t[r]={exports:{}};e[r][0].call(u.exports,function(n){var t=e[r][1][n];return a(t?t:n)},u,u.exports,n,e,t,o)}return t[r].exports}for(var i="function"==typeof require&&require,r=0;r<o.length;r++)a(o[r]);return a}({1:[function(n,e,t){t.glMatrix=n("./gl-matrix/common.js"),t.mat2=n("./gl-matrix/mat2.js"),t.mat2d=n("./gl-matrix/mat2d.js"),t.mat3=n("./gl-matrix/mat3.js"),t.mat4=n("./gl-matrix/mat4.js"),t.quat=n("./gl-matrix/quat.js"),t.vec2=n("./gl-matrix/vec2.js"),t.vec3=n("./gl-matrix/vec3.js"),t.vec4=n("./gl-matrix/vec4.js")},{"./gl-matrix/common.js":2,"./gl-matrix/mat2.js":3,"./gl-matrix/mat2d.js":4,"./gl-matrix/mat3.js":5,"./gl-matrix/mat4.js":6,"./gl-matrix/quat.js":7,"./gl-matrix/vec2.js":8,"./gl-matrix/vec3.js":9,"./gl-matrix/vec4.js":10}],2:[function(n,e,t){var o={};o.EPSILON=1e-6,o.ARRAY_TYPE="undefined"!=typeof Float32Array?Float32Array:Array,o.RANDOM=Math.random,o.ENABLE_SIMD=!1,o.SIMD_AVAILABLE=o.ARRAY_TYPE===Float32Array&&"SIMD"in this,o.USE_SIMD=o.ENABLE_SIMD&&o.SIMD_AVAILABLE,o.setMatrixArrayType=function(n){o.ARRAY_TYPE=n};var a=Math.PI/180;o.toRadian=function(n){return n*a},o.equals=function(n,e){return Math.abs(n-e)<=o.EPSILON*Math.max(1,Math.abs(n),Math.abs(e))},e.exports=o},{}],3:[function(n,e,t){var o=n("./common.js"),a={};a.create=function(){var n=new o.ARRAY_TYPE(4);return n[0]=1,n[1]=0,n[2]=0,n[3]=1,n},a.clone=function(n){var e=new o.ARRAY_TYPE(4);return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e},a.copy=function(n,e){return n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n},a.identity=function(n){return n[0]=1,n[1]=0,n[2]=0,n[3]=1,n},a.fromValues=function(n,e,t,a){var i=new o.ARRAY_TYPE(4);return i[0]=n,i[1]=e,i[2]=t,i[3]=a,i},a.set=function(n,e,t,o,a){return n[0]=e,n[1]=t,n[2]=o,n[3]=a,n},a.transpose=function(n,e){if(n===e){var t=e[1];n[1]=e[2],n[2]=t}else n[0]=e[0],n[1]=e[2],n[2]=e[1],n[3]=e[3];return n},a.invert=function(n,e){var t=e[0],o=e[1],a=e[2],i=e[3],r=t*i-a*o;return r?(r=1/r,n[0]=i*r,n[1]=-o*r,n[2]=-a*r,n[3]=t*r,n):null},a.adjoint=function(n,e){var t=e[0];return n[0]=e[3],n[1]=-e[1],n[2]=-e[2],n[3]=t,n},a.determinant=function(n){return n[0]*n[3]-n[2]*n[1]},a.multiply=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=e[3],c=t[0],s=t[1],l=t[2],u=t[3];return n[0]=o*c+i*s,n[1]=a*c+r*s,n[2]=o*l+i*u,n[3]=a*l+r*u,n},a.mul=a.multiply,a.rotate=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=e[3],c=Math.sin(t),s=Math.cos(t);return n[0]=o*s+i*c,n[1]=a*s+r*c,n[2]=o*-c+i*s,n[3]=a*-c+r*s,n},a.scale=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=e[3],c=t[0],s=t[1];return n[0]=o*c,n[1]=a*c,n[2]=i*s,n[3]=r*s,n},a.fromRotation=function(n,e){var t=Math.sin(e),o=Math.cos(e);return n[0]=o,n[1]=t,n[2]=-t,n[3]=o,n},a.fromScaling=function(n,e){return n[0]=e[0],n[1]=0,n[2]=0,n[3]=e[1],n},a.str=function(n){return"mat2("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+")"},a.frob=function(n){return Math.sqrt(Math.pow(n[0],2)+Math.pow(n[1],2)+Math.pow(n[2],2)+Math.pow(n[3],2))},a.LDU=function(n,e,t,o){return n[2]=o[2]/o[0],t[0]=o[0],t[1]=o[1],t[3]=o[3]-n[2]*t[1],[n,e,t]},a.add=function(n,e,t){return n[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n[3]=e[3]+t[3],n},a.subtract=function(n,e,t){return n[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n[3]=e[3]-t[3],n},a.sub=a.subtract,a.exactEquals=function(n,e){return n[0]===e[0]&&n[1]===e[1]&&n[2]===e[2]&&n[3]===e[3]},a.equals=function(n,e){var t=n[0],a=n[1],i=n[2],r=n[3],c=e[0],s=e[1],l=e[2],u=e[3];return Math.abs(t-c)<=o.EPSILON*Math.max(1,Math.abs(t),Math.abs(c))&&Math.abs(a-s)<=o.EPSILON*Math.max(1,Math.abs(a),Math.abs(s))&&Math.abs(i-l)<=o.EPSILON*Math.max(1,Math.abs(i),Math.abs(l))&&Math.abs(r-u)<=o.EPSILON*Math.max(1,Math.abs(r),Math.abs(u))},a.multiplyScalar=function(n,e,t){return n[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n[3]=e[3]*t,n},a.multiplyScalarAndAdd=function(n,e,t,o){return n[0]=e[0]+t[0]*o,n[1]=e[1]+t[1]*o,n[2]=e[2]+t[2]*o,n[3]=e[3]+t[3]*o,n},e.exports=a},{"./common.js":2}],4:[function(n,e,t){var o=n("./common.js"),a={};a.create=function(){var n=new o.ARRAY_TYPE(6);return n[0]=1,n[1]=0,n[2]=0,n[3]=1,n[4]=0,n[5]=0,n},a.clone=function(n){var e=new o.ARRAY_TYPE(6);return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e},a.copy=function(n,e){return n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[4]=e[4],n[5]=e[5],n},a.identity=function(n){return n[0]=1,n[1]=0,n[2]=0,n[3]=1,n[4]=0,n[5]=0,n},a.fromValues=function(n,e,t,a,i,r){var c=new o.ARRAY_TYPE(6);return c[0]=n,c[1]=e,c[2]=t,c[3]=a,c[4]=i,c[5]=r,c},a.set=function(n,e,t,o,a,i,r){return n[0]=e,n[1]=t,n[2]=o,n[3]=a,n[4]=i,n[5]=r,n},a.invert=function(n,e){var t=e[0],o=e[1],a=e[2],i=e[3],r=e[4],c=e[5],s=t*i-o*a;return s?(s=1/s,n[0]=i*s,n[1]=-o*s,n[2]=-a*s,n[3]=t*s,n[4]=(a*c-i*r)*s,n[5]=(o*r-t*c)*s,n):null},a.determinant=function(n){return n[0]*n[3]-n[1]*n[2]},a.multiply=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=e[3],c=e[4],s=e[5],l=t[0],u=t[1],v=t[2],d=t[3],f=t[4],m=t[5];return n[0]=o*l+i*u,n[1]=a*l+r*u,n[2]=o*v+i*d,n[3]=a*v+r*d,n[4]=o*f+i*m+c,n[5]=a*f+r*m+s,n},a.mul=a.multiply,a.rotate=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=e[3],c=e[4],s=e[5],l=Math.sin(t),u=Math.cos(t);return n[0]=o*u+i*l,n[1]=a*u+r*l,n[2]=o*-l+i*u,n[3]=a*-l+r*u,n[4]=c,n[5]=s,n},a.scale=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=e[3],c=e[4],s=e[5],l=t[0],u=t[1];return n[0]=o*l,n[1]=a*l,n[2]=i*u,n[3]=r*u,n[4]=c,n[5]=s,n},a.translate=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=e[3],c=e[4],s=e[5],l=t[0],u=t[1];return n[0]=o,n[1]=a,n[2]=i,n[3]=r,n[4]=o*l+i*u+c,n[5]=a*l+r*u+s,n},a.fromRotation=function(n,e){var t=Math.sin(e),o=Math.cos(e);return n[0]=o,n[1]=t,n[2]=-t,n[3]=o,n[4]=0,n[5]=0,n},a.fromScaling=function(n,e){return n[0]=e[0],n[1]=0,n[2]=0,n[3]=e[1],n[4]=0,n[5]=0,n},a.fromTranslation=function(n,e){return n[0]=1,n[1]=0,n[2]=0,n[3]=1,n[4]=e[0],n[5]=e[1],n},a.str=function(n){return"mat2d("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+", "+n[4]+", "+n[5]+")"},a.frob=function(n){return Math.sqrt(Math.pow(n[0],2)+Math.pow(n[1],2)+Math.pow(n[2],2)+Math.pow(n[3],2)+Math.pow(n[4],2)+Math.pow(n[5],2)+1)},a.add=function(n,e,t){return n[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n[3]=e[3]+t[3],n[4]=e[4]+t[4],n[5]=e[5]+t[5],n},a.subtract=function(n,e,t){return n[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n[3]=e[3]-t[3],n[4]=e[4]-t[4],n[5]=e[5]-t[5],n},a.sub=a.subtract,a.multiplyScalar=function(n,e,t){return n[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n[3]=e[3]*t,n[4]=e[4]*t,n[5]=e[5]*t,n},a.multiplyScalarAndAdd=function(n,e,t,o){return n[0]=e[0]+t[0]*o,n[1]=e[1]+t[1]*o,n[2]=e[2]+t[2]*o,n[3]=e[3]+t[3]*o,n[4]=e[4]+t[4]*o,n[5]=e[5]+t[5]*o,n},a.exactEquals=function(n,e){return n[0]===e[0]&&n[1]===e[1]&&n[2]===e[2]&&n[3]===e[3]&&n[4]===e[4]&&n[5]===e[5]},a.equals=function(n,e){var t=n[0],a=n[1],i=n[2],r=n[3],c=n[4],s=n[5],l=e[0],u=e[1],v=e[2],d=e[3],f=e[4],m=e[5];return Math.abs(t-l)<=o.EPSILON*Math.max(1,Math.abs(t),Math.abs(l))&&Math.abs(a-u)<=o.EPSILON*Math.max(1,Math.abs(a),Math.abs(u))&&Math.abs(i-v)<=o.EPSILON*Math.max(1,Math.abs(i),Math.abs(v))&&Math.abs(r-d)<=o.EPSILON*Math.max(1,Math.abs(r),Math.abs(d))&&Math.abs(c-f)<=o.EPSILON*Math.max(1,Math.abs(c),Math.abs(f))&&Math.abs(s-m)<=o.EPSILON*Math.max(1,Math.abs(s),Math.abs(m))},e.exports=a},{"./common.js":2}],5:[function(n,e,t){var o=n("./common.js"),a={};a.create=function(){var n=new o.ARRAY_TYPE(9);return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=1,n[5]=0,n[6]=0,n[7]=0,n[8]=1,n},a.fromMat4=function(n,e){return n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[4],n[4]=e[5],n[5]=e[6],n[6]=e[8],n[7]=e[9],n[8]=e[10],n},a.clone=function(n){var e=new o.ARRAY_TYPE(9);return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e},a.copy=function(n,e){return n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[8]=e[8],n},a.fromValues=function(n,e,t,a,i,r,c,s,l){var u=new o.ARRAY_TYPE(9);return u[0]=n,u[1]=e,u[2]=t,u[3]=a,u[4]=i,u[5]=r,u[6]=c,u[7]=s,u[8]=l,u},a.set=function(n,e,t,o,a,i,r,c,s,l){return n[0]=e,n[1]=t,n[2]=o,n[3]=a,n[4]=i,n[5]=r,n[6]=c,n[7]=s,n[8]=l,n},a.identity=function(n){return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=1,n[5]=0,n[6]=0,n[7]=0,n[8]=1,n},a.transpose=function(n,e){if(n===e){var t=e[1],o=e[2],a=e[5];n[1]=e[3],n[2]=e[6],n[3]=t,n[5]=e[7],n[6]=o,n[7]=a}else n[0]=e[0],n[1]=e[3],n[2]=e[6],n[3]=e[1],n[4]=e[4],n[5]=e[7],n[6]=e[2],n[7]=e[5],n[8]=e[8];return n},a.invert=function(n,e){var t=e[0],o=e[1],a=e[2],i=e[3],r=e[4],c=e[5],s=e[6],l=e[7],u=e[8],v=u*r-c*l,d=-u*i+c*s,f=l*i-r*s,m=t*v+o*d+a*f;return m?(m=1/m,n[0]=v*m,n[1]=(-u*o+a*l)*m,n[2]=(c*o-a*r)*m,n[3]=d*m,n[4]=(u*t-a*s)*m,n[5]=(-c*t+a*i)*m,n[6]=f*m,n[7]=(-l*t+o*s)*m,n[8]=(r*t-o*i)*m,n):null},a.adjoint=function(n,e){var t=e[0],o=e[1],a=e[2],i=e[3],r=e[4],c=e[5],s=e[6],l=e[7],u=e[8];return n[0]=r*u-c*l,n[1]=a*l-o*u,n[2]=o*c-a*r,n[3]=c*s-i*u,n[4]=t*u-a*s,n[5]=a*i-t*c,n[6]=i*l-r*s,n[7]=o*s-t*l,n[8]=t*r-o*i,n},a.determinant=function(n){var e=n[0],t=n[1],o=n[2],a=n[3],i=n[4],r=n[5],c=n[6],s=n[7],l=n[8];return e*(l*i-r*s)+t*(-l*a+r*c)+o*(s*a-i*c)},a.multiply=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=e[3],c=e[4],s=e[5],l=e[6],u=e[7],v=e[8],d=t[0],f=t[1],m=t[2],x=t[3],h=t[4],p=t[5],y=t[6],g=t[7],b=t[8];return n[0]=d*o+f*r+m*l,n[1]=d*a+f*c+m*u,n[2]=d*i+f*s+m*v,n[3]=x*o+h*r+p*l,n[4]=x*a+h*c+p*u,n[5]=x*i+h*s+p*v,n[6]=y*o+g*r+b*l,n[7]=y*a+g*c+b*u,n[8]=y*i+g*s+b*v,n},a.mul=a.multiply,a.translate=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=e[3],c=e[4],s=e[5],l=e[6],u=e[7],v=e[8],d=t[0],f=t[1];return n[0]=o,n[1]=a,n[2]=i,n[3]=r,n[4]=c,n[5]=s,n[6]=d*o+f*r+l,n[7]=d*a+f*c+u,n[8]=d*i+f*s+v,n},a.rotate=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=e[3],c=e[4],s=e[5],l=e[6],u=e[7],v=e[8],d=Math.sin(t),f=Math.cos(t);return n[0]=f*o+d*r,n[1]=f*a+d*c,n[2]=f*i+d*s,n[3]=f*r-d*o,n[4]=f*c-d*a,n[5]=f*s-d*i,n[6]=l,n[7]=u,n[8]=v,n},a.scale=function(n,e,t){var o=t[0],a=t[1];return n[0]=o*e[0],n[1]=o*e[1],n[2]=o*e[2],n[3]=a*e[3],n[4]=a*e[4],n[5]=a*e[5],n[6]=e[6],n[7]=e[7],n[8]=e[8],n},a.fromTranslation=function(n,e){return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=1,n[5]=0,n[6]=e[0],n[7]=e[1],n[8]=1,n},a.fromRotation=function(n,e){var t=Math.sin(e),o=Math.cos(e);return n[0]=o,n[1]=t,n[2]=0,n[3]=-t,n[4]=o,n[5]=0,n[6]=0,n[7]=0,n[8]=1,n},a.fromScaling=function(n,e){return n[0]=e[0],n[1]=0,n[2]=0,n[3]=0,n[4]=e[1],n[5]=0,n[6]=0,n[7]=0,n[8]=1,n},a.fromMat2d=function(n,e){return n[0]=e[0],n[1]=e[1],n[2]=0,n[3]=e[2],n[4]=e[3],n[5]=0,n[6]=e[4],n[7]=e[5],n[8]=1,n},a.fromQuat=function(n,e){var t=e[0],o=e[1],a=e[2],i=e[3],r=t+t,c=o+o,s=a+a,l=t*r,u=o*r,v=o*c,d=a*r,f=a*c,m=a*s,x=i*r,h=i*c,p=i*s;return n[0]=1-v-m,n[3]=u-p,n[6]=d+h,n[1]=u+p,n[4]=1-l-m,n[7]=f-x,n[2]=d-h,n[5]=f+x,n[8]=1-l-v,n},a.normalFromMat4=function(n,e){var t=e[0],o=e[1],a=e[2],i=e[3],r=e[4],c=e[5],s=e[6],l=e[7],u=e[8],v=e[9],d=e[10],f=e[11],m=e[12],x=e[13],h=e[14],p=e[15],y=t*c-o*r,g=t*s-a*r,b=t*l-i*r,w=o*s-a*c,M=o*l-i*c,E=a*l-i*s,z=u*x-v*m,S=u*h-d*m,D=u*p-f*m,I=v*h-d*x,R=v*p-f*x,P=d*p-f*h,T=y*P-g*R+b*I+w*D-M*S+E*z;return T?(T=1/T,n[0]=(c*P-s*R+l*I)*T,n[1]=(s*D-r*P-l*S)*T,n[2]=(r*R-c*D+l*z)*T,n[3]=(a*R-o*P-i*I)*T,n[4]=(t*P-a*D+i*S)*T,n[5]=(o*D-t*R-i*z)*T,n[6]=(x*E-h*M+p*w)*T,n[7]=(h*b-m*E-p*g)*T,n[8]=(m*M-x*b+p*y)*T,n):null},a.str=function(n){return"mat3("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+", "+n[4]+", "+n[5]+", "+n[6]+", "+n[7]+", "+n[8]+")"},a.frob=function(n){return Math.sqrt(Math.pow(n[0],2)+Math.pow(n[1],2)+Math.pow(n[2],2)+Math.pow(n[3],2)+Math.pow(n[4],2)+Math.pow(n[5],2)+Math.pow(n[6],2)+Math.pow(n[7],2)+Math.pow(n[8],2))},a.add=function(n,e,t){return n[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n[3]=e[3]+t[3],n[4]=e[4]+t[4],n[5]=e[5]+t[5],n[6]=e[6]+t[6],n[7]=e[7]+t[7],n[8]=e[8]+t[8],n},a.subtract=function(n,e,t){return n[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n[3]=e[3]-t[3],n[4]=e[4]-t[4],n[5]=e[5]-t[5],n[6]=e[6]-t[6],n[7]=e[7]-t[7],n[8]=e[8]-t[8],n},a.sub=a.subtract,a.multiplyScalar=function(n,e,t){return n[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n[3]=e[3]*t,n[4]=e[4]*t,n[5]=e[5]*t,n[6]=e[6]*t,n[7]=e[7]*t,n[8]=e[8]*t,n},a.multiplyScalarAndAdd=function(n,e,t,o){return n[0]=e[0]+t[0]*o,n[1]=e[1]+t[1]*o,n[2]=e[2]+t[2]*o,n[3]=e[3]+t[3]*o,n[4]=e[4]+t[4]*o,n[5]=e[5]+t[5]*o,n[6]=e[6]+t[6]*o,n[7]=e[7]+t[7]*o,n[8]=e[8]+t[8]*o,n},a.exactEquals=function(n,e){return n[0]===e[0]&&n[1]===e[1]&&n[2]===e[2]&&n[3]===e[3]&&n[4]===e[4]&&n[5]===e[5]&&n[6]===e[6]&&n[7]===e[7]&&n[8]===e[8]},a.equals=function(n,e){var t=n[0],a=n[1],i=n[2],r=n[3],c=n[4],s=n[5],l=n[6],u=n[7],v=n[8],d=e[0],f=e[1],m=e[2],x=e[3],h=e[4],p=e[5],y=n[6],g=e[7],b=e[8];return Math.abs(t-d)<=o.EPSILON*Math.max(1,Math.abs(t),Math.abs(d))&&Math.abs(a-f)<=o.EPSILON*Math.max(1,Math.abs(a),Math.abs(f))&&Math.abs(i-m)<=o.EPSILON*Math.max(1,Math.abs(i),Math.abs(m))&&Math.abs(r-x)<=o.EPSILON*Math.max(1,Math.abs(r),Math.abs(x))&&Math.abs(c-h)<=o.EPSILON*Math.max(1,Math.abs(c),Math.abs(h))&&Math.abs(s-p)<=o.EPSILON*Math.max(1,Math.abs(s),Math.abs(p))&&Math.abs(l-y)<=o.EPSILON*Math.max(1,Math.abs(l),Math.abs(y))&&Math.abs(u-g)<=o.EPSILON*Math.max(1,Math.abs(u),Math.abs(g))&&Math.abs(v-b)<=o.EPSILON*Math.max(1,Math.abs(v),Math.abs(b))},e.exports=a},{"./common.js":2}],6:[function(n,e,t){var o=n("./common.js"),a={scalar:{},SIMD:{}};a.create=function(){var n=new o.ARRAY_TYPE(16);return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=1,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=1,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n},a.clone=function(n){var e=new o.ARRAY_TYPE(16);return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],e},a.copy=function(n,e){return n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[8]=e[8],n[9]=e[9],n[10]=e[10],n[11]=e[11],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15],n},a.fromValues=function(n,e,t,a,i,r,c,s,l,u,v,d,f,m,x,h){var p=new o.ARRAY_TYPE(16);return p[0]=n,p[1]=e,p[2]=t,p[3]=a,p[4]=i,p[5]=r,p[6]=c,p[7]=s,p[8]=l,p[9]=u,p[10]=v,p[11]=d,p[12]=f,p[13]=m,p[14]=x,p[15]=h,p},a.set=function(n,e,t,o,a,i,r,c,s,l,u,v,d,f,m,x,h){return n[0]=e,n[1]=t,n[2]=o,n[3]=a,n[4]=i,n[5]=r,n[6]=c,n[7]=s,n[8]=l,n[9]=u,n[10]=v,n[11]=d,n[12]=f,n[13]=m,n[14]=x,n[15]=h,n},a.identity=function(n){return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=1,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=1,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n},a.scalar.transpose=function(n,e){if(n===e){var t=e[1],o=e[2],a=e[3],i=e[6],r=e[7],c=e[11];n[1]=e[4],n[2]=e[8],n[3]=e[12],n[4]=t,n[6]=e[9],n[7]=e[13],n[8]=o,n[9]=i,n[11]=e[14],n[12]=a,n[13]=r,n[14]=c}else n[0]=e[0],n[1]=e[4],n[2]=e[8],n[3]=e[12],n[4]=e[1],n[5]=e[5],n[6]=e[9],n[7]=e[13],n[8]=e[2],n[9]=e[6],n[10]=e[10],n[11]=e[14],n[12]=e[3],n[13]=e[7],n[14]=e[11],n[15]=e[15];return n},a.SIMD.transpose=function(n,e){var t,o,a,i,r,c,s,l,u,v;return t=SIMD.Float32x4.load(e,0),o=SIMD.Float32x4.load(e,4),a=SIMD.Float32x4.load(e,8),i=SIMD.Float32x4.load(e,12),r=SIMD.Float32x4.shuffle(t,o,0,1,4,5),c=SIMD.Float32x4.shuffle(a,i,0,1,4,5),s=SIMD.Float32x4.shuffle(r,c,0,2,4,6),l=SIMD.Float32x4.shuffle(r,c,1,3,5,7),SIMD.Float32x4.store(n,0,s),SIMD.Float32x4.store(n,4,l),r=SIMD.Float32x4.shuffle(t,o,2,3,6,7),c=SIMD.Float32x4.shuffle(a,i,2,3,6,7),u=SIMD.Float32x4.shuffle(r,c,0,2,4,6),v=SIMD.Float32x4.shuffle(r,c,1,3,5,7),SIMD.Float32x4.store(n,8,u),SIMD.Float32x4.store(n,12,v),n},a.transpose=o.USE_SIMD?a.SIMD.transpose:a.scalar.transpose,a.scalar.invert=function(n,e){var t=e[0],o=e[1],a=e[2],i=e[3],r=e[4],c=e[5],s=e[6],l=e[7],u=e[8],v=e[9],d=e[10],f=e[11],m=e[12],x=e[13],h=e[14],p=e[15],y=t*c-o*r,g=t*s-a*r,b=t*l-i*r,w=o*s-a*c,M=o*l-i*c,E=a*l-i*s,z=u*x-v*m,S=u*h-d*m,D=u*p-f*m,I=v*h-d*x,R=v*p-f*x,P=d*p-f*h,T=y*P-g*R+b*I+w*D-M*S+E*z;return T?(T=1/T,n[0]=(c*P-s*R+l*I)*T,n[1]=(a*R-o*P-i*I)*T,n[2]=(x*E-h*M+p*w)*T,n[3]=(d*M-v*E-f*w)*T,n[4]=(s*D-r*P-l*S)*T,n[5]=(t*P-a*D+i*S)*T,n[6]=(h*b-m*E-p*g)*T,n[7]=(u*E-d*b+f*g)*T,n[8]=(r*R-c*D+l*z)*T,n[9]=(o*D-t*R-i*z)*T,n[10]=(m*M-x*b+p*y)*T,n[11]=(v*b-u*M-f*y)*T,n[12]=(c*S-r*I-s*z)*T,n[13]=(t*I-o*S+a*z)*T,n[14]=(x*g-m*w-h*y)*T,n[15]=(u*w-v*g+d*y)*T,n):null},a.SIMD.invert=function(n,e){var t,o,a,i,r,c,s,l,u,v,d=SIMD.Float32x4.load(e,0),f=SIMD.Float32x4.load(e,4),m=SIMD.Float32x4.load(e,8),x=SIMD.Float32x4.load(e,12);return r=SIMD.Float32x4.shuffle(d,f,0,1,4,5),o=SIMD.Float32x4.shuffle(m,x,0,1,4,5),t=SIMD.Float32x4.shuffle(r,o,0,2,4,6),o=SIMD.Float32x4.shuffle(o,r,1,3,5,7),r=SIMD.Float32x4.shuffle(d,f,2,3,6,7),i=SIMD.Float32x4.shuffle(m,x,2,3,6,7),a=SIMD.Float32x4.shuffle(r,i,0,2,4,6),i=SIMD.Float32x4.shuffle(i,r,1,3,5,7),r=SIMD.Float32x4.mul(a,i),r=SIMD.Float32x4.swizzle(r,1,0,3,2),c=SIMD.Float32x4.mul(o,r),s=SIMD.Float32x4.mul(t,r),r=SIMD.Float32x4.swizzle(r,2,3,0,1),c=SIMD.Float32x4.sub(SIMD.Float32x4.mul(o,r),c),s=SIMD.Float32x4.sub(SIMD.Float32x4.mul(t,r),s),s=SIMD.Float32x4.swizzle(s,2,3,0,1),r=SIMD.Float32x4.mul(o,a),r=SIMD.Float32x4.swizzle(r,1,0,3,2),c=SIMD.Float32x4.add(SIMD.Float32x4.mul(i,r),c),u=SIMD.Float32x4.mul(t,r),r=SIMD.Float32x4.swizzle(r,2,3,0,1),c=SIMD.Float32x4.sub(c,SIMD.Float32x4.mul(i,r)),u=SIMD.Float32x4.sub(SIMD.Float32x4.mul(t,r),u),u=SIMD.Float32x4.swizzle(u,2,3,0,1),r=SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(o,2,3,0,1),i),r=SIMD.Float32x4.swizzle(r,1,0,3,2),a=SIMD.Float32x4.swizzle(a,2,3,0,1),c=SIMD.Float32x4.add(SIMD.Float32x4.mul(a,r),c),l=SIMD.Float32x4.mul(t,r),r=SIMD.Float32x4.swizzle(r,2,3,0,1),c=SIMD.Float32x4.sub(c,SIMD.Float32x4.mul(a,r)),l=SIMD.Float32x4.sub(SIMD.Float32x4.mul(t,r),l),l=SIMD.Float32x4.swizzle(l,2,3,0,1),r=SIMD.Float32x4.mul(t,o),r=SIMD.Float32x4.swizzle(r,1,0,3,2),l=SIMD.Float32x4.add(SIMD.Float32x4.mul(i,r),l),u=SIMD.Float32x4.sub(SIMD.Float32x4.mul(a,r),u),r=SIMD.Float32x4.swizzle(r,2,3,0,1),l=SIMD.Float32x4.sub(SIMD.Float32x4.mul(i,r),l),u=SIMD.Float32x4.sub(u,SIMD.Float32x4.mul(a,r)),r=SIMD.Float32x4.mul(t,i),r=SIMD.Float32x4.swizzle(r,1,0,3,2),s=SIMD.Float32x4.sub(s,SIMD.Float32x4.mul(a,r)),l=SIMD.Float32x4.add(SIMD.Float32x4.mul(o,r),l),r=SIMD.Float32x4.swizzle(r,2,3,0,1),s=SIMD.Float32x4.add(SIMD.Float32x4.mul(a,r),s),l=SIMD.Float32x4.sub(l,SIMD.Float32x4.mul(o,r)),r=SIMD.Float32x4.mul(t,a),r=SIMD.Float32x4.swizzle(r,1,0,3,2),s=SIMD.Float32x4.add(SIMD.Float32x4.mul(i,r),s),u=SIMD.Float32x4.sub(u,SIMD.Float32x4.mul(o,r)),r=SIMD.Float32x4.swizzle(r,2,3,0,1),s=SIMD.Float32x4.sub(s,SIMD.Float32x4.mul(i,r)),u=SIMD.Float32x4.add(SIMD.Float32x4.mul(o,r),u),v=SIMD.Float32x4.mul(t,c),v=SIMD.Float32x4.add(SIMD.Float32x4.swizzle(v,2,3,0,1),v),v=SIMD.Float32x4.add(SIMD.Float32x4.swizzle(v,1,0,3,2),v),r=SIMD.Float32x4.reciprocalApproximation(v),v=SIMD.Float32x4.sub(SIMD.Float32x4.add(r,r),SIMD.Float32x4.mul(v,SIMD.Float32x4.mul(r,r))),(v=SIMD.Float32x4.swizzle(v,0,0,0,0))?(SIMD.Float32x4.store(n,0,SIMD.Float32x4.mul(v,c)),SIMD.Float32x4.store(n,4,SIMD.Float32x4.mul(v,s)),SIMD.Float32x4.store(n,8,SIMD.Float32x4.mul(v,l)),SIMD.Float32x4.store(n,12,SIMD.Float32x4.mul(v,u)),n):null},a.invert=o.USE_SIMD?a.SIMD.invert:a.scalar.invert,a.scalar.adjoint=function(n,e){var t=e[0],o=e[1],a=e[2],i=e[3],r=e[4],c=e[5],s=e[6],l=e[7],u=e[8],v=e[9],d=e[10],f=e[11],m=e[12],x=e[13],h=e[14],p=e[15];return n[0]=c*(d*p-f*h)-v*(s*p-l*h)+x*(s*f-l*d),n[1]=-(o*(d*p-f*h)-v*(a*p-i*h)+x*(a*f-i*d)),n[2]=o*(s*p-l*h)-c*(a*p-i*h)+x*(a*l-i*s),n[3]=-(o*(s*f-l*d)-c*(a*f-i*d)+v*(a*l-i*s)),n[4]=-(r*(d*p-f*h)-u*(s*p-l*h)+m*(s*f-l*d)),n[5]=t*(d*p-f*h)-u*(a*p-i*h)+m*(a*f-i*d),n[6]=-(t*(s*p-l*h)-r*(a*p-i*h)+m*(a*l-i*s)),n[7]=t*(s*f-l*d)-r*(a*f-i*d)+u*(a*l-i*s),n[8]=r*(v*p-f*x)-u*(c*p-l*x)+m*(c*f-l*v),n[9]=-(t*(v*p-f*x)-u*(o*p-i*x)+m*(o*f-i*v)),n[10]=t*(c*p-l*x)-r*(o*p-i*x)+m*(o*l-i*c),n[11]=-(t*(c*f-l*v)-r*(o*f-i*v)+u*(o*l-i*c)),n[12]=-(r*(v*h-d*x)-u*(c*h-s*x)+m*(c*d-s*v)),n[13]=t*(v*h-d*x)-u*(o*h-a*x)+m*(o*d-a*v),n[14]=-(t*(c*h-s*x)-r*(o*h-a*x)+m*(o*s-a*c)),n[15]=t*(c*d-s*v)-r*(o*d-a*v)+u*(o*s-a*c),n},a.SIMD.adjoint=function(n,e){var t,o,a,i,r,c,s,l,u,v,d,f,m,t=SIMD.Float32x4.load(e,0),o=SIMD.Float32x4.load(e,4),a=SIMD.Float32x4.load(e,8),i=SIMD.Float32x4.load(e,12);return u=SIMD.Float32x4.shuffle(t,o,0,1,4,5),c=SIMD.Float32x4.shuffle(a,i,0,1,4,5),r=SIMD.Float32x4.shuffle(u,c,0,2,4,6),c=SIMD.Float32x4.shuffle(c,u,1,3,5,7),u=SIMD.Float32x4.shuffle(t,o,2,3,6,7),l=SIMD.Float32x4.shuffle(a,i,2,3,6,7),s=SIMD.Float32x4.shuffle(u,l,0,2,4,6),l=SIMD.Float32x4.shuffle(l,u,1,3,5,7),u=SIMD.Float32x4.mul(s,l),u=SIMD.Float32x4.swizzle(u,1,0,3,2),v=SIMD.Float32x4.mul(c,u),d=SIMD.Float32x4.mul(r,u),u=SIMD.Float32x4.swizzle(u,2,3,0,1),v=SIMD.Float32x4.sub(SIMD.Float32x4.mul(c,u),v),d=SIMD.Float32x4.sub(SIMD.Float32x4.mul(r,u),d),d=SIMD.Float32x4.swizzle(d,2,3,0,1),u=SIMD.Float32x4.mul(c,s),u=SIMD.Float32x4.swizzle(u,1,0,3,2),v=SIMD.Float32x4.add(SIMD.Float32x4.mul(l,u),v),m=SIMD.Float32x4.mul(r,u),u=SIMD.Float32x4.swizzle(u,2,3,0,1),v=SIMD.Float32x4.sub(v,SIMD.Float32x4.mul(l,u)),m=SIMD.Float32x4.sub(SIMD.Float32x4.mul(r,u),m),m=SIMD.Float32x4.swizzle(m,2,3,0,1),u=SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(c,2,3,0,1),l),u=SIMD.Float32x4.swizzle(u,1,0,3,2),s=SIMD.Float32x4.swizzle(s,2,3,0,1),v=SIMD.Float32x4.add(SIMD.Float32x4.mul(s,u),v),f=SIMD.Float32x4.mul(r,u),u=SIMD.Float32x4.swizzle(u,2,3,0,1),v=SIMD.Float32x4.sub(v,SIMD.Float32x4.mul(s,u)),f=SIMD.Float32x4.sub(SIMD.Float32x4.mul(r,u),f),f=SIMD.Float32x4.swizzle(f,2,3,0,1),u=SIMD.Float32x4.mul(r,c),u=SIMD.Float32x4.swizzle(u,1,0,3,2),f=SIMD.Float32x4.add(SIMD.Float32x4.mul(l,u),f),m=SIMD.Float32x4.sub(SIMD.Float32x4.mul(s,u),m),u=SIMD.Float32x4.swizzle(u,2,3,0,1),f=SIMD.Float32x4.sub(SIMD.Float32x4.mul(l,u),f),m=SIMD.Float32x4.sub(m,SIMD.Float32x4.mul(s,u)),u=SIMD.Float32x4.mul(r,l),u=SIMD.Float32x4.swizzle(u,1,0,3,2),d=SIMD.Float32x4.sub(d,SIMD.Float32x4.mul(s,u)),f=SIMD.Float32x4.add(SIMD.Float32x4.mul(c,u),f),u=SIMD.Float32x4.swizzle(u,2,3,0,1),d=SIMD.Float32x4.add(SIMD.Float32x4.mul(s,u),d),f=SIMD.Float32x4.sub(f,SIMD.Float32x4.mul(c,u)),u=SIMD.Float32x4.mul(r,s),u=SIMD.Float32x4.swizzle(u,1,0,3,2),d=SIMD.Float32x4.add(SIMD.Float32x4.mul(l,u),d),m=SIMD.Float32x4.sub(m,SIMD.Float32x4.mul(c,u)),u=SIMD.Float32x4.swizzle(u,2,3,0,1),d=SIMD.Float32x4.sub(d,SIMD.Float32x4.mul(l,u)),m=SIMD.Float32x4.add(SIMD.Float32x4.mul(c,u),m),SIMD.Float32x4.store(n,0,v),SIMD.Float32x4.store(n,4,d),SIMD.Float32x4.store(n,8,f),SIMD.Float32x4.store(n,12,m),n},a.adjoint=o.USE_SIMD?a.SIMD.adjoint:a.scalar.adjoint,a.determinant=function(n){var e=n[0],t=n[1],o=n[2],a=n[3],i=n[4],r=n[5],c=n[6],s=n[7],l=n[8],u=n[9],v=n[10],d=n[11],f=n[12],m=n[13],x=n[14],h=n[15],p=e*r-t*i,y=e*c-o*i,g=e*s-a*i,b=t*c-o*r,w=t*s-a*r,M=o*s-a*c,E=l*m-u*f,z=l*x-v*f,S=l*h-d*f,D=u*x-v*m,I=u*h-d*m,R=v*h-d*x;return p*R-y*I+g*D+b*S-w*z+M*E},a.SIMD.multiply=function(n,e,t){var o=SIMD.Float32x4.load(e,0),a=SIMD.Float32x4.load(e,4),i=SIMD.Float32x4.load(e,8),r=SIMD.Float32x4.load(e,12),c=SIMD.Float32x4.load(t,0),s=SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(c,0,0,0,0),o),SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(c,1,1,1,1),a),SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(c,2,2,2,2),i),SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(c,3,3,3,3),r))));SIMD.Float32x4.store(n,0,s);var l=SIMD.Float32x4.load(t,4),u=SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(l,0,0,0,0),o),SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(l,1,1,1,1),a),SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(l,2,2,2,2),i),SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(l,3,3,3,3),r))));SIMD.Float32x4.store(n,4,u);var v=SIMD.Float32x4.load(t,8),d=SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(v,0,0,0,0),o),SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(v,1,1,1,1),a),SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(v,2,2,2,2),i),SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(v,3,3,3,3),r))));SIMD.Float32x4.store(n,8,d);var f=SIMD.Float32x4.load(t,12),m=SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(f,0,0,0,0),o),SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(f,1,1,1,1),a),SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(f,2,2,2,2),i),SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(f,3,3,3,3),r))));return SIMD.Float32x4.store(n,12,m),n},a.scalar.multiply=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=e[3],c=e[4],s=e[5],l=e[6],u=e[7],v=e[8],d=e[9],f=e[10],m=e[11],x=e[12],h=e[13],p=e[14],y=e[15],g=t[0],b=t[1],w=t[2],M=t[3];return n[0]=g*o+b*c+w*v+M*x,n[1]=g*a+b*s+w*d+M*h,n[2]=g*i+b*l+w*f+M*p,n[3]=g*r+b*u+w*m+M*y,g=t[4],b=t[5],w=t[6],M=t[7],n[4]=g*o+b*c+w*v+M*x,n[5]=g*a+b*s+w*d+M*h,n[6]=g*i+b*l+w*f+M*p,n[7]=g*r+b*u+w*m+M*y,g=t[8],b=t[9],w=t[10],M=t[11],n[8]=g*o+b*c+w*v+M*x,n[9]=g*a+b*s+w*d+M*h,n[10]=g*i+b*l+w*f+M*p,n[11]=g*r+b*u+w*m+M*y,g=t[12],b=t[13],w=t[14],M=t[15],n[12]=g*o+b*c+w*v+M*x,n[13]=g*a+b*s+w*d+M*h,n[14]=g*i+b*l+w*f+M*p,n[15]=g*r+b*u+w*m+M*y,n},a.multiply=o.USE_SIMD?a.SIMD.multiply:a.scalar.multiply,a.mul=a.multiply,a.scalar.translate=function(n,e,t){var o,a,i,r,c,s,l,u,v,d,f,m,x=t[0],h=t[1],p=t[2];return e===n?(n[12]=e[0]*x+e[4]*h+e[8]*p+e[12],n[13]=e[1]*x+e[5]*h+e[9]*p+e[13],n[14]=e[2]*x+e[6]*h+e[10]*p+e[14],n[15]=e[3]*x+e[7]*h+e[11]*p+e[15]):(o=e[0],a=e[1],i=e[2],r=e[3],c=e[4],s=e[5],l=e[6],u=e[7],v=e[8],d=e[9],f=e[10],m=e[11],n[0]=o,n[1]=a,n[2]=i,n[3]=r,n[4]=c,n[5]=s,n[6]=l,n[7]=u,n[8]=v,n[9]=d,n[10]=f,n[11]=m,n[12]=o*x+c*h+v*p+e[12],n[13]=a*x+s*h+d*p+e[13],n[14]=i*x+l*h+f*p+e[14],n[15]=r*x+u*h+m*p+e[15]),n},a.SIMD.translate=function(n,e,t){var o=SIMD.Float32x4.load(e,0),a=SIMD.Float32x4.load(e,4),i=SIMD.Float32x4.load(e,8),r=SIMD.Float32x4.load(e,12),c=SIMD.Float32x4(t[0],t[1],t[2],0);e!==n&&(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[8]=e[8],n[9]=e[9],n[10]=e[10],n[11]=e[11]),o=SIMD.Float32x4.mul(o,SIMD.Float32x4.swizzle(c,0,0,0,0)),a=SIMD.Float32x4.mul(a,SIMD.Float32x4.swizzle(c,1,1,1,1)),i=SIMD.Float32x4.mul(i,SIMD.Float32x4.swizzle(c,2,2,2,2));var s=SIMD.Float32x4.add(o,SIMD.Float32x4.add(a,SIMD.Float32x4.add(i,r)));return SIMD.Float32x4.store(n,12,s),n},a.translate=o.USE_SIMD?a.SIMD.translate:a.scalar.translate,a.scalar.scale=function(n,e,t){var o=t[0],a=t[1],i=t[2];return n[0]=e[0]*o,n[1]=e[1]*o,n[2]=e[2]*o,n[3]=e[3]*o,n[4]=e[4]*a,n[5]=e[5]*a,n[6]=e[6]*a,n[7]=e[7]*a,n[8]=e[8]*i,n[9]=e[9]*i,n[10]=e[10]*i,n[11]=e[11]*i,n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15],n},a.SIMD.scale=function(n,e,t){var o,a,i,r=SIMD.Float32x4(t[0],t[1],t[2],0);return o=SIMD.Float32x4.load(e,0),SIMD.Float32x4.store(n,0,SIMD.Float32x4.mul(o,SIMD.Float32x4.swizzle(r,0,0,0,0))),a=SIMD.Float32x4.load(e,4),SIMD.Float32x4.store(n,4,SIMD.Float32x4.mul(a,SIMD.Float32x4.swizzle(r,1,1,1,1))),i=SIMD.Float32x4.load(e,8),SIMD.Float32x4.store(n,8,SIMD.Float32x4.mul(i,SIMD.Float32x4.swizzle(r,2,2,2,2))),n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15],n},a.scale=o.USE_SIMD?a.SIMD.scale:a.scalar.scale,a.rotate=function(n,e,t,a){var i,r,c,s,l,u,v,d,f,m,x,h,p,y,g,b,w,M,E,z,S,D,I,R,P=a[0],T=a[1],F=a[2],H=Math.sqrt(P*P+T*T+F*F);return Math.abs(H)<o.EPSILON?null:(H=1/H,P*=H,T*=H,F*=H,i=Math.sin(t),r=Math.cos(t),c=1-r,s=e[0],l=e[1],u=e[2],v=e[3],d=e[4],f=e[5],m=e[6],x=e[7],h=e[8],p=e[9],y=e[10],g=e[11],b=P*P*c+r,w=T*P*c+F*i,M=F*P*c-T*i,E=P*T*c-F*i,z=T*T*c+r,S=F*T*c+P*i,D=P*F*c+T*i,I=T*F*c-P*i,R=F*F*c+r,n[0]=s*b+d*w+h*M,n[1]=l*b+f*w+p*M,n[2]=u*b+m*w+y*M,n[3]=v*b+x*w+g*M,n[4]=s*E+d*z+h*S,n[5]=l*E+f*z+p*S,n[6]=u*E+m*z+y*S,n[7]=v*E+x*z+g*S,n[8]=s*D+d*I+h*R,n[9]=l*D+f*I+p*R,n[10]=u*D+m*I+y*R,n[11]=v*D+x*I+g*R,e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n)},a.scalar.rotateX=function(n,e,t){var o=Math.sin(t),a=Math.cos(t),i=e[4],r=e[5],c=e[6],s=e[7],l=e[8],u=e[9],v=e[10],d=e[11];return e!==n&&(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n[4]=i*a+l*o,n[5]=r*a+u*o,n[6]=c*a+v*o,n[7]=s*a+d*o,n[8]=l*a-i*o,n[9]=u*a-r*o,n[10]=v*a-c*o,n[11]=d*a-s*o,n},a.SIMD.rotateX=function(n,e,t){var o=SIMD.Float32x4.splat(Math.sin(t)),a=SIMD.Float32x4.splat(Math.cos(t));e!==n&&(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]);var i=SIMD.Float32x4.load(e,4),r=SIMD.Float32x4.load(e,8);return SIMD.Float32x4.store(n,4,SIMD.Float32x4.add(SIMD.Float32x4.mul(i,a),SIMD.Float32x4.mul(r,o))),SIMD.Float32x4.store(n,8,SIMD.Float32x4.sub(SIMD.Float32x4.mul(r,a),SIMD.Float32x4.mul(i,o))),n},a.rotateX=o.USE_SIMD?a.SIMD.rotateX:a.scalar.rotateX,a.scalar.rotateY=function(n,e,t){var o=Math.sin(t),a=Math.cos(t),i=e[0],r=e[1],c=e[2],s=e[3],l=e[8],u=e[9],v=e[10],d=e[11];return e!==n&&(n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n[0]=i*a-l*o,n[1]=r*a-u*o,n[2]=c*a-v*o,n[3]=s*a-d*o,n[8]=i*o+l*a,n[9]=r*o+u*a,n[10]=c*o+v*a,n[11]=s*o+d*a,n},a.SIMD.rotateY=function(n,e,t){var o=SIMD.Float32x4.splat(Math.sin(t)),a=SIMD.Float32x4.splat(Math.cos(t));e!==n&&(n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]);var i=SIMD.Float32x4.load(e,0),r=SIMD.Float32x4.load(e,8);return SIMD.Float32x4.store(n,0,SIMD.Float32x4.sub(SIMD.Float32x4.mul(i,a),SIMD.Float32x4.mul(r,o))),SIMD.Float32x4.store(n,8,SIMD.Float32x4.add(SIMD.Float32x4.mul(i,o),SIMD.Float32x4.mul(r,a))),n},a.rotateY=o.USE_SIMD?a.SIMD.rotateY:a.scalar.rotateY,a.scalar.rotateZ=function(n,e,t){var o=Math.sin(t),a=Math.cos(t),i=e[0],r=e[1],c=e[2],s=e[3],l=e[4],u=e[5],v=e[6],d=e[7];return e!==n&&(n[8]=e[8],n[9]=e[9],n[10]=e[10],n[11]=e[11],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n[0]=i*a+l*o,n[1]=r*a+u*o,n[2]=c*a+v*o,n[3]=s*a+d*o,n[4]=l*a-i*o,n[5]=u*a-r*o,n[6]=v*a-c*o,n[7]=d*a-s*o,n},a.SIMD.rotateZ=function(n,e,t){var o=SIMD.Float32x4.splat(Math.sin(t)),a=SIMD.Float32x4.splat(Math.cos(t));e!==n&&(n[8]=e[8],n[9]=e[9],n[10]=e[10],n[11]=e[11],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]);var i=SIMD.Float32x4.load(e,0),r=SIMD.Float32x4.load(e,4);return SIMD.Float32x4.store(n,0,SIMD.Float32x4.add(SIMD.Float32x4.mul(i,a),SIMD.Float32x4.mul(r,o))),SIMD.Float32x4.store(n,4,SIMD.Float32x4.sub(SIMD.Float32x4.mul(r,a),SIMD.Float32x4.mul(i,o))),n},a.rotateZ=o.USE_SIMD?a.SIMD.rotateZ:a.scalar.rotateZ,a.fromTranslation=function(n,e){return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=1,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=1,n[11]=0,n[12]=e[0],n[13]=e[1],n[14]=e[2],n[15]=1,n},a.fromScaling=function(n,e){return n[0]=e[0],n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=e[1],n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=e[2],n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n},a.fromRotation=function(n,e,t){var a,i,r,c=t[0],s=t[1],l=t[2],u=Math.sqrt(c*c+s*s+l*l);return Math.abs(u)<o.EPSILON?null:(u=1/u,c*=u,s*=u,l*=u,a=Math.sin(e),i=Math.cos(e),r=1-i,n[0]=c*c*r+i,n[1]=s*c*r+l*a,n[2]=l*c*r-s*a,n[3]=0,n[4]=c*s*r-l*a,n[5]=s*s*r+i,n[6]=l*s*r+c*a,n[7]=0,n[8]=c*l*r+s*a,n[9]=s*l*r-c*a,n[10]=l*l*r+i,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n)},a.fromXRotation=function(n,e){var t=Math.sin(e),o=Math.cos(e);return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=o,n[6]=t,n[7]=0,n[8]=0,n[9]=-t,n[10]=o,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n},a.fromYRotation=function(n,e){var t=Math.sin(e),o=Math.cos(e);return n[0]=o,n[1]=0,n[2]=-t,n[3]=0,n[4]=0,n[5]=1,n[6]=0,n[7]=0,n[8]=t,n[9]=0,n[10]=o,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n},a.fromZRotation=function(n,e){var t=Math.sin(e),o=Math.cos(e);return n[0]=o,n[1]=t,n[2]=0,n[3]=0,n[4]=-t,n[5]=o,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=1,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n},a.fromRotationTranslation=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=e[3],c=o+o,s=a+a,l=i+i,u=o*c,v=o*s,d=o*l,f=a*s,m=a*l,x=i*l,h=r*c,p=r*s,y=r*l;return n[0]=1-(f+x),n[1]=v+y,n[2]=d-p,n[3]=0,n[4]=v-y,n[5]=1-(u+x),n[6]=m+h,n[7]=0,n[8]=d+p,n[9]=m-h,n[10]=1-(u+f),n[11]=0,n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n},a.getTranslation=function(n,e){return n[0]=e[12],n[1]=e[13],n[2]=e[14],n},a.getRotation=function(n,e){var t=e[0]+e[5]+e[10],o=0;return t>0?(o=2*Math.sqrt(t+1),n[3]=.25*o,n[0]=(e[6]-e[9])/o,n[1]=(e[8]-e[2])/o,n[2]=(e[1]-e[4])/o):e[0]>e[5]&e[0]>e[10]?(o=2*Math.sqrt(1+e[0]-e[5]-e[10]),n[3]=(e[6]-e[9])/o,n[0]=.25*o,n[1]=(e[1]+e[4])/o,n[2]=(e[8]+e[2])/o):e[5]>e[10]?(o=2*Math.sqrt(1+e[5]-e[0]-e[10]),n[3]=(e[8]-e[2])/o,n[0]=(e[1]+e[4])/o,n[1]=.25*o,n[2]=(e[6]+e[9])/o):(o=2*Math.sqrt(1+e[10]-e[0]-e[5]),
n[3]=(e[1]-e[4])/o,n[0]=(e[8]+e[2])/o,n[1]=(e[6]+e[9])/o,n[2]=.25*o),n},a.fromRotationTranslationScale=function(n,e,t,o){var a=e[0],i=e[1],r=e[2],c=e[3],s=a+a,l=i+i,u=r+r,v=a*s,d=a*l,f=a*u,m=i*l,x=i*u,h=r*u,p=c*s,y=c*l,g=c*u,b=o[0],w=o[1],M=o[2];return n[0]=(1-(m+h))*b,n[1]=(d+g)*b,n[2]=(f-y)*b,n[3]=0,n[4]=(d-g)*w,n[5]=(1-(v+h))*w,n[6]=(x+p)*w,n[7]=0,n[8]=(f+y)*M,n[9]=(x-p)*M,n[10]=(1-(v+m))*M,n[11]=0,n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n},a.fromRotationTranslationScaleOrigin=function(n,e,t,o,a){var i=e[0],r=e[1],c=e[2],s=e[3],l=i+i,u=r+r,v=c+c,d=i*l,f=i*u,m=i*v,x=r*u,h=r*v,p=c*v,y=s*l,g=s*u,b=s*v,w=o[0],M=o[1],E=o[2],z=a[0],S=a[1],D=a[2];return n[0]=(1-(x+p))*w,n[1]=(f+b)*w,n[2]=(m-g)*w,n[3]=0,n[4]=(f-b)*M,n[5]=(1-(d+p))*M,n[6]=(h+y)*M,n[7]=0,n[8]=(m+g)*E,n[9]=(h-y)*E,n[10]=(1-(d+x))*E,n[11]=0,n[12]=t[0]+z-(n[0]*z+n[4]*S+n[8]*D),n[13]=t[1]+S-(n[1]*z+n[5]*S+n[9]*D),n[14]=t[2]+D-(n[2]*z+n[6]*S+n[10]*D),n[15]=1,n},a.fromQuat=function(n,e){var t=e[0],o=e[1],a=e[2],i=e[3],r=t+t,c=o+o,s=a+a,l=t*r,u=o*r,v=o*c,d=a*r,f=a*c,m=a*s,x=i*r,h=i*c,p=i*s;return n[0]=1-v-m,n[1]=u+p,n[2]=d-h,n[3]=0,n[4]=u-p,n[5]=1-l-m,n[6]=f+x,n[7]=0,n[8]=d+h,n[9]=f-x,n[10]=1-l-v,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n},a.frustum=function(n,e,t,o,a,i,r){var c=1/(t-e),s=1/(a-o),l=1/(i-r);return n[0]=2*i*c,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=2*i*s,n[6]=0,n[7]=0,n[8]=(t+e)*c,n[9]=(a+o)*s,n[10]=(r+i)*l,n[11]=-1,n[12]=0,n[13]=0,n[14]=r*i*2*l,n[15]=0,n},a.perspective=function(n,e,t,o,a){var i=1/Math.tan(e/2),r=1/(o-a);return n[0]=i/t,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=i,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=(a+o)*r,n[11]=-1,n[12]=0,n[13]=0,n[14]=2*a*o*r,n[15]=0,n},a.perspectiveFromFieldOfView=function(n,e,t,o){var a=Math.tan(e.upDegrees*Math.PI/180),i=Math.tan(e.downDegrees*Math.PI/180),r=Math.tan(e.leftDegrees*Math.PI/180),c=Math.tan(e.rightDegrees*Math.PI/180),s=2/(r+c),l=2/(a+i);return n[0]=s,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=l,n[6]=0,n[7]=0,n[8]=-((r-c)*s*.5),n[9]=(a-i)*l*.5,n[10]=o/(t-o),n[11]=-1,n[12]=0,n[13]=0,n[14]=o*t/(t-o),n[15]=0,n},a.ortho=function(n,e,t,o,a,i,r){var c=1/(e-t),s=1/(o-a),l=1/(i-r);return n[0]=-2*c,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=-2*s,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=2*l,n[11]=0,n[12]=(e+t)*c,n[13]=(a+o)*s,n[14]=(r+i)*l,n[15]=1,n},a.lookAt=function(n,e,t,i){var r,c,s,l,u,v,d,f,m,x,h=e[0],p=e[1],y=e[2],g=i[0],b=i[1],w=i[2],M=t[0],E=t[1],z=t[2];return Math.abs(h-M)<o.EPSILON&&Math.abs(p-E)<o.EPSILON&&Math.abs(y-z)<o.EPSILON?a.identity(n):(d=h-M,f=p-E,m=y-z,x=1/Math.sqrt(d*d+f*f+m*m),d*=x,f*=x,m*=x,r=b*m-w*f,c=w*d-g*m,s=g*f-b*d,x=Math.sqrt(r*r+c*c+s*s),x?(x=1/x,r*=x,c*=x,s*=x):(r=0,c=0,s=0),l=f*s-m*c,u=m*r-d*s,v=d*c-f*r,x=Math.sqrt(l*l+u*u+v*v),x?(x=1/x,l*=x,u*=x,v*=x):(l=0,u=0,v=0),n[0]=r,n[1]=l,n[2]=d,n[3]=0,n[4]=c,n[5]=u,n[6]=f,n[7]=0,n[8]=s,n[9]=v,n[10]=m,n[11]=0,n[12]=-(r*h+c*p+s*y),n[13]=-(l*h+u*p+v*y),n[14]=-(d*h+f*p+m*y),n[15]=1,n)},a.str=function(n){return"mat4("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+", "+n[4]+", "+n[5]+", "+n[6]+", "+n[7]+", "+n[8]+", "+n[9]+", "+n[10]+", "+n[11]+", "+n[12]+", "+n[13]+", "+n[14]+", "+n[15]+")"},a.frob=function(n){return Math.sqrt(Math.pow(n[0],2)+Math.pow(n[1],2)+Math.pow(n[2],2)+Math.pow(n[3],2)+Math.pow(n[4],2)+Math.pow(n[5],2)+Math.pow(n[6],2)+Math.pow(n[7],2)+Math.pow(n[8],2)+Math.pow(n[9],2)+Math.pow(n[10],2)+Math.pow(n[11],2)+Math.pow(n[12],2)+Math.pow(n[13],2)+Math.pow(n[14],2)+Math.pow(n[15],2))},a.add=function(n,e,t){return n[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n[3]=e[3]+t[3],n[4]=e[4]+t[4],n[5]=e[5]+t[5],n[6]=e[6]+t[6],n[7]=e[7]+t[7],n[8]=e[8]+t[8],n[9]=e[9]+t[9],n[10]=e[10]+t[10],n[11]=e[11]+t[11],n[12]=e[12]+t[12],n[13]=e[13]+t[13],n[14]=e[14]+t[14],n[15]=e[15]+t[15],n},a.subtract=function(n,e,t){return n[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n[3]=e[3]-t[3],n[4]=e[4]-t[4],n[5]=e[5]-t[5],n[6]=e[6]-t[6],n[7]=e[7]-t[7],n[8]=e[8]-t[8],n[9]=e[9]-t[9],n[10]=e[10]-t[10],n[11]=e[11]-t[11],n[12]=e[12]-t[12],n[13]=e[13]-t[13],n[14]=e[14]-t[14],n[15]=e[15]-t[15],n},a.sub=a.subtract,a.multiplyScalar=function(n,e,t){return n[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n[3]=e[3]*t,n[4]=e[4]*t,n[5]=e[5]*t,n[6]=e[6]*t,n[7]=e[7]*t,n[8]=e[8]*t,n[9]=e[9]*t,n[10]=e[10]*t,n[11]=e[11]*t,n[12]=e[12]*t,n[13]=e[13]*t,n[14]=e[14]*t,n[15]=e[15]*t,n},a.multiplyScalarAndAdd=function(n,e,t,o){return n[0]=e[0]+t[0]*o,n[1]=e[1]+t[1]*o,n[2]=e[2]+t[2]*o,n[3]=e[3]+t[3]*o,n[4]=e[4]+t[4]*o,n[5]=e[5]+t[5]*o,n[6]=e[6]+t[6]*o,n[7]=e[7]+t[7]*o,n[8]=e[8]+t[8]*o,n[9]=e[9]+t[9]*o,n[10]=e[10]+t[10]*o,n[11]=e[11]+t[11]*o,n[12]=e[12]+t[12]*o,n[13]=e[13]+t[13]*o,n[14]=e[14]+t[14]*o,n[15]=e[15]+t[15]*o,n},a.exactEquals=function(n,e){return n[0]===e[0]&&n[1]===e[1]&&n[2]===e[2]&&n[3]===e[3]&&n[4]===e[4]&&n[5]===e[5]&&n[6]===e[6]&&n[7]===e[7]&&n[8]===e[8]&&n[9]===e[9]&&n[10]===e[10]&&n[11]===e[11]&&n[12]===e[12]&&n[13]===e[13]&&n[14]===e[14]&&n[15]===e[15]},a.equals=function(n,e){var t=n[0],a=n[1],i=n[2],r=n[3],c=n[4],s=n[5],l=n[6],u=n[7],v=n[8],d=n[9],f=n[10],m=n[11],x=n[12],h=n[13],p=n[14],y=n[15],g=e[0],b=e[1],w=e[2],M=e[3],E=e[4],z=e[5],S=e[6],D=e[7],I=e[8],R=e[9],P=e[10],T=e[11],F=e[12],H=e[13],_=e[14],C=e[15];return Math.abs(t-g)<=o.EPSILON*Math.max(1,Math.abs(t),Math.abs(g))&&Math.abs(a-b)<=o.EPSILON*Math.max(1,Math.abs(a),Math.abs(b))&&Math.abs(i-w)<=o.EPSILON*Math.max(1,Math.abs(i),Math.abs(w))&&Math.abs(r-M)<=o.EPSILON*Math.max(1,Math.abs(r),Math.abs(M))&&Math.abs(c-E)<=o.EPSILON*Math.max(1,Math.abs(c),Math.abs(E))&&Math.abs(s-z)<=o.EPSILON*Math.max(1,Math.abs(s),Math.abs(z))&&Math.abs(l-S)<=o.EPSILON*Math.max(1,Math.abs(l),Math.abs(S))&&Math.abs(u-D)<=o.EPSILON*Math.max(1,Math.abs(u),Math.abs(D))&&Math.abs(v-I)<=o.EPSILON*Math.max(1,Math.abs(v),Math.abs(I))&&Math.abs(d-R)<=o.EPSILON*Math.max(1,Math.abs(d),Math.abs(R))&&Math.abs(f-P)<=o.EPSILON*Math.max(1,Math.abs(f),Math.abs(P))&&Math.abs(m-T)<=o.EPSILON*Math.max(1,Math.abs(m),Math.abs(T))&&Math.abs(x-F)<=o.EPSILON*Math.max(1,Math.abs(x),Math.abs(F))&&Math.abs(h-H)<=o.EPSILON*Math.max(1,Math.abs(h),Math.abs(H))&&Math.abs(p-_)<=o.EPSILON*Math.max(1,Math.abs(p),Math.abs(_))&&Math.abs(y-C)<=o.EPSILON*Math.max(1,Math.abs(y),Math.abs(C))},e.exports=a},{"./common.js":2}],7:[function(n,e,t){var o=n("./common.js"),a=n("./mat3.js"),i=n("./vec3.js"),r=n("./vec4.js"),c={};c.create=function(){var n=new o.ARRAY_TYPE(4);return n[0]=0,n[1]=0,n[2]=0,n[3]=1,n},c.rotationTo=function(){var n=i.create(),e=i.fromValues(1,0,0),t=i.fromValues(0,1,0);return function(o,a,r){var s=i.dot(a,r);return s<-.999999?(i.cross(n,e,a),i.length(n)<1e-6&&i.cross(n,t,a),i.normalize(n,n),c.setAxisAngle(o,n,Math.PI),o):s>.999999?(o[0]=0,o[1]=0,o[2]=0,o[3]=1,o):(i.cross(n,a,r),o[0]=n[0],o[1]=n[1],o[2]=n[2],o[3]=1+s,c.normalize(o,o))}}(),c.setAxes=function(){var n=a.create();return function(e,t,o,a){return n[0]=o[0],n[3]=o[1],n[6]=o[2],n[1]=a[0],n[4]=a[1],n[7]=a[2],n[2]=-t[0],n[5]=-t[1],n[8]=-t[2],c.normalize(e,c.fromMat3(e,n))}}(),c.clone=r.clone,c.fromValues=r.fromValues,c.copy=r.copy,c.set=r.set,c.identity=function(n){return n[0]=0,n[1]=0,n[2]=0,n[3]=1,n},c.setAxisAngle=function(n,e,t){t=.5*t;var o=Math.sin(t);return n[0]=o*e[0],n[1]=o*e[1],n[2]=o*e[2],n[3]=Math.cos(t),n},c.getAxisAngle=function(n,e){var t=2*Math.acos(e[3]),o=Math.sin(t/2);return 0!=o?(n[0]=e[0]/o,n[1]=e[1]/o,n[2]=e[2]/o):(n[0]=1,n[1]=0,n[2]=0),t},c.add=r.add,c.multiply=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=e[3],c=t[0],s=t[1],l=t[2],u=t[3];return n[0]=o*u+r*c+a*l-i*s,n[1]=a*u+r*s+i*c-o*l,n[2]=i*u+r*l+o*s-a*c,n[3]=r*u-o*c-a*s-i*l,n},c.mul=c.multiply,c.scale=r.scale,c.rotateX=function(n,e,t){t*=.5;var o=e[0],a=e[1],i=e[2],r=e[3],c=Math.sin(t),s=Math.cos(t);return n[0]=o*s+r*c,n[1]=a*s+i*c,n[2]=i*s-a*c,n[3]=r*s-o*c,n},c.rotateY=function(n,e,t){t*=.5;var o=e[0],a=e[1],i=e[2],r=e[3],c=Math.sin(t),s=Math.cos(t);return n[0]=o*s-i*c,n[1]=a*s+r*c,n[2]=i*s+o*c,n[3]=r*s-a*c,n},c.rotateZ=function(n,e,t){t*=.5;var o=e[0],a=e[1],i=e[2],r=e[3],c=Math.sin(t),s=Math.cos(t);return n[0]=o*s+a*c,n[1]=a*s-o*c,n[2]=i*s+r*c,n[3]=r*s-i*c,n},c.calculateW=function(n,e){var t=e[0],o=e[1],a=e[2];return n[0]=t,n[1]=o,n[2]=a,n[3]=Math.sqrt(Math.abs(1-t*t-o*o-a*a)),n},c.dot=r.dot,c.lerp=r.lerp,c.slerp=function(n,e,t,o){var a,i,r,c,s,l=e[0],u=e[1],v=e[2],d=e[3],f=t[0],m=t[1],x=t[2],h=t[3];return i=l*f+u*m+v*x+d*h,i<0&&(i=-i,f=-f,m=-m,x=-x,h=-h),1-i>1e-6?(a=Math.acos(i),r=Math.sin(a),c=Math.sin((1-o)*a)/r,s=Math.sin(o*a)/r):(c=1-o,s=o),n[0]=c*l+s*f,n[1]=c*u+s*m,n[2]=c*v+s*x,n[3]=c*d+s*h,n},c.sqlerp=function(){var n=c.create(),e=c.create();return function(t,o,a,i,r,s){return c.slerp(n,o,r,s),c.slerp(e,a,i,s),c.slerp(t,n,e,2*s*(1-s)),t}}(),c.invert=function(n,e){var t=e[0],o=e[1],a=e[2],i=e[3],r=t*t+o*o+a*a+i*i,c=r?1/r:0;return n[0]=-t*c,n[1]=-o*c,n[2]=-a*c,n[3]=i*c,n},c.conjugate=function(n,e){return n[0]=-e[0],n[1]=-e[1],n[2]=-e[2],n[3]=e[3],n},c.length=r.length,c.len=c.length,c.squaredLength=r.squaredLength,c.sqrLen=c.squaredLength,c.normalize=r.normalize,c.fromMat3=function(n,e){var t,o=e[0]+e[4]+e[8];if(o>0)t=Math.sqrt(o+1),n[3]=.5*t,t=.5/t,n[0]=(e[5]-e[7])*t,n[1]=(e[6]-e[2])*t,n[2]=(e[1]-e[3])*t;else{var a=0;e[4]>e[0]&&(a=1),e[8]>e[3*a+a]&&(a=2);var i=(a+1)%3,r=(a+2)%3;t=Math.sqrt(e[3*a+a]-e[3*i+i]-e[3*r+r]+1),n[a]=.5*t,t=.5/t,n[3]=(e[3*i+r]-e[3*r+i])*t,n[i]=(e[3*i+a]+e[3*a+i])*t,n[r]=(e[3*r+a]+e[3*a+r])*t}return n},c.str=function(n){return"quat("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+")"},c.exactEquals=r.exactEquals,c.equals=r.equals,e.exports=c},{"./common.js":2,"./mat3.js":5,"./vec3.js":9,"./vec4.js":10}],8:[function(n,e,t){var o=n("./common.js"),a={};a.create=function(){var n=new o.ARRAY_TYPE(2);return n[0]=0,n[1]=0,n},a.clone=function(n){var e=new o.ARRAY_TYPE(2);return e[0]=n[0],e[1]=n[1],e},a.fromValues=function(n,e){var t=new o.ARRAY_TYPE(2);return t[0]=n,t[1]=e,t},a.copy=function(n,e){return n[0]=e[0],n[1]=e[1],n},a.set=function(n,e,t){return n[0]=e,n[1]=t,n},a.add=function(n,e,t){return n[0]=e[0]+t[0],n[1]=e[1]+t[1],n},a.subtract=function(n,e,t){return n[0]=e[0]-t[0],n[1]=e[1]-t[1],n},a.sub=a.subtract,a.multiply=function(n,e,t){return n[0]=e[0]*t[0],n[1]=e[1]*t[1],n},a.mul=a.multiply,a.divide=function(n,e,t){return n[0]=e[0]/t[0],n[1]=e[1]/t[1],n},a.div=a.divide,a.ceil=function(n,e){return n[0]=Math.ceil(e[0]),n[1]=Math.ceil(e[1]),n},a.floor=function(n,e){return n[0]=Math.floor(e[0]),n[1]=Math.floor(e[1]),n},a.min=function(n,e,t){return n[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n},a.max=function(n,e,t){return n[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n},a.round=function(n,e){return n[0]=Math.round(e[0]),n[1]=Math.round(e[1]),n},a.scale=function(n,e,t){return n[0]=e[0]*t,n[1]=e[1]*t,n},a.scaleAndAdd=function(n,e,t,o){return n[0]=e[0]+t[0]*o,n[1]=e[1]+t[1]*o,n},a.distance=function(n,e){var t=e[0]-n[0],o=e[1]-n[1];return Math.sqrt(t*t+o*o)},a.dist=a.distance,a.squaredDistance=function(n,e){var t=e[0]-n[0],o=e[1]-n[1];return t*t+o*o},a.sqrDist=a.squaredDistance,a.length=function(n){var e=n[0],t=n[1];return Math.sqrt(e*e+t*t)},a.len=a.length,a.squaredLength=function(n){var e=n[0],t=n[1];return e*e+t*t},a.sqrLen=a.squaredLength,a.negate=function(n,e){return n[0]=-e[0],n[1]=-e[1],n},a.inverse=function(n,e){return n[0]=1/e[0],n[1]=1/e[1],n},a.normalize=function(n,e){var t=e[0],o=e[1],a=t*t+o*o;return a>0&&(a=1/Math.sqrt(a),n[0]=e[0]*a,n[1]=e[1]*a),n},a.dot=function(n,e){return n[0]*e[0]+n[1]*e[1]},a.cross=function(n,e,t){var o=e[0]*t[1]-e[1]*t[0];return n[0]=n[1]=0,n[2]=o,n},a.lerp=function(n,e,t,o){var a=e[0],i=e[1];return n[0]=a+o*(t[0]-a),n[1]=i+o*(t[1]-i),n},a.random=function(n,e){e=e||1;var t=2*o.RANDOM()*Math.PI;return n[0]=Math.cos(t)*e,n[1]=Math.sin(t)*e,n},a.transformMat2=function(n,e,t){var o=e[0],a=e[1];return n[0]=t[0]*o+t[2]*a,n[1]=t[1]*o+t[3]*a,n},a.transformMat2d=function(n,e,t){var o=e[0],a=e[1];return n[0]=t[0]*o+t[2]*a+t[4],n[1]=t[1]*o+t[3]*a+t[5],n},a.transformMat3=function(n,e,t){var o=e[0],a=e[1];return n[0]=t[0]*o+t[3]*a+t[6],n[1]=t[1]*o+t[4]*a+t[7],n},a.transformMat4=function(n,e,t){var o=e[0],a=e[1];return n[0]=t[0]*o+t[4]*a+t[12],n[1]=t[1]*o+t[5]*a+t[13],n},a.forEach=function(){var n=a.create();return function(e,t,o,a,i,r){var c,s;for(t||(t=2),o||(o=0),s=a?Math.min(a*t+o,e.length):e.length,c=o;c<s;c+=t)n[0]=e[c],n[1]=e[c+1],i(n,n,r),e[c]=n[0],e[c+1]=n[1];return e}}(),a.str=function(n){return"vec2("+n[0]+", "+n[1]+")"},a.exactEquals=function(n,e){return n[0]===e[0]&&n[1]===e[1]},a.equals=function(n,e){var t=n[0],a=n[1],i=e[0],r=e[1];return Math.abs(t-i)<=o.EPSILON*Math.max(1,Math.abs(t),Math.abs(i))&&Math.abs(a-r)<=o.EPSILON*Math.max(1,Math.abs(a),Math.abs(r))},e.exports=a},{"./common.js":2}],9:[function(n,e,t){var o=n("./common.js"),a={};a.create=function(){var n=new o.ARRAY_TYPE(3);return n[0]=0,n[1]=0,n[2]=0,n},a.clone=function(n){var e=new o.ARRAY_TYPE(3);return e[0]=n[0],e[1]=n[1],e[2]=n[2],e},a.fromValues=function(n,e,t){var a=new o.ARRAY_TYPE(3);return a[0]=n,a[1]=e,a[2]=t,a},a.copy=function(n,e){return n[0]=e[0],n[1]=e[1],n[2]=e[2],n},a.set=function(n,e,t,o){return n[0]=e,n[1]=t,n[2]=o,n},a.add=function(n,e,t){return n[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n},a.subtract=function(n,e,t){return n[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n},a.sub=a.subtract,a.multiply=function(n,e,t){return n[0]=e[0]*t[0],n[1]=e[1]*t[1],n[2]=e[2]*t[2],n},a.mul=a.multiply,a.divide=function(n,e,t){return n[0]=e[0]/t[0],n[1]=e[1]/t[1],n[2]=e[2]/t[2],n},a.div=a.divide,a.ceil=function(n,e){return n[0]=Math.ceil(e[0]),n[1]=Math.ceil(e[1]),n[2]=Math.ceil(e[2]),n},a.floor=function(n,e){return n[0]=Math.floor(e[0]),n[1]=Math.floor(e[1]),n[2]=Math.floor(e[2]),n},a.min=function(n,e,t){return n[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n[2]=Math.min(e[2],t[2]),n},a.max=function(n,e,t){return n[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n[2]=Math.max(e[2],t[2]),n},a.round=function(n,e){return n[0]=Math.round(e[0]),n[1]=Math.round(e[1]),n[2]=Math.round(e[2]),n},a.scale=function(n,e,t){return n[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n},a.scaleAndAdd=function(n,e,t,o){return n[0]=e[0]+t[0]*o,n[1]=e[1]+t[1]*o,n[2]=e[2]+t[2]*o,n},a.distance=function(n,e){var t=e[0]-n[0],o=e[1]-n[1],a=e[2]-n[2];return Math.sqrt(t*t+o*o+a*a)},a.dist=a.distance,a.squaredDistance=function(n,e){var t=e[0]-n[0],o=e[1]-n[1],a=e[2]-n[2];return t*t+o*o+a*a},a.sqrDist=a.squaredDistance,a.length=function(n){var e=n[0],t=n[1],o=n[2];return Math.sqrt(e*e+t*t+o*o)},a.len=a.length,a.squaredLength=function(n){var e=n[0],t=n[1],o=n[2];return e*e+t*t+o*o},a.sqrLen=a.squaredLength,a.negate=function(n,e){return n[0]=-e[0],n[1]=-e[1],n[2]=-e[2],n},a.inverse=function(n,e){return n[0]=1/e[0],n[1]=1/e[1],n[2]=1/e[2],n},a.normalize=function(n,e){var t=e[0],o=e[1],a=e[2],i=t*t+o*o+a*a;return i>0&&(i=1/Math.sqrt(i),n[0]=e[0]*i,n[1]=e[1]*i,n[2]=e[2]*i),n},a.dot=function(n,e){return n[0]*e[0]+n[1]*e[1]+n[2]*e[2]},a.cross=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=t[0],c=t[1],s=t[2];return n[0]=a*s-i*c,n[1]=i*r-o*s,n[2]=o*c-a*r,n},a.lerp=function(n,e,t,o){var a=e[0],i=e[1],r=e[2];return n[0]=a+o*(t[0]-a),n[1]=i+o*(t[1]-i),n[2]=r+o*(t[2]-r),n},a.hermite=function(n,e,t,o,a,i){var r=i*i,c=r*(2*i-3)+1,s=r*(i-2)+i,l=r*(i-1),u=r*(3-2*i);return n[0]=e[0]*c+t[0]*s+o[0]*l+a[0]*u,n[1]=e[1]*c+t[1]*s+o[1]*l+a[1]*u,n[2]=e[2]*c+t[2]*s+o[2]*l+a[2]*u,n},a.bezier=function(n,e,t,o,a,i){var r=1-i,c=r*r,s=i*i,l=c*r,u=3*i*c,v=3*s*r,d=s*i;return n[0]=e[0]*l+t[0]*u+o[0]*v+a[0]*d,n[1]=e[1]*l+t[1]*u+o[1]*v+a[1]*d,n[2]=e[2]*l+t[2]*u+o[2]*v+a[2]*d,n},a.random=function(n,e){e=e||1;var t=2*o.RANDOM()*Math.PI,a=2*o.RANDOM()-1,i=Math.sqrt(1-a*a)*e;return n[0]=Math.cos(t)*i,n[1]=Math.sin(t)*i,n[2]=a*e,n},a.transformMat4=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=t[3]*o+t[7]*a+t[11]*i+t[15];return r=r||1,n[0]=(t[0]*o+t[4]*a+t[8]*i+t[12])/r,n[1]=(t[1]*o+t[5]*a+t[9]*i+t[13])/r,n[2]=(t[2]*o+t[6]*a+t[10]*i+t[14])/r,n},a.transformMat3=function(n,e,t){var o=e[0],a=e[1],i=e[2];return n[0]=o*t[0]+a*t[3]+i*t[6],n[1]=o*t[1]+a*t[4]+i*t[7],n[2]=o*t[2]+a*t[5]+i*t[8],n},a.transformQuat=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=t[0],c=t[1],s=t[2],l=t[3],u=l*o+c*i-s*a,v=l*a+s*o-r*i,d=l*i+r*a-c*o,f=-r*o-c*a-s*i;return n[0]=u*l+f*-r+v*-s-d*-c,n[1]=v*l+f*-c+d*-r-u*-s,n[2]=d*l+f*-s+u*-c-v*-r,n},a.rotateX=function(n,e,t,o){var a=[],i=[];return a[0]=e[0]-t[0],a[1]=e[1]-t[1],a[2]=e[2]-t[2],i[0]=a[0],i[1]=a[1]*Math.cos(o)-a[2]*Math.sin(o),i[2]=a[1]*Math.sin(o)+a[2]*Math.cos(o),n[0]=i[0]+t[0],n[1]=i[1]+t[1],n[2]=i[2]+t[2],n},a.rotateY=function(n,e,t,o){var a=[],i=[];return a[0]=e[0]-t[0],a[1]=e[1]-t[1],a[2]=e[2]-t[2],i[0]=a[2]*Math.sin(o)+a[0]*Math.cos(o),i[1]=a[1],i[2]=a[2]*Math.cos(o)-a[0]*Math.sin(o),n[0]=i[0]+t[0],n[1]=i[1]+t[1],n[2]=i[2]+t[2],n},a.rotateZ=function(n,e,t,o){var a=[],i=[];return a[0]=e[0]-t[0],a[1]=e[1]-t[1],a[2]=e[2]-t[2],i[0]=a[0]*Math.cos(o)-a[1]*Math.sin(o),i[1]=a[0]*Math.sin(o)+a[1]*Math.cos(o),i[2]=a[2],n[0]=i[0]+t[0],n[1]=i[1]+t[1],n[2]=i[2]+t[2],n},a.forEach=function(){var n=a.create();return function(e,t,o,a,i,r){var c,s;for(t||(t=3),o||(o=0),s=a?Math.min(a*t+o,e.length):e.length,c=o;c<s;c+=t)n[0]=e[c],n[1]=e[c+1],n[2]=e[c+2],i(n,n,r),e[c]=n[0],e[c+1]=n[1],e[c+2]=n[2];return e}}(),a.angle=function(n,e){var t=a.fromValues(n[0],n[1],n[2]),o=a.fromValues(e[0],e[1],e[2]);a.normalize(t,t),a.normalize(o,o);var i=a.dot(t,o);return i>1?0:Math.acos(i)},a.str=function(n){return"vec3("+n[0]+", "+n[1]+", "+n[2]+")"},a.exactEquals=function(n,e){return n[0]===e[0]&&n[1]===e[1]&&n[2]===e[2]},a.equals=function(n,e){var t=n[0],a=n[1],i=n[2],r=e[0],c=e[1],s=e[2];return Math.abs(t-r)<=o.EPSILON*Math.max(1,Math.abs(t),Math.abs(r))&&Math.abs(a-c)<=o.EPSILON*Math.max(1,Math.abs(a),Math.abs(c))&&Math.abs(i-s)<=o.EPSILON*Math.max(1,Math.abs(i),Math.abs(s))},e.exports=a},{"./common.js":2}],10:[function(n,e,t){var o=n("./common.js"),a={};a.create=function(){var n=new o.ARRAY_TYPE(4);return n[0]=0,n[1]=0,n[2]=0,n[3]=0,n},a.clone=function(n){var e=new o.ARRAY_TYPE(4);return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e},a.fromValues=function(n,e,t,a){var i=new o.ARRAY_TYPE(4);return i[0]=n,i[1]=e,i[2]=t,i[3]=a,i},a.copy=function(n,e){return n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n},a.set=function(n,e,t,o,a){return n[0]=e,n[1]=t,n[2]=o,n[3]=a,n},a.add=function(n,e,t){return n[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n[3]=e[3]+t[3],n},a.subtract=function(n,e,t){return n[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n[3]=e[3]-t[3],n},a.sub=a.subtract,a.multiply=function(n,e,t){return n[0]=e[0]*t[0],n[1]=e[1]*t[1],n[2]=e[2]*t[2],n[3]=e[3]*t[3],n},a.mul=a.multiply,a.divide=function(n,e,t){return n[0]=e[0]/t[0],n[1]=e[1]/t[1],n[2]=e[2]/t[2],n[3]=e[3]/t[3],n},a.div=a.divide,a.ceil=function(n,e){return n[0]=Math.ceil(e[0]),n[1]=Math.ceil(e[1]),n[2]=Math.ceil(e[2]),n[3]=Math.ceil(e[3]),n},a.floor=function(n,e){return n[0]=Math.floor(e[0]),n[1]=Math.floor(e[1]),n[2]=Math.floor(e[2]),n[3]=Math.floor(e[3]),n},a.min=function(n,e,t){return n[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n[2]=Math.min(e[2],t[2]),n[3]=Math.min(e[3],t[3]),n},a.max=function(n,e,t){return n[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n[2]=Math.max(e[2],t[2]),n[3]=Math.max(e[3],t[3]),n},a.round=function(n,e){return n[0]=Math.round(e[0]),n[1]=Math.round(e[1]),n[2]=Math.round(e[2]),n[3]=Math.round(e[3]),n},a.scale=function(n,e,t){return n[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n[3]=e[3]*t,n},a.scaleAndAdd=function(n,e,t,o){return n[0]=e[0]+t[0]*o,n[1]=e[1]+t[1]*o,n[2]=e[2]+t[2]*o,n[3]=e[3]+t[3]*o,n},a.distance=function(n,e){var t=e[0]-n[0],o=e[1]-n[1],a=e[2]-n[2],i=e[3]-n[3];return Math.sqrt(t*t+o*o+a*a+i*i)},a.dist=a.distance,a.squaredDistance=function(n,e){var t=e[0]-n[0],o=e[1]-n[1],a=e[2]-n[2],i=e[3]-n[3];return t*t+o*o+a*a+i*i},a.sqrDist=a.squaredDistance,a.length=function(n){var e=n[0],t=n[1],o=n[2],a=n[3];return Math.sqrt(e*e+t*t+o*o+a*a)},a.len=a.length,a.squaredLength=function(n){var e=n[0],t=n[1],o=n[2],a=n[3];return e*e+t*t+o*o+a*a},a.sqrLen=a.squaredLength,a.negate=function(n,e){return n[0]=-e[0],n[1]=-e[1],n[2]=-e[2],n[3]=-e[3],n},a.inverse=function(n,e){return n[0]=1/e[0],n[1]=1/e[1],n[2]=1/e[2],n[3]=1/e[3],n},a.normalize=function(n,e){var t=e[0],o=e[1],a=e[2],i=e[3],r=t*t+o*o+a*a+i*i;return r>0&&(r=1/Math.sqrt(r),n[0]=t*r,n[1]=o*r,n[2]=a*r,n[3]=i*r),n},a.dot=function(n,e){return n[0]*e[0]+n[1]*e[1]+n[2]*e[2]+n[3]*e[3]},a.lerp=function(n,e,t,o){var a=e[0],i=e[1],r=e[2],c=e[3];return n[0]=a+o*(t[0]-a),n[1]=i+o*(t[1]-i),n[2]=r+o*(t[2]-r),n[3]=c+o*(t[3]-c),n},a.random=function(n,e){return e=e||1,n[0]=o.RANDOM(),n[1]=o.RANDOM(),n[2]=o.RANDOM(),n[3]=o.RANDOM(),a.normalize(n,n),a.scale(n,n,e),n},a.transformMat4=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=e[3];return n[0]=t[0]*o+t[4]*a+t[8]*i+t[12]*r,n[1]=t[1]*o+t[5]*a+t[9]*i+t[13]*r,n[2]=t[2]*o+t[6]*a+t[10]*i+t[14]*r,n[3]=t[3]*o+t[7]*a+t[11]*i+t[15]*r,n},a.transformQuat=function(n,e,t){var o=e[0],a=e[1],i=e[2],r=t[0],c=t[1],s=t[2],l=t[3],u=l*o+c*i-s*a,v=l*a+s*o-r*i,d=l*i+r*a-c*o,f=-r*o-c*a-s*i;return n[0]=u*l+f*-r+v*-s-d*-c,n[1]=v*l+f*-c+d*-r-u*-s,n[2]=d*l+f*-s+u*-c-v*-r,n[3]=e[3],n},a.forEach=function(){var n=a.create();return function(e,t,o,a,i,r){var c,s;for(t||(t=4),o||(o=0),s=a?Math.min(a*t+o,e.length):e.length,c=o;c<s;c+=t)n[0]=e[c],n[1]=e[c+1],n[2]=e[c+2],n[3]=e[c+3],i(n,n,r),e[c]=n[0],e[c+1]=n[1],e[c+2]=n[2],e[c+3]=n[3];return e}}(),a.str=function(n){return"vec4("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+")"},a.exactEquals=function(n,e){return n[0]===e[0]&&n[1]===e[1]&&n[2]===e[2]&&n[3]===e[3]},a.equals=function(n,e){var t=n[0],a=n[1],i=n[2],r=n[3],c=e[0],s=e[1],l=e[2],u=e[3];return Math.abs(t-c)<=o.EPSILON*Math.max(1,Math.abs(t),Math.abs(c))&&Math.abs(a-s)<=o.EPSILON*Math.max(1,Math.abs(a),Math.abs(s))&&Math.abs(i-l)<=o.EPSILON*Math.max(1,Math.abs(i),Math.abs(l))&&Math.abs(r-u)<=o.EPSILON*Math.max(1,Math.abs(r),Math.abs(u))},e.exports=a},{"./common.js":2}],11:[function(n,e,t){e.exports={degrees:function(n){return n/Math.PI*180},radians:function(n){return n*Math.PI/180},clamp:function(n,e,t){return Math.min(Math.max(n,e),t)},mix:function(n,e,t){return n*(1-t)+e*t},polar:function(n,e,t){return[Math.cos(n)*Math.cos(e)*t,Math.sin(n)*t,Math.cos(n)*Math.sin(e)*t]}}},{}],12:[function(n,e,t){e.exports=function(n,e){var t;return function(o){clearTimeout(t),t=setTimeout(function(){n(o)},e)}}},{}],13:[function(n,e,t){e.exports=function(){const n=navigator.userAgent;return n.indexOf("iPhone")>=0||n.indexOf("iPad")>=0||n.indexOf("Android")>=0}},{}],14:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var e=n("../modules/old/util"),t=n("../modules/old/ForceCamera"),o=document.getElementById("canvas-webgl"),a=new THREE.WebGLRenderer({antialias:!0,canvas:o}),r=new THREE.Scene,l=new t(35,window.innerWidth/window.innerHeight,1,1e4),u=(new THREE.Clock,1e3),v=null,d=function(){for(var n=new THREE.BufferGeometry,t=[],o=[],a=[],i=[],r=0;r<Math.pow(u,2);r++)t.push(0,0,0),o.push(r%u*(1/(u-1)),Math.floor(r/u)*(1/(u-1))),a.push(e.getRandomInt(0,120)/360,.8,1),i.push(e.getRandomInt(1,100));var c=new Float32Array(t);n.addAttribute("position",new THREE.BufferAttribute(c,3));var s=new Float32Array(o);n.addAttribute("uv2",new THREE.BufferAttribute(s,2));var l=new Float32Array(a);n.addAttribute("color",new THREE.BufferAttribute(l,3));var v=new Float32Array(i);n.addAttribute("mass",new THREE.BufferAttribute(v,1));var d=new THREE.ShaderMaterial({uniforms:{time:{type:"f",value:0},velocity:{type:"t",value:new THREE.Texture},acceleration:{type:"t",value:new THREE.Texture}},vertexShader:"#define GLSLIFY 1\nattribute vec2 uv2;\nattribute vec3 color;\nattribute float mass;\n\nuniform sampler2D velocity;\nuniform sampler2D acceleration;\n\nvarying float vAcceleration;\nvarying vec3 vColor;\nvarying float vOpacity;\n\nvoid main(void) {\n  vec4 update_position = modelViewMatrix * texture2D(velocity, uv2);\n  vAcceleration = length(texture2D(acceleration, uv2).xyz) * mass;\n  vColor = color;\n  vOpacity = 0.6 * (300.0 / length(update_position.xyz));\n  gl_PointSize = 2.0 * (300.0 / length(update_position.xyz));\n  gl_Position = projectionMatrix * update_position;\n}\n",fragmentShader:"#define GLSLIFY 1\nvarying float vAcceleration;\nvarying vec3 vColor;\nvarying float vOpacity;\n\nuniform float time;\n\nvec3 hsv2rgb(vec3 c){\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main(void) {\n  vec3 n;\n  n.xy = gl_PointCoord * 2.0 - 1.0;\n  n.z = 1.0 - dot(n.xy, n.xy);\n  if (n.z < 0.0) discard;\n  gl_FragColor = vec4(hsv2rgb(vec3(vColor.x + time / 3600.0, vColor.y, vColor.z)), vOpacity);\n}\n",transparent:!0,depthWrite:!1,blending:THREE.AdditiveBlending});return new THREE.Points(n,d)},f=d(),m=function(){for(var n=[],t=0;t<Math.pow(u,2);t++){var o=e.getPolarCoord(e.getRadian(e.getRandomInt(0,360)),e.getRadian(e.getRandomInt(0,360)),e.getRandomInt(10,1e3));n.push(o.x,o.y/10,o.z)}return n},x=function(){v=new c["default"]("#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main(void) {\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n","#define GLSLIFY 1\nuniform vec2 resolution;\nuniform sampler2D velocity;\nuniform sampler2D acceleration;\nuniform vec2 anchor;\n\nvarying vec2 vUv;\n\n#define PRECISION 0.000001\n\n#ifndef PRECISION\n#define PRECISION 0.000001\n#endif\n\nvec3 drag(vec3 a, float value) {\n  return normalize(a * -1.0 + PRECISION) * length(a) * value;\n}\n\nvoid main(void) {\n  vec3 v = texture2D(velocity, vUv).xyz;\n  vec3 a = texture2D(acceleration, vUv).xyz;\n  vec3 a2 = a + normalize(vec3(\n    anchor.x * resolution.x / 6.0 + PRECISION,\n    0.0,\n    anchor.y * resolution.y / -2.0 + PRECISION\n  ) - v) / 2.0;\n  vec3 a3 = a2 + drag(a2, 0.003);\n  gl_FragColor = vec4(a3, 1.0);\n}\n","#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main(void) {\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n","#define GLSLIFY 1\nuniform float time;\nuniform sampler2D velocity;\nuniform sampler2D acceleration;\n\nvarying vec2 vUv;\n\nvoid main(void) {\n  gl_FragColor = vec4(texture2D(acceleration, vUv).xyz + texture2D(velocity, vUv).xyz, 1.0);\n}\n"),v.init(a,m()),v.accelerationMesh.material.uniforms.anchor={type:"v2",value:new THREE.Vector2},r.add(f),l.force.position.anchor.set(0,15,600),l.force.look.anchor.set(0,0,0)},h=function(){o.width=window.innerWidth,o.height=window.innerHeight,l.aspect=window.innerWidth/window.innerHeight,l.updateProjectionMatrix(),a.setSize(window.innerWidth,window.innerHeight)},p=function(){v.render(a),f.material.uniforms.time.value++,f.material.uniforms.velocity.value=v.getCurrentVelocity(),f.material.uniforms.acceleration.value=v.getCurrentAcceleration(),l.force.position.applyHook(0,.025),l.force.position.applyDrag(.2),l.force.position.updateVelocity(),l.updatePosition(),l.force.look.applyHook(0,.2),l.force.look.applyDrag(.4),l.force.look.updateVelocity(),l.updateLook(),a.render(r,l)},y=function w(){p(),requestAnimationFrame(w)},g=function(){var n=new THREE.Vector2,e=new THREE.Vector2,t=new THREE.Vector2,a=function(e,t,o){n.set(e,t),(0,i["default"])(n)},r=function(n,t,o){e.set(n,t),(0,i["default"])(e),v.accelerationMesh.material.uniforms.anchor.value.copy(e)},c=function(n,e,o){t.set(n,e)},l=function(){t.set(0,0),v.accelerationMesh.material.uniforms.anchor.value.set(0,0,0)};window.addEventListener("resize",s(function(){h()}),1e3),o.addEventListener("mousedown",function(n){n.preventDefault(),a(n.clientX,n.clientY,!1)}),o.addEventListener("mousemove",function(n){n.preventDefault(),r(n.clientX,n.clientY,!1)}),o.addEventListener("mouseup",function(n){n.preventDefault(),c(n.clientX,n.clientY,!1)}),o.addEventListener("touchstart",function(n){n.preventDefault(),a(n.touches[0].clientX,n.touches[0].clientY,!0)}),o.addEventListener("touchmove",function(n){n.preventDefault(),r(n.touches[0].clientX,n.touches[0].clientY,!0)}),o.addEventListener("touchend",function(n){n.preventDefault(),c(n.changedTouches[0].clientX,n.changedTouches[0].clientY,!0)}),window.addEventListener("mouseout",function(){event.preventDefault(),l()})},b=function(){a.setSize(window.innerWidth,window.innerHeight),a.setClearColor(1118481,1),l.position.set(1e3,1e3,1e3),l.lookAt(new THREE.Vector3),g(),x(),h(),y()};b()};var a=n("../modules/common/normalizeVector2"),i=o(a),r=n("../modules/common/PhysicsRenderer"),c=o(r),s=n("js-util/debounce")},{"../modules/common/PhysicsRenderer":36,"../modules/common/normalizeVector2":39,"../modules/old/ForceCamera":49,"../modules/old/util":54,"js-util/debounce":12}],15:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var n={x:0,y:0},e=document.getElementById("canvas-webgl"),t=new THREE.WebGLRenderer({antialias:!1,canvas:e}),o=new THREE.Scene,a=new THREE.OrthographicCamera((-1),1,1,(-1),1,1e4),r=new THREE.Clock,l=new THREE.TextureLoader,u=new THREE.Vector2,v=new THREE.Vector2,d=new THREE.Vector2,f=640,m=480,x=!1,h=7,p=[],y=function(){var e=Math.min(n.x/n.y/(f/m),1)*f,t=Math.min(n.y/n.x/(m/f),1)*m;a.left=e*-.5,a.right=.5*e,a.top=.5*t,a.bottom=t*-.5,a.updateProjectionMatrix()},g=function(){n.x=document.body.clientWidth,n.y=window.innerHeight,e.width=document.body.clientWidth,e.height=window.innerHeight,y(),t.setSize(document.body.clientWidth,window.innerHeight)},b=function(){for(var n=r.getDelta(),e=0;e<p.length;e++)p[e].render(t,n);t.render(o,a)},w=function R(){b(),requestAnimationFrame(R)},M=function(n){x=!0},E=function(n){},z=function(n){x=!1},S=function(){x=!1},D=function(){window.addEventListener("resize",s(g),1e3),e.addEventListener("mousedown",function(n){n.preventDefault(),u.set(n.clientX,n.clientY),(0,i["default"])(u),M(!1)}),e.addEventListener("mousemove",function(n){n.preventDefault(),v.set(n.clientX,n.clientY),(0,i["default"])(v),E(!1)}),e.addEventListener("mouseup",function(n){n.preventDefault(),d.set(n.clientX,n.clientY),(0,i["default"])(d),z(!1)}),e.addEventListener("touchstart",function(n){n.preventDefault(),u.set(n.touches[0].clientX,n.touches[0].clientY),(0,i["default"])(u),M(n.touches[0].clientX,n.touches[0].clientY,!0)}),e.addEventListener("touchmove",function(n){n.preventDefault(),v.set(n.touches[0].clientX,n.touches[0].clientY),(0,i["default"])(v),E(!0)}),e.addEventListener("touchend",function(n){n.preventDefault(),d.set(n.changedTouches[0].clientX,n.changedTouches[0].clientY),(0,i["default"])(d),z(!0)}),window.addEventListener("mouseout",function(){event.preventDefault(),d.set(0,0),S()})},I=function(){g(),D(),t.setClearColor(15658734,1),a.position.set(250,500,1e3),a.lookAt(new THREE.Vector3),l.load("/sketch-threejs/img/sketch/butterfly/tex.png",function(n){n.magFilter=THREE.NearestFilter,n.minFilter=THREE.NearestFilter;for(var e=0;e<h;e++)p[e]=new c["default"](e,n),p[e].obj.position.set(((e+1)%3-1)*e*50,0,1800/h*e),o.add(p[e].obj);w()})};I()};var a=n("../modules/common/normalizeVector2"),i=o(a),r=n("../modules/sketch/butterfly/Butterfly"),c=o(r),s=n("js-util/debounce")},{"../modules/common/normalizeVector2":39,"../modules/sketch/butterfly/Butterfly":55,"js-util/debounce":12}],16:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var e=n("../modules/old/util"),t=n("../modules/old/Force2"),o=n("../modules/old/Mover"),a=n("../modules/old/Points.js"),c=n("../modules/old/ForceHemisphereLight"),s=n("../modules/old/ForcePointLight"),l=n("../modules/old/ForceCamera"),u=document.getElementById("canvas-webgl"),v=new THREE.WebGLRenderer({antialias:!0,canvas:u}),d=new THREE.Scene,f=new l(35,window.innerWidth/window.innerHeight,1,1e4),m=(new THREE.Clock,1e4),x=[],h=2,p=new a,y=null,g=null,b=null,w=new Float32Array(3*m),M=new Float32Array(3*m),E=new Float32Array(m),z=new Float32Array(m),S=null,D=30,I=new t,R=140,P=45,T=null,F=Date.now(),H=Date.now(),_=Date.now(),C=Date.now(),L=0,j=!1,A=!1,k=!0,O=function(){for(var n=0;n<x.length;n++){var e=x[n];new THREE.Vector3;e.is_active&&(e.time++,e.applyDrag(.1),e.updateVelocity(),e.time>10&&(e.size-=2),e.size<=0&&(e.init(new THREE.Vector3(0,0,0)),
e.time=0,e.a=0,e.inactivate())),w[3*n+0]=e.velocity.x-p.velocity.x,w[3*n+1]=e.velocity.y-p.velocity.y,w[3*n+2]=e.velocity.z-p.velocity.z,M[3*n+0]=e.color.r,M[3*n+1]=e.color.g,M[3*n+2]=e.color.b,E[n]=e.a,z[n]=e.size}p.updatePoints()},Y=function(){var n=0,t=Date.now();if(t-F>10){for(var o=0;o<x.length;o++){var a=x[o];if(!a.is_active){var i=e.getRadian(e.getRandomInt(0,360)),r=e.getRadian(e.getRandomInt(0,360)),c=e.getRandomInt(1,30),s=e.getPolarCoord(i,r,c),l=e.getPolarCoord(i,r,c/20),u=e.getRandomInt(R-P,R+P)-L/1.5,v=e.getRandomInt(60,80);if(s.add(p.velocity),a.activate(),a.init(s),a.color.setHSL(u/360,v/100,.7),a.applyForce(l),a.a=1,a.size=25,n++,n>=h)break}}F=Date.now()}},V=function(){return S.rotation.x+=.03+L/1e3,S.rotation.y+=.01+L/1e3,S.rotation.z+=.01+L/1e3,p.rad1_base+=e.getRadian(.6),p.rad1=e.getRadian(45*Math.sin(p.rad1_base)+L/100),p.rad2+=e.getRadian(.8+L/100),p.rad3+=.01,e.getPolarCoord(p.rad1,p.rad2,350)},G=function(){var n=.8*D;g.position.copy(e.getPolarCoord(e.getRadian(0),e.getRadian(0),n).add(p.velocity)),b.position.copy(e.getPolarCoord(e.getRadian(180),e.getRadian(0),n).add(p.velocity))},U=function(){Date.now()-_>1e3-3*L&&(I.applyForce(new THREE.Vector2(.08+L/5e3,0)),_=Date.now(),A=!0,H=Date.now()),h=A&&Date.now()-H<500?6+Math.floor(L/40):1+Math.floor(L/40),I.applyHook(0,.1),I.applyDrag(.12),I.updateVelocity(),S.scale.set(1+I.velocity.x,1+I.velocity.x,1+I.velocity.x)},N=function(){var n=document.createElement("canvas"),e=n.getContext("2d"),t=null,o=null;return n.width=200,n.height=200,t=e.createRadialGradient(100,100,20,100,100,100),t.addColorStop(.9,"rgba(255, 255, 255, 1)"),t.addColorStop(1,"rgba(255, 255, 255, 0)"),e.fillStyle=t,e.arc(100,100,100,0,Math.PI/180,!0),e.fill(),o=new THREE.Texture(n),o.minFilter=THREE.NearestFilter,o.needsUpdate=!0,o},W=function(){for(var n=new THREE.OctahedronGeometry(D,2),e=new THREE.BufferGeometry,t=new THREE.MeshPhongMaterial({color:new THREE.Color("hsl("+R+", 100%, 100%)"),shading:THREE.FlatShading}),o=new Float32Array(3*n.vertices.length),a=0;a<n.vertices.length;a++)o[3*a]=n.vertices[a].x,o[3*a+1]=n.vertices[a].y,o[3*a+2]=n.vertices[a].z;for(var i=new Uint32Array(3*n.faces.length),r=0;r<n.faces.length;r++)i[3*r]=n.faces[r].a,i[3*r+1]=n.faces[r].b,i[3*r+2]=n.faces[r].c;return e.addAttribute("position",new THREE.BufferAttribute(o,3)),e.attributes.position.dynamic=!0,e.setIndex(new THREE.BufferAttribute(i,1)),e.index.dynamic=!0,new THREE.Mesh(e,t)},B=function(){var n=new THREE.OctahedronGeometry(250,4),e=new THREE.MeshPhongMaterial({color:2236962,shading:THREE.FlatShading});return new THREE.Mesh(n,e)},X=function(){j&&L<200?L+=1:L>0&&(L-=1)},q=function(){S=W(),d.add(S),T=B(),d.add(T);for(var n=0;n<m;n++){var t=new o,a=e.getRandomInt(R-P,R+P),i=e.getRandomInt(60,80);t.init(new THREE.Vector3(e.getRandomInt(-100,100),0,0)),t.color=new THREE.Color("hsl("+a+", "+i+"%, 70%)"),x.push(t),w[3*n+0]=t.velocity.x,w[3*n+1]=t.velocity.y,w[3*n+2]=t.velocity.z,M[3*n+0]=t.color.r,M[3*n+1]=t.color.g,M[3*n+2]=t.color.b,E[n]=t.a,z[n]=t.size}p.init({scene:d,vs:"#define GLSLIFY 1\nattribute vec3 customColor;\nattribute float vertexOpacity;\nattribute float size;\n\nvarying vec3 vColor;\nvarying float fOpacity;\n\nvoid main() {\n  vColor = customColor;\n  fOpacity = vertexOpacity;\n  vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n  gl_PointSize = size * (300.0 / length(mvPosition.xyz));\n  gl_Position = projectionMatrix * mvPosition;\n}\n",fs:"#define GLSLIFY 1\nuniform vec3 color;\nuniform sampler2D texture;\n\nvarying vec3 vColor;\nvarying float fOpacity;\n\nvoid main() {\n  gl_FragColor = vec4(color * vColor, fOpacity);\n  gl_FragColor = gl_FragColor * texture2D(texture, gl_PointCoord);\n}\n",positions:w,colors:M,opacities:E,sizes:z,texture:N(),blending:THREE.NormalBlending}),p.rad1=0,p.rad1_base=0,p.rad2=0,p.rad3=0,y=new c(new THREE.Color("hsl("+(R-P)+", 50%, 60%)").getHex(),new THREE.Color("hsl("+(R+P)+", 50%, 60%)").getHex(),1),d.add(y),g=new s("hsl("+(R-P)+", 60%, 50%)",1,500,1),d.add(g),b=new s("hsl("+(R-P)+", 60%, 50%)",1,500,1),d.add(b),f.anchor=new THREE.Vector3(1500,0,0)},K=function(){u.width=window.innerWidth,u.height=window.innerHeight,f.aspect=window.innerWidth/window.innerHeight,f.updateProjectionMatrix(),v.setSize(window.innerWidth,window.innerHeight)},Z=function(){X(),p.velocity=V(),k===!0&&(f.force.position.anchor.copy(p.velocity.clone().add(p.velocity.clone().sub(p.obj.position).normalize().multiplyScalar(-400))),f.force.position.anchor.y+=2*p.velocity.y,f.force.look.anchor.copy(p.velocity)),p.updatePoints(),S.position.copy(p.velocity),y.color.setHSL((R-P-L/1.5)/360,.5,.6),y.groundColor.setHSL((R+P-L/1.5)/360,.5,.6),g.position.copy(p.velocity),g.color.setHSL((R-P-L/1.5)/360,.5,.6),b.position.copy(p.velocity),b.color.setHSL((R+P-L/1.5)/360,.5,.6),Y(),O(),f.force.position.applyHook(0,.025),f.force.position.applyDrag(.2),f.force.position.updateVelocity(),f.updatePosition(),f.force.look.applyHook(0,.2),f.force.look.applyDrag(.4),f.force.look.updateVelocity(),f.updateLook(),G(),U(),v.render(d,f)},Q=function nn(){Z(),requestAnimationFrame(nn)},J=function(){var n=new THREE.Vector2,e=new THREE.Vector2,t=new THREE.Vector2,o=function(e,t,o){n.set(e,t),(0,i["default"])(n),j=!0,C=Date.now()},a=function(n,t,o){e.set(n,t),(0,i["default"])(e)},c=function(n,e,o){t.set(n,e),j=!1,Date.now()-C<100&&(k===!0?(f.force.position.anchor.set(1200,1200,0),f.force.look.anchor.set(0,0,0),k=!1):k=!0)},s=function(){t.set(0,0),j=!1,Date.now()-C<100&&(k===!0?(f.force.position.anchor.set(1200,1200,0),f.force.look.anchor.set(0,0,0),k=!1):k=!0)};window.addEventListener("resize",r(function(){K()}),1e3),u.addEventListener("mousedown",function(n){n.preventDefault(),o(n.clientX,n.clientY,!1)}),u.addEventListener("mousemove",function(n){n.preventDefault(),a(n.clientX,n.clientY,!1)}),u.addEventListener("mouseup",function(n){n.preventDefault(),c(n.clientX,n.clientY,!1)}),u.addEventListener("touchstart",function(n){n.preventDefault(),o(n.touches[0].clientX,n.touches[0].clientY,!0)}),u.addEventListener("touchmove",function(n){n.preventDefault(),a(n.touches[0].clientX,n.touches[0].clientY,!0)}),u.addEventListener("touchend",function(n){n.preventDefault(),c(n.changedTouches[0].clientX,n.changedTouches[0].clientY,!0)}),window.addEventListener("mouseout",function(){event.preventDefault(),s()})},$=function(){v.setSize(window.innerWidth,window.innerHeight),v.setClearColor(0,1),f.position.set(1e3,1e3,1e3),f.lookAt(new THREE.Vector3),J(),q(),K(),Q()};$()};var a=n("../modules/common/normalizeVector2"),i=o(a),r=n("js-util/debounce")},{"../modules/common/normalizeVector2":39,"../modules/old/Force2":47,"../modules/old/ForceCamera":49,"../modules/old/ForceHemisphereLight":50,"../modules/old/ForcePointLight":51,"../modules/old/Mover":52,"../modules/old/Points.js":53,"../modules/old/util":54,"js-util/debounce":12}],17:[function(n,e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){}},{}],18:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var n=(new i["default"],document.getElementById("canvas-webgl")),e=function(){n.addEventListener("contextmenu",function(n){n.preventDefault()}),n.addEventListener("selectstart",function(n){n.preventDefault()})};e()};var a=n("../modules/common/IndexScroller"),i=o(a)},{"../modules/common/IndexScroller":35}],19:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var e=(n("../modules/old/util"),n("../modules/old/Force2")),t=n("../modules/old/ForceCamera"),o=document.getElementById("canvas-webgl"),a=new THREE.WebGLRenderer({antialias:!0,canvas:o}),c=new THREE.Scene,s=new t(35,window.innerWidth/window.innerHeight,1,1e4),l=(new THREE.Clock,null),u=null,v=new THREE.HemisphereLight(16777215,6710886,1),d=new THREE.Scene,f=new t(45,window.innerWidth/window.innerHeight,1,1e4),m=new THREE.HemisphereLight(16777215,6710886,1),x=new e,h=1,p=new THREE.WebGLRenderTarget(window.innerWidth,window.innerHeight,{magFilter:THREE.NearestFilter,minFilter:THREE.NearestFilter,wrapS:THREE.ClampToEdgeWrapping,wrapT:THREE.ClampToEdgeWrapping}),y=null,g=function(){var n=new THREE.BufferGeometry;n.fromGeometry(new THREE.OctahedronGeometry(200,5));var e=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.lights,{time:{type:"f",value:0},radius:{type:"f",value:1},distort:{type:"f",value:.4}}]),vertexShader:"#define GLSLIFY 1\nuniform float time;\nuniform float radius;\nuniform float distort;\n\nvarying vec3 vColor;\nvarying vec3 vNormal;\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nvec3 hsv2rgb(vec3 c){\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main() {\n  float updateTime = time / 1000.0;\n  float noise = snoise(vec3(position / 400.1 + updateTime * 5.0));\n  vec4 mvPosition = modelViewMatrix * vec4(position * (noise * pow(distort, 2.0) + radius), 1.0);\n\n  vColor = hsv2rgb(vec3(noise * distort * 0.3 + updateTime, 0.2, 1.0));\n  vNormal = normal;\n\n  gl_Position = projectionMatrix * mvPosition;\n}\n",fragmentShader:"#define GLSLIFY 1\nvarying vec3 vColor;\nvarying vec3 vNormal;\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nvec3 hsv2rgb(vec3 c){\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nstruct HemisphereLight {\n  vec3 direction;\n  vec3 groundColor;\n  vec3 skyColor;\n};\nuniform HemisphereLight hemisphereLights[NUM_HEMI_LIGHTS];\n\nvoid main() {\n  vec3 light = vec3(0.0);\n  light += (dot(hemisphereLights[0].direction, vNormal) + 1.0) * hemisphereLights[0].skyColor * 0.5;\n  light += (-dot(hemisphereLights[0].direction, vNormal) + 1.0) * hemisphereLights[0].groundColor * 0.5;\n  gl_FragColor = vec4(vColor * light, 1.0);\n}\n",lights:!0});return new THREE.Mesh(n,e)},b=function(){var n=new THREE.SphereGeometry(1800),e=new THREE.MeshPhongMaterial({side:THREE.BackSide});return new THREE.Mesh(n,e)},w=function(){var n=new THREE.PlaneGeometry(2,2),e=new THREE.BufferGeometry;e.fromGeometry(n);var t=new THREE.ShaderMaterial({uniforms:{time:{type:"f",value:0},resolution:{type:"v2",value:new THREE.Vector2(window.innerWidth,window.innerHeight)},acceleration:{type:"f",value:0},texture:{type:"t",value:p}},vertexShader:"#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main(void) {\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n",fragmentShader:"#define GLSLIFY 1\nuniform float time;\nuniform vec2 resolution;\nuniform float acceleration;\nuniform sampler2D texture;\n\nconst float blur = 16.0;\n\nvarying vec2 vUv;\n\nfloat random2(vec2 c){\n    return fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvec2 diffUv(float v, float diff) {\n  return vUv + (vec2(v + snoise(vec2(gl_FragCoord.y + time) / 100.0), 0.0) * diff + vec2(v * 3.0, 0.0)) / resolution;\n}\n\nfloat randomNoise(vec2 p) {\n  return (random2(p - vec2(sin(time))) * 2.0 - 1.0) * max(length(acceleration), 0.08);\n}\n\nvoid main() {\n  float diff = 300.0 * length(acceleration);\n  vec2 uv_r = diffUv(0.0, diff);\n  vec2 uv_g = diffUv(1.0, diff);\n  vec2 uv_b = diffUv(-1.0, diff);\n  float r = texture2D(texture, uv_r).r + randomNoise(uv_r);\n  float g = texture2D(texture, uv_g).g + randomNoise(uv_g);\n  float b = texture2D(texture, uv_b).b + randomNoise(uv_b);\n  gl_FragColor = vec4(r, g, b, 1.0);\n}\n"});return new THREE.Mesh(e,t)},M=function(){document.body.className="bg-white",l=g(),d.add(l),u=b(),d.add(u),d.add(m),f.force.position.anchor.set(1800,1800,0),f.force.look.anchor.set(0,0,0),y=w(),c.add(y),c.add(v),s.force.position.anchor.set(1800,1800,0),s.force.look.anchor.set(0,0,0),x.anchor.set(1,0),x.anchor.set(1,0),x.velocity.set(1,0),x.k=.045,x.d=.16},E=function(){o.width=window.innerWidth,o.height=window.innerHeight,s.aspect=window.innerWidth/window.innerHeight,s.updateProjectionMatrix(),a.setSize(window.innerWidth,window.innerHeight),p.setSize(window.innerWidth,window.innerHeight),f.resize(window.innerWidth,window.innerHeight),y.material.uniforms.resolution.value.set(window.innerWidth,window.innerHeight)},z=function(){x.applyHook(0,x.k),x.applyDrag(x.d),x.updateVelocity(),l.material.uniforms.time.value+=h,l.material.uniforms.radius.value=x.velocity.x,l.material.uniforms.distort.value=x.velocity.x/2-.1,f.force.position.applyHook(0,.025),f.force.position.applyDrag(.2),f.force.position.updateVelocity(),f.updatePosition(),f.force.look.applyHook(0,.2),f.force.look.applyDrag(.4),f.force.look.updateVelocity(),f.updateLook(),y.material.uniforms.time.value+=h,y.material.uniforms.acceleration.value=x.acceleration.length(),s.force.position.applyHook(0,.025),s.force.position.applyDrag(.2),s.force.position.updateVelocity(),s.updatePosition(),s.force.look.applyHook(0,.2),s.force.look.applyDrag(.4),s.force.look.updateVelocity(),s.lookAt(s.force.look.velocity),a.render(d,f,p),a.render(c,s)},S=function R(){z(),requestAnimationFrame(R)},D=function(){var n=new THREE.Vector2,e=new THREE.Vector2,t=new THREE.Vector2,a=function(e,t,o){n.set(e,t),(0,i["default"])(n),x.anchor.x<3?(x.k+=.005,x.d-=.02,x.anchor.x+=.8,h+=.4):(x.k=.05,x.d=.16,x.anchor.x=1,h=1)},c=function(n,t,o){e.set(n,t),(0,i["default"])(e)},s=function(n,e,o){t.set(n,e)},l=function(){t.set(0,0)};window.addEventListener("resize",r(function(){E()}),1e3),o.addEventListener("mousedown",function(n){n.preventDefault(),a(n.clientX,n.clientY,!1)}),o.addEventListener("mousemove",function(n){n.preventDefault(),c(n.clientX,n.clientY,!1)}),o.addEventListener("mouseup",function(n){n.preventDefault(),s(n.clientX,n.clientY,!1)}),o.addEventListener("touchstart",function(n){n.preventDefault(),a(n.touches[0].clientX,n.touches[0].clientY,!0)}),o.addEventListener("touchmove",function(n){n.preventDefault(),c(n.touches[0].clientX,n.touches[0].clientY,!0)}),o.addEventListener("touchend",function(n){n.preventDefault(),s(n.changedTouches[0].clientX,n.changedTouches[0].clientY,!0)}),window.addEventListener("mouseout",function(){event.preventDefault(),l()})},I=function(){a.setSize(window.innerWidth,window.innerHeight),a.setClearColor(15658734,1),s.position.set(1e3,1e3,1e3),s.lookAt(new THREE.Vector3),D(),M(),E(),S()};I()};var a=n("../modules/common/normalizeVector2"),i=o(a),r=n("js-util/debounce")},{"../modules/common/normalizeVector2":39,"../modules/old/Force2":47,"../modules/old/ForceCamera":49,"../modules/old/util":54,"js-util/debounce":12}],20:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var e=n("../modules/old/util"),t=n("../modules/old/Mover"),o=n("../modules/old/Points"),a=n("../modules/old/ForcePointLight"),c=n("../modules/old/ForceCamera"),s=document.getElementById("canvas-webgl"),l=new THREE.WebGLRenderer({antialias:!0,canvas:s}),u=new THREE.Scene,v=new c(35,window.innerWidth/window.innerHeight,1,1e4),d=(new THREE.Clock,1e4),f=[],m=new o,x=new a(16737792,1,1800,1),h=new Float32Array(3*d),p=new Float32Array(3*d),y=new Float32Array(d),g=new Float32Array(d),b=new THREE.Vector3(0,.1,0),w=null,M=Date.now(),E=!1,z=function(){for(var n=0;n<f.length;n++){var e=f[n];e.is_active&&(e.time++,e.applyForce(b),e.applyDrag(.01),e.updateVelocity(),e.time>50&&(e.size-=.7,e.a-=.009),e.a<=0&&(e.init(new THREE.Vector3(0,0,0)),e.time=0,e.a=0,e.inactivate())),h[3*n+0]=e.velocity.x-m.velocity.x,h[3*n+1]=e.velocity.y-m.velocity.y,h[3*n+2]=e.velocity.z-m.velocity.z,y[n]=e.a,g[n]=e.size}m.updatePoints()},S=function(){var n=0,t=Date.now();if(t-M>10){for(var o=0;o<f.length;o++){var a=f[o];if(!a.is_active){var i=e.getRadian(Math.log(e.getRandomInt(0,256))/Math.log(256)*260),r=e.getRadian(e.getRandomInt(0,360)),c=12*(1-Math.log(e.getRandomInt(32,256))/Math.log(256)),s=new THREE.Vector3,l=e.getPolarCoord(i,r,c);if(s.add(m.velocity),a.activate(),a.init(s),a.applyForce(l),a.a=.2,a.size=Math.pow(12-c,2)*e.getRandomInt(1,24)/10,n++,n>=6)break}}M=Date.now()}},D=function(n){var e=n.y*window.innerHeight/3,t=n.x*window.innerWidth/-3;m.anchor.y=e,m.anchor.z=t,x.force.anchor.y=e,x.force.anchor.z=t},I=function(){var n=document.createElement("canvas"),e=n.getContext("2d"),t=null,o=null;return n.width=200,n.height=200,t=e.createRadialGradient(100,100,20,100,100,100),t.addColorStop(.2,"rgba(255, 255, 255, 1)"),t.addColorStop(.5,"rgba(255, 255, 255, 0.3)"),t.addColorStop(1,"rgba(255, 255, 255, 0)"),e.fillStyle=t,e.arc(100,100,100,0,Math.PI/180,!0),e.fill(),o=new THREE.Texture(n),o.minFilter=THREE.NearestFilter,o.needsUpdate=!0,o},R=function(){var n=new THREE.OctahedronGeometry(1500,3),e=new THREE.MeshPhongMaterial({color:16777215,shading:THREE.FlatShading,side:THREE.BackSide});return new THREE.Mesh(n,e)},P=function(){for(var n=0;n<d;n++){var o=new t,a=e.getRandomInt(0,45),i=e.getRandomInt(60,90),r=new THREE.Color("hsl("+a+", "+i+"%, 50%)");o.init(new THREE.Vector3(e.getRandomInt(-100,100),0,0)),f.push(o),h[3*n+0]=o.velocity.x,h[3*n+1]=o.velocity.y,h[3*n+2]=o.velocity.z,r.toArray(p,3*n),y[n]=o.a,g[n]=o.size}m.init({scene:u,vs:"#define GLSLIFY 1\nattribute vec3 customColor;\nattribute float vertexOpacity;\nattribute float size;\n\nvarying vec3 vColor;\nvarying float fOpacity;\n\nvoid main() {\n  vColor = customColor;\n  fOpacity = vertexOpacity;\n  vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n  gl_PointSize = size * (300.0 / length(mvPosition.xyz));\n  gl_Position = projectionMatrix * mvPosition;\n}\n",fs:"#define GLSLIFY 1\nuniform vec3 color;\nuniform sampler2D texture;\n\nvarying vec3 vColor;\nvarying float fOpacity;\n\nvoid main() {\n  gl_FragColor = vec4(color * vColor, fOpacity);\n  gl_FragColor = gl_FragColor * texture2D(texture, gl_PointCoord);\n}\n",positions:h,colors:p,opacities:y,sizes:g,texture:I(),blending:THREE.AdditiveBlending}),u.add(x),w=R(),u.add(w),v.setPolarCoord(e.getRadian(25),0,1e3),x.setPolarCoord(e.getRadian(25),0,200)},T=function(){s.width=window.innerWidth,s.height=window.innerHeight,v.aspect=window.innerWidth/window.innerHeight,v.updateProjectionMatrix(),l.setSize(window.innerWidth,window.innerHeight)},F=function(){m.applyHook(0,.08),m.applyDrag(.2),m.updateVelocity(),x.force.applyHook(0,.08),x.force.applyDrag(.2),x.force.updateVelocity(),x.updatePosition(),S(),z(),v.force.position.applyHook(0,.004),v.force.position.applyDrag(.1),v.force.position.updateVelocity(),v.updatePosition(),v.lookAtCenter(),l.render(u,v)},H=function L(){F(),requestAnimationFrame(L)},_=function(){var n=new THREE.Vector2,e=new THREE.Vector2,t=new THREE.Vector2,o=function(e,t,o){n.set(e,t),(0,i["default"])(n),D(n),E=!0},a=function(n,t,o){e.set(n,t),(0,i["default"])(e),E&&D(e)},c=function(n,e,o){t.set(n,e),E=!1,m.anchor.set(0,0,0),x.force.anchor.set(0,0,0)},l=function(){t.set(0,0),E=!1,m.anchor.set(0,0,0),x.force.anchor.set(0,0,0)};window.addEventListener("resize",r(function(){T()}),1e3),s.addEventListener("mousedown",function(n){n.preventDefault(),o(n.clientX,n.clientY,!1)}),s.addEventListener("mousemove",function(n){n.preventDefault(),a(n.clientX,n.clientY,!1)}),s.addEventListener("mouseup",function(n){n.preventDefault(),c(n.clientX,n.clientY,!1)}),s.addEventListener("touchstart",function(n){n.preventDefault(),o(n.touches[0].clientX,n.touches[0].clientY,!0)}),s.addEventListener("touchmove",function(n){n.preventDefault(),a(n.touches[0].clientX,n.touches[0].clientY,!0)}),s.addEventListener("touchend",function(n){n.preventDefault(),c(n.changedTouches[0].clientX,n.changedTouches[0].clientY,!0)}),window.addEventListener("mouseout",function(){event.preventDefault(),l()})},C=function(){l.setSize(window.innerWidth,window.innerHeight),l.setClearColor(0,1),v.position.set(1e3,1e3,1e3),v.lookAt(new THREE.Vector3),_(),P(),T(),H()};C()};var a=n("../modules/common/normalizeVector2"),i=o(a),r=n("js-util/debounce")},{"../modules/common/normalizeVector2":39,"../modules/old/ForceCamera":49,"../modules/old/ForcePointLight":51,"../modules/old/Mover":52,"../modules/old/Points":53,"../modules/old/util":54,"js-util/debounce":12}],21:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var e=n("../modules/old/util"),t=n("../modules/old/Force3"),o=n("../modules/old/ForceHemisphereLight"),a=n("../modules/old/ForceCamera"),c=document.getElementById("canvas-webgl"),s=new THREE.WebGLRenderer({antialias:!0,canvas:c}),l=new THREE.Scene,u=new a(35,window.innerWidth/window.innerHeight,1,1e4),v=(new THREE.Clock,[]),d=300,f=null,m=new THREE.Raycaster,x=-1,h=-1,p=!1,y=!1,g=!1,b=function(){this.rad=0,this.obj=null,this.is_entered=!1,t.call(this)},w=new THREE.PlaneGeometry(100,100);b.prototype=Object.create(t.prototype),b.prototype.constructor=b,b.prototype.init=function(n){var t=new THREE.MeshPhongMaterial({side:THREE.DoubleSide,map:(new THREE.TextureLoader).load("../img/sketch/gallery/image0"+e.getRandomInt(1,9)+".jpg")});this.obj=new THREE.Mesh(w,t),this.velocity=n.clone(),this.anchor=n.clone(),this.acceleration.set(0,0,0)};var M=function(n){for(var t=0;t<d;t++){var o=null,a=e.getRadian(t%45*8+180),i=1e3,r=Math.cos(a)*i,c=5*t-2.5*d,s=Math.sin(a)*i,l=new THREE.Vector3(r,c,s);o=new b,o.init(new THREE.Vector3),o.rad=a,o.obj.position.copy(l),n.add(o.obj),v.push(o)}},E=function(n){if(!g){var e=null;m.setFromCamera(n,u),e=m.intersectObjects(l.children),e.length>0&&0==y?(document.body.classList.add("is-pointed"),x=e[0].object.id):S()}},z=function(n,e){g=!0,n.force.position.anchor.set(780*Math.cos(e.rad),e.obj.position.y,780*Math.sin(e.rad)),n.force.look.anchor.copy(e.obj.position),S()},S=function(){document.body.classList.remove("is-pointed"),x=-1},D=function(){M(l),f=new o(16777215,16777215,1),l.add(f),u.force.position.anchor.set(0,0,0),u.rotate_rad1=e.getRadian(-35),u.rotate_rad1_base=u.rotate_rad1,u.rotate_rad2=e.getRadian(180),u.rotate_rad2_base=u.rotate_rad2},I=function(){c.width=window.innerWidth,c.height=window.innerHeight,u.aspect=window.innerWidth/window.innerHeight,u.updateProjectionMatrix(),s.setSize(window.innerWidth,window.innerHeight)},R=function(){for(var n=0;n<d;n++)v[n].applyHook(0,.14),v[n].applyDrag(.4),v[n].updateVelocity(),v[n].obj.lookAt({x:0,y:v[n].obj.position.y,z:0}),v[n].obj.id==x&&0==y&&0==g?1==p?h=n:v[n].obj.material.color.set(11184810):v[n].obj.material.color.set(16777215);u.force.position.applyHook(0,.08),u.force.position.applyDrag(.4),u.force.position.updateVelocity(),u.updatePosition(),g===!1&&u.force.look.anchor.copy(e.getPolarCoord(u.rotate_rad1,u.rotate_rad2,1e3)),u.force.look.applyHook(0,.08),u.force.look.applyDrag(.4),u.force.look.updateVelocity(),u.updateLook(),s.render(l,u)},P=function H(){R(),requestAnimationFrame(H)},T=function(){var n=new THREE.Vector2,t=new THREE.Vector2,o=new THREE.Vector2,a=function(e,t,o){n.set(e,t),(0,i["default"])(n),E(n),p=!0},s=function(o,a,r){t.set(o,a),(0,i["default"])(t),E(l,u,t),p&&n.clone().sub(t).length()>.01&&(p=!1,y=!0),1==y&&0==g&&(u.rotate_rad1=u.rotate_rad1_base+e.getRadian(50*(n.y-t.y)),u.rotate_rad2=u.rotate_rad2_base+e.getRadian(50*(n.x-t.x)),u.rotate_rad1<e.getRadian(-50)&&(u.rotate_rad1=e.getRadian(-50)),u.rotate_rad1>e.getRadian(50)&&(u.rotate_rad1=e.getRadian(50)))},d=function(n,e,t){o.set(n,e),S(),g?(u.force.position.anchor.set(0,0,0),h=-1,g=!1):p&&h>-1?z(u,v[h]):y&&(u.rotate_rad1_base=u.rotate_rad1,u.rotate_rad2_base=u.rotate_rad2),p=!1,y=!1},f=function(){o.set(0,0),S(),g?(u.force.position.anchor.set(0,0,0),h=-1,g=!1):p&&h>-1?z(u,v[h]):y&&(u.rotate_rad1_base=u.rotate_rad1,u.rotate_rad2_base=u.rotate_rad2),p=!1,y=!1};window.addEventListener("resize",r(function(){I()}),1e3),c.addEventListener("mousedown",function(n){n.preventDefault(),a(n.clientX,n.clientY,!1)}),c.addEventListener("mousemove",function(n){n.preventDefault(),s(n.clientX,n.clientY,!1)}),c.addEventListener("mouseup",function(n){n.preventDefault(),
d(n.clientX,n.clientY,!1)}),c.addEventListener("touchstart",function(n){n.preventDefault(),a(n.touches[0].clientX,n.touches[0].clientY,!0)}),c.addEventListener("touchmove",function(n){n.preventDefault(),s(n.touches[0].clientX,n.touches[0].clientY,!0)}),c.addEventListener("touchend",function(n){n.preventDefault(),d(n.changedTouches[0].clientX,n.changedTouches[0].clientY,!0)}),window.addEventListener("mouseout",function(){event.preventDefault(),f()})},F=function(){s.setSize(window.innerWidth,window.innerHeight),s.setClearColor(1118481,1),u.position.set(1e3,1e3,1e3),u.lookAt(new THREE.Vector3),T(),D(),I(),P()};F()};var a=n("../modules/common/normalizeVector2"),i=o(a),r=n("js-util/debounce")},{"../modules/common/normalizeVector2":39,"../modules/old/Force3":48,"../modules/old/ForceCamera":49,"../modules/old/ForceHemisphereLight":50,"../modules/old/util":54,"js-util/debounce":12}],22:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var n=document.getElementById("canvas-webgl"),e=new THREE.WebGLRenderer({antialias:!1,canvas:n}),t=new THREE.WebGLRenderTarget(document.body.clientWidth,window.innerHeight),o=new THREE.Scene,a=new THREE.Scene,r=new THREE.OrthographicCamera((-1),1,1,(-1),0,1),s=new THREE.PerspectiveCamera(45,document.body.clientWidth/window.innerHeight,1,1e4),v=new THREE.Clock,d=new THREE.Vector2,f=new THREE.Vector2,m=new THREE.Vector2,x=!1,h=new c["default"],p=new l["default"](t.texture),y=function(){n.width=document.body.clientWidth,n.height=window.innerHeight,s.aspect=document.body.clientWidth/window.innerHeight,s.updateProjectionMatrix(),h.resize(),p.resize(),t.setSize(document.body.clientWidth,window.innerHeight),e.setSize(document.body.clientWidth,window.innerHeight)},g=function(){var n=v.getDelta();e.render(a,s,t),p.render(n),e.render(o,r)},b=function D(){g(),requestAnimationFrame(D)},w=function(n){x=!0},M=function(n){},E=function(n){x=!1},z=function(){window.addEventListener("resize",u(function(){y()}),1e3),n.addEventListener("mousedown",function(n){n.preventDefault(),d.set(n.clientX,n.clientY),(0,i["default"])(d),w(!1)}),document.addEventListener("mousemove",function(n){n.preventDefault(),f.set(n.clientX,n.clientY),(0,i["default"])(f),M(!1)}),document.addEventListener("mouseup",function(n){n.preventDefault(),m.set(n.clientX,n.clientY),(0,i["default"])(m),E(!1)}),n.addEventListener("touchstart",function(n){n.preventDefault(),d.set(n.touches[0].clientX,n.touches[0].clientY),(0,i["default"])(d),w(n.touches[0].clientX,n.touches[0].clientY,!0)}),n.addEventListener("touchmove",function(n){n.preventDefault(),f.set(n.touches[0].clientX,n.touches[0].clientY),(0,i["default"])(f),M(!0)}),n.addEventListener("touchend",function(n){n.preventDefault(),m.set(n.changedTouches[0].clientX,n.changedTouches[0].clientY),(0,i["default"])(m),E(!0)})},S=function(){e.setSize(document.body.clientWidth,window.innerHeight),e.setClearColor(5592405,1),s.position.set(1e3,1e3,1e3),s.lookAt(new THREE.Vector3),h.init(function(){a.add(h.obj),o.add(p.obj)}),z(),y(),b()};S()};var a=n("../modules/common/normalizeVector2"),i=o(a),r=n("../modules/sketch/glitch/BackgroundImage.js"),c=o(r),s=n("../modules/sketch/glitch/PostEffect.js"),l=o(s),u=n("js-util/debounce")},{"../modules/common/normalizeVector2":39,"../modules/sketch/glitch/BackgroundImage.js":56,"../modules/sketch/glitch/PostEffect.js":57,"js-util/debounce":12}],23:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var e=n("../modules/old/util"),t=n("../modules/old/Force2"),o=n("../modules/old/ForceCamera"),a=document.getElementById("canvas-webgl"),c=new THREE.WebGLRenderer({antialias:!0,canvas:a}),s=new THREE.Scene,l=new o(35,window.innerWidth/window.innerHeight,1,1e4),u=(new THREE.Clock,null),v=null,d=null,f=null,m=new THREE.DirectionalLight(16777215,1),x=new THREE.Scene,h=new o(45,1,1,1e4),p=new THREE.WebGLRenderTarget(1200,1200),y=null,g=new THREE.Scene,b=new o(45,1,1,1e4),w=new THREE.HemisphereLight(268435455,13421772,1),M=new THREE.WebGLRenderTarget(1200,1200),E=null,z=null,S=new t,D=function(){for(var n=new THREE.BufferGeometry,t=[],o=[],a=0;a<32;a++){var i=0,r=0,c=0;t.push(i,r,c);var s=e.getRadian(e.getRandomInt(0,360)),l=e.getRadian(e.getRandomInt(0,360)),u=e.getRadian(e.getRandomInt(0,360));o.push(s,l,u)}var v=new Float32Array(t);n.addAttribute("position",new THREE.BufferAttribute(v,3));var d=new Float32Array(o);n.addAttribute("radian",new THREE.BufferAttribute(d,3));var f=new THREE.ShaderMaterial({uniforms:{time:{type:"f",value:0},resolution:{type:"v2",value:new THREE.Vector2(window.innerWidth,window.innerHeight)},size:{type:"f",value:28},force:{type:"v2",value:S.velocity}},vertexShader:"#define GLSLIFY 1\nattribute vec3 radian;\n\nuniform float time;\nuniform vec2 resolution;\nuniform float size;\nuniform vec2 force;\n\nvoid main() {\n  float radius = 300.0;\n  float radian_base = radians(time * 2.0);\n  vec3 update_positon = position + vec3(\n    cos(radian_base + radian.x) * cos(radian_base + radian.y) * radius,\n    cos(radian_base + radian.x) * sin(radian_base + radian.y) * radius,\n    sin(radian_base + radian.x) * radius\n  ) * force.x;\n  vec4 mvPosition = modelViewMatrix * vec4(update_positon, 1.0);\n\n  gl_PointSize = (size + force.y) * (abs(sin(radian_base + radian.z))) * (size / length(mvPosition.xyz)) * 480.0;\n  gl_Position = projectionMatrix * mvPosition;\n}\n",fragmentShader:"#define GLSLIFY 1\nuniform float size;\n\nvoid main() {\n  vec3 n;\n  n.xy = gl_PointCoord.xy * 2.0 - 1.0;\n  n.z = 1.0 - dot(n.xy, n.xy);\n  if (n.z < 0.0) discard;\n  gl_FragColor = vec4(1.0);\n}\n",transparent:!0,depthWrite:!1,blending:THREE.AdditiveBlending});return new THREE.Points(n,f)},I=function(){for(var n=new THREE.SphereBufferGeometry(2,4,4),t=n.attributes,o=new THREE.BufferGeometry,a=[],i=[],r=[],c=[],s=[],l=function(o){for(v=e.getRandomInt(300,1e3),d=e.getRadian(e.getRandomInt(0,3600)/10),f=e.getRandomInt(60,120)/100,m=0;m<t.position.array.length;m+=3)a.push(t.position.array[m+0],t.position.array[m+1],t.position.array[m+2]),i.push(v),r.push(d),c.push(f);n.index.array.map(function(n){s.push(n+o*t.position.array.length/3)})},u=0;u<16;u++){var v,d,f,m;l(u)}var x=new Float32Array(a);o.addAttribute("position",new THREE.BufferAttribute(x,3));var v=new Float32Array(i);o.addAttribute("radius",new THREE.BufferAttribute(v,1));var h=new Float32Array(r);o.addAttribute("radian",new THREE.BufferAttribute(h,1));var p=new Float32Array(c);o.addAttribute("scale",new THREE.BufferAttribute(p,1));var y=new Uint32Array(s);o.setIndex(new THREE.BufferAttribute(y,1));var g=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.lights,{time:{type:"f",value:0}}]),vertexShader:"#define GLSLIFY 1\nattribute float radius;\nattribute float radian;\nattribute float scale;\n\nuniform float time;\n\nvarying vec3 vPosition;\nvarying mat4 vInvertMatrix;\n\nfloat inverse(float m) {\n  return 1.0 / m;\n}\n\nmat2 inverse(mat2 m) {\n  return mat2(m[1][1],-m[0][1],\n             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nmat4 translateMatrix(vec3 v) {\n  return mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    v.x, v.y, v.z, 1.0\n  );\n}\n\nmat4 rotationMatrixX(float radian) {\n  return mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, cos(radian), -sin(radian), 0.0,\n    0.0, sin(radian), cos(radian), 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotationMatrixY(float radian) {\n  return mat4(\n    cos(radian), 0.0, sin(radian), 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    -sin(radian), 0.0, cos(radian), 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotationMatrixZ(float radian) {\n  return mat4(\n    cos(radian), -sin(radian), 0.0, 0.0,\n    sin(radian), cos(radian), 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotationMatrix(float radian_x, float radian_y, float radian_z) {\n  return rotationMatrixX(radian_x) * rotationMatrixY(radian_y) * rotationMatrixZ(radian_z);\n}\n\nmat4 scaleMatrix(vec3 scale) {\n  return mat4(\n    scale.x, 0.0, 0.0, 0.0,\n    0.0, scale.y, 0.0, 0.0,\n    0.0, 0.0, scale.z, 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nvec4 move(vec3 position) {\n  return translateMatrix(\n    vec3(\n      cos(radians(time * 0.5) + radian) * radius,\n      sin(radians(time * 0.5) + radian * 10.0) * radius * 0.3,\n      sin(radians(time * 0.5) + radian) * radius\n    )\n  ) * rotationMatrix(\n    radians(time * radian) + radian, radians(time) + radian, radians(time) + radian\n  ) * scaleMatrix(\n    vec3(20.0 * scale) + vec3(10.0) * snoise((position + sin(radian)))\n  ) * vec4(position, 1.0);\n}\n\nvoid main() {\n  vec4 update_position = move(position);\n  vPosition = position;\n  vInvertMatrix = inverse(rotationMatrix(\n    radians(time * radian) + radian, radians(time) + radian, radians(time) + radian\n  ));\n  gl_Position = projectionMatrix * modelViewMatrix * update_position;\n}\n",fragmentShader:"#define GLSLIFY 1\nstruct DirectionalLight {\n  vec3 color;\n  vec3 direction;\n};\nuniform DirectionalLight directionalLights[1];\n\nvarying vec3 vPosition;\nvarying mat4 vInvertMatrix;\n\nvoid main() {\n  vec3 normal = normalize(cross(dFdx(vPosition), dFdy(vPosition)));\n  vec3 inv_light = normalize(vInvertMatrix * vec4(directionalLights[0].direction, 1.0)).xyz;\n  float diff = (dot(normal, inv_light) + 1.0) / 2.0 * 0.25 + 0.75;\n  gl_FragColor = vec4(vec3(1.0) * diff, 1.0);\n}\n",shading:THREE.FlatShading,lights:!0});return new THREE.Mesh(o,g)},R=function(){var n=new THREE.SphereGeometry(1200,64,64),e=new THREE.ShaderMaterial({uniforms:{time:{type:"f",value:0}},vertexShader:"#define GLSLIFY 1\nuniform float time;\n\nvarying vec3 vColor;\n\nvoid main() {\n  vColor = vec3((position.y / 1000.0 + 1.0) * 0.12 + 0.88);\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n",fragmentShader:"#define GLSLIFY 1\nvarying vec3 vColor;\n\nvoid main() {\n  gl_FragColor = vec4(vColor, 1.0);\n}\n",side:THREE.BackSide});return new THREE.Mesh(n,e)},P=function(){var n=new THREE.SphereGeometry(1100,64,64),e=new THREE.MeshBasicMaterial({color:14540253,wireframe:!0});return new THREE.Mesh(n,e)},T=function(){for(var n=new THREE.BufferGeometry,t=[],o=0;o<2e3;o++)t.push(e.getRadian(e.getRandomInt(0,120)+120),e.getRadian(e.getRandomInt(0,3600)/10),e.getRandomInt(200,1e3));var a=new Float32Array(t);n.addAttribute("position",new THREE.BufferAttribute(a,3));var i=new THREE.ShaderMaterial({uniforms:{time:{type:"f",value:0}},vertexShader:"#define GLSLIFY 1\nuniform float time;\n\nvec3 getPolarCoord(float rad1, float rad2, float r) {\n  return vec3(\n    cos(rad1) * cos(rad2) * r,\n    sin(rad1) * r,\n    cos(rad1) * sin(rad2) * r\n  );\n}\n\nvoid main() {\n  vec3 update_position = getPolarCoord(\n    position.x,\n    position.y + radians(time / 2.0),\n    position.z + sin(radians(time * 2.0) + position.x + position.y) * position.z / 4.0\n  );\n  vec4 mv_position = modelViewMatrix * vec4(update_position, 1.0);\n\n  gl_PointSize = 2.0 * (1000.0 / length(mv_position.xyz));\n  gl_Position = projectionMatrix * mv_position;\n}\n",fragmentShader:"#define GLSLIFY 1\nvoid main() {\n  vec3 n;\n  n.xy = gl_PointCoord.xy * 2.0 - 1.0;\n  n.z = 1.0 - dot(n.xy, n.xy);\n  if (n.z < 0.0) discard;\n  gl_FragColor = vec4(1.0);\n}\n"});return new THREE.Points(n,i)},F=function(){var n=new THREE.SphereGeometry(1e3,128,128),e=new THREE.BufferGeometry;e.fromGeometry(n);var t=new THREE.ShaderMaterial({uniforms:{time:{type:"f",value:0}},vertexShader:"#define GLSLIFY 1\nuniform float time;\n\nvarying vec3 vColor;\n\nvec3 hsv2rgb(vec3 c){\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nvoid main() {\n  float noise = snoise(\n    vec3(position.x + time * 10.0, position.y + cos(time / 20.0) * 100.0, position.z + time * 10.0) / 800.0\n  );\n  vColor = hsv2rgb(vec3(noise * 0.2 + 0.75, 0.4, noise * 0.3 + 0.5));\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n",fragmentShader:"#define GLSLIFY 1\nvarying vec3 vColor;\n\nvoid main() {\n  gl_FragColor = vec4(vColor, 1.0);\n}\n",side:THREE.BackSide});return new THREE.Mesh(e,t)},H=function(){var n=new THREE.PlaneGeometry(1e3,1e3),e=new THREE.BufferGeometry;e.fromGeometry(n);var t=new THREE.ShaderMaterial({uniforms:{time:{type:"f",value:0},resolution:{type:"v2",value:new THREE.Vector2(window.innerWidth,window.innerHeight)},texture:{type:"t",value:p.texture},texture2:{type:"t",value:M.texture}},vertexShader:"#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main(void) {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n",fragmentShader:"#define GLSLIFY 1\nuniform float time;\nuniform vec2 resolution;\nuniform sampler2D texture;\nuniform sampler2D texture2;\n\nconst float blur = 20.0;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 color = vec4(0.0);\n  for (float x = 0.0; x < blur; x++){\n    for (float y = 0.0; y < blur; y++){\n      color += texture2D(texture, vUv - (vec2(x, y) - vec2(blur / 2.0)) / resolution);\n    }\n  }\n  vec4 color2 = color / pow(blur, 2.0);\n  vec4 color3 = texture2D(texture2, vUv);\n  gl_FragColor = vec4(color3.rgb, floor(length(color2.rgb)));\n}\n",transparent:!0});return new THREE.Mesh(e,t)},_=function(){S.anchor.set(1,0),b.force.position.anchor.set(1e3,300,0),b.force.look.anchor.set(0,0,0),E=F(),z=T(),g.add(E),g.add(z),g.add(w),u=D(),x.add(u),h.position.set(0,0,3e3),h.lookAt(0,0,0),y=H(),s.add(y),v=R(),s.add(v),d=P(),s.add(d),f=I(),s.add(f),m.position.set(0,1,0),s.add(m),l.force.position.anchor.set(1e3,300,0),l.force.look.anchor.set(0,0,0)},C=function(){a.width=window.innerWidth,a.height=window.innerHeight,l.aspect=window.innerWidth/window.innerHeight,l.updateProjectionMatrix(),c.setSize(window.innerWidth,window.innerHeight),u.material.uniforms.resolution.value.set(window.innerWidth,window.innerHeight),y.material.uniforms.resolution.value.set(window.innerWidth,window.innerHeight)},L=function(){u.material.uniforms.time.value++,y.lookAt(l.position),y.material.uniforms.time.value++,E.material.uniforms.time.value++,z.material.uniforms.time.value++,d.rotation.y=u.material.uniforms.time.value/1e3,f.material.uniforms.time.value++,S.applyHook(0,.12),S.applyDrag(.18),S.updateVelocity(),l.force.position.applyHook(0,.025),l.force.position.applyDrag(.2),l.force.position.updateVelocity(),l.updatePosition(),l.force.look.anchor.y=100*Math.sin(u.material.uniforms.time.value/100),l.force.look.applyHook(0,.2),l.force.look.applyDrag(.4),l.updateLook(),b.force.position.applyHook(0,.1),b.force.position.applyDrag(.2),b.force.position.updateVelocity(),b.updatePosition(),b.force.look.applyHook(0,.2),b.force.look.applyDrag(.4),b.force.look.updateVelocity(),b.updateLook(),c.render(g,b,M),c.render(x,h,p),c.render(s,l)},j=function O(){L(),requestAnimationFrame(O)},A=function(){var n=new THREE.Vector2,e=new THREE.Vector2,t=new THREE.Vector2,o=function(e,t,o){n.set(e,t),(0,i["default"])(n),S.anchor.set(2,30)},c=function(n,t,o){e.set(n,t),(0,i["default"])(e)},s=function(n,e,o){t.set(n,e),S.anchor.set(1,0)},l=function(){t.set(0,0),S.anchor.set(1,0)};window.addEventListener("resize",r(function(){C()}),1e3),a.addEventListener("mousedown",function(n){n.preventDefault(),o(n.clientX,n.clientY,!1)}),a.addEventListener("mousemove",function(n){n.preventDefault(),c(n.clientX,n.clientY,!1)}),a.addEventListener("mouseup",function(n){n.preventDefault(),s(n.clientX,n.clientY,!1)}),a.addEventListener("touchstart",function(n){n.preventDefault(),o(n.touches[0].clientX,n.touches[0].clientY,!0)}),a.addEventListener("touchmove",function(n){n.preventDefault(),c(n.touches[0].clientX,n.touches[0].clientY,!0)}),a.addEventListener("touchend",function(n){n.preventDefault(),s(n.changedTouches[0].clientX,n.changedTouches[0].clientY,!0)}),window.addEventListener("mouseout",function(){event.preventDefault(),l()})},k=function(){c.setSize(window.innerWidth,window.innerHeight),c.setClearColor(15658734,0),l.position.set(1e3,1e3,1e3),l.lookAt(new THREE.Vector3),A(),_(),C(),j()};k()};var a=n("../modules/common/normalizeVector2"),i=o(a),r=n("js-util/debounce")},{"../modules/common/normalizeVector2":39,"../modules/old/Force2":47,"../modules/old/ForceCamera":49,"../modules/old/util":54,"js-util/debounce":12}],24:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var e=n("../modules/old/util"),t=n("../modules/old/Mover"),o=n("../modules/old/Points.js"),a=n("../modules/old/ForceCamera"),c=document.getElementById("canvas-webgl"),s=new THREE.WebGLRenderer({antialias:!0,canvas:c}),l=new THREE.Scene,u=new a(35,window.innerWidth/window.innerHeight,1,1e4),v=(new THREE.Clock,2e4),d=[],f=new o,m=new Float32Array(3*v),x=new Float32Array(3*v),h=new Float32Array(v),p=new Float32Array(v),y=new THREE.Vector3(1.5,0,0),g=Date.now(),b=!1,w=function(){for(var n=0;n<d.length;n++){var e=d[n];e.is_active&&(e.time++,e.applyForce(y),e.applyDrag(.1),e.updateVelocity(),e.a<.8&&(e.a+=.02),e.velocity.x>1e3&&(e.init(new THREE.Vector3(0,0,0)),e.time=0,e.a=0,e.inactivate())),m[3*n+0]=e.velocity.x,m[3*n+1]=e.velocity.y,m[3*n+2]=e.velocity.z,h[n]=e.a,p[n]=e.size}f.updatePoints()},M=function(){var n=0,t=Date.now();if(t-g>16*y.x){for(var o=0;o<d.length;o++){var a=d[o];if(!a.is_active){var i=e.getRadian(3*e.getRandomInt(0,120)),r=Math.log(e.getRandomInt(2,128))/Math.log(128)*160+60,c=Math.sin(i)*r,s=Math.cos(i)*r,l=new THREE.Vector3((-1e3),c,s);if(l.add(f.velocity),a.activate(),a.init(l),a.a=0,a.size=e.getRandomInt(5,60),n++,n>=Math.pow(3*y.x,.4*y.x))break}}g=Date.now()}},E=function(){var n=document.createElement("canvas"),e=n.getContext("2d"),t=null,o=null;return n.width=256,n.height=256,t=e.createRadialGradient(128,128,20,128,128,128),t.addColorStop(.2,"rgba(255, 255, 255, 1)"),t.addColorStop(.5,"rgba(255, 255, 255, 0.3)"),t.addColorStop(1,"rgba(255, 255, 255, 0)"),e.fillStyle=t,e.arc(128,128,128,0,Math.PI/180,!0),e.fill(),o=new THREE.Texture(n),o.needsUpdate=!0,o},z=function(){b?y.x<6&&(y.x+=.02):y.x>1.5&&(y.x-=.1)},S=function(){for(var n=0;n<v;n++){var o=new t,a=e.getRandomInt(60,210),i=e.getRandomInt(30,90),r=new THREE.Color("hsl("+a+", "+i+"%, 50%)");o.init(new THREE.Vector3(e.getRandomInt(-100,100),0,0)),d.push(o),m[3*n+0]=o.velocity.x,m[3*n+1]=o.velocity.y,m[3*n+2]=o.velocity.z,r.toArray(x,3*n),h[n]=o.a,p[n]=o.size}f.init({scene:l,vs:"#define GLSLIFY 1\nattribute vec3 customColor;\nattribute float vertexOpacity;\nattribute float size;\n\nvarying vec3 vColor;\nvarying float fOpacity;\n\nvoid main() {\n  vColor = customColor;\n  fOpacity = vertexOpacity;\n  vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n  gl_PointSize = size * (300.0 / length(mvPosition.xyz));\n  gl_Position = projectionMatrix * mvPosition;\n}\n",fs:"#define GLSLIFY 1\nuniform vec3 color;\nuniform sampler2D texture;\n\nvarying vec3 vColor;\nvarying float fOpacity;\n\nvoid main() {\n  gl_FragColor = vec4(color * vColor, fOpacity);\n  gl_FragColor = gl_FragColor * texture2D(texture, gl_PointCoord);\n}\n",positions:m,colors:x,opacities:h,sizes:p,texture:E(),blending:THREE.AdditiveBlending}),u.force.position.anchor.set(800,0,0)},D=function(){c.width=window.innerWidth,c.height=window.innerHeight,u.aspect=window.innerWidth/window.innerHeight,u.updateProjectionMatrix(),s.setSize(window.innerWidth,window.innerHeight)},I=function(){z(),M(),w(),u.force.position.applyHook(0,.008),u.force.position.applyDrag(.1),u.force.position.updateVelocity(),u.updatePosition(),u.lookAtCenter(),s.render(l,u)},R=function F(){I(),requestAnimationFrame(F)},P=function(){var n=new THREE.Vector2,e=new THREE.Vector2,t=new THREE.Vector2,o=function(e,t,o){n.set(e,t),(0,i["default"])(n),b=!0},a=function(n,t,o){e.set(n,t),(0,i["default"])(e),u.force.position.anchor.z=120*e.x,u.force.position.anchor.y=e.y*-120},s=function(n,e,o){t.set(n,e),u.force.position.anchor.z=0,u.force.position.anchor.y=0,b=!1},l=function(){t.set(0,0),u.force.position.anchor.z=0,u.force.position.anchor.y=0};window.addEventListener("resize",r(function(){D()}),1e3),c.addEventListener("mousedown",function(n){n.preventDefault(),o(n.clientX,n.clientY,!1)}),c.addEventListener("mousemove",function(n){n.preventDefault(),a(n.clientX,n.clientY,!1)}),c.addEventListener("mouseup",function(n){n.preventDefault(),s(n.clientX,n.clientY,!1)}),c.addEventListener("touchstart",function(n){n.preventDefault(),o(n.touches[0].clientX,n.touches[0].clientY,!0)}),c.addEventListener("touchmove",function(n){n.preventDefault(),a(n.touches[0].clientX,n.touches[0].clientY,!0)}),c.addEventListener("touchend",function(n){n.preventDefault(),s(n.changedTouches[0].clientX,n.changedTouches[0].clientY,!0)}),window.addEventListener("mouseout",function(){event.preventDefault(),l()})},T=function(){s.setSize(window.innerWidth,window.innerHeight),s.setClearColor(0,1),u.position.set(1e3,1e3,1e3),u.lookAt(new THREE.Vector3),P(),S(),D(),R()};T()};var a=n("../modules/common/normalizeVector2"),i=o(a),r=n("js-util/debounce")},{"../modules/common/normalizeVector2":39,"../modules/old/ForceCamera":49,"../modules/old/Mover":52,"../modules/old/Points.js":53,"../modules/old/util":54,"js-util/debounce":12}],25:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var e=n("../modules/old/util"),t=n("../modules/old/Mover"),o=n("../modules/old/Points.js"),a=n("../modules/old/ForceCamera"),c=document.getElementById("canvas-webgl"),s=new THREE.WebGLRenderer({antialias:!0,canvas:c}),l=new THREE.Scene,u=new a(35,window.innerWidth/window.innerHeight,1,1e4),v=(new THREE.Clock,new Image),d=[],f=[],m=null,x=null,h=null,p=null,y=400,g=new o,b=!1,w=function(n){v.src="../img/sketch/image_data/elephant.png",v.onload=function(){n()}},M=function(){var n=document.createElement("canvas"),e=n.getContext("2d");n.width=y,n.height=y,e.drawImage(v,0,0);for(var t=e.getImageData(0,0,y,y),o=0;o<y;o++)if(!(o%3>0))for(var a=0;a<y;a++)a%3>0||t.data[4*(a+o*y)]>0&&d.push(0,(o-y/2)*-1,(a-y/2)*-1)},E=function(n){m=new Float32Array(d),x=new Float32Array(d.length),h=new Float32Array(d.length/3),p=new Float32Array(d.length/3);for(var e=0;e<d.length/3;e++){var o=new t,a=new THREE.Color("hsl("+(d[3*e+2]+d[3*e+1]+y)/5+", 60%, 80%)");o.init(new THREE.Vector3(d[3*e],d[3*e+1],d[3*e+2])),o.is_activate=!0,f.push(o),a.toArray(x,3*e),h[e]=1,p[e]=12}g.init({scene:n,vs:"#define GLSLIFY 1\nattribute vec3 customColor;\nattribute float vertexOpacity;\nattribute float size;\n\nvarying vec3 vColor;\nvarying float fOpacity;\n\nvoid main() {\n  vColor = customColor;\n  fOpacity = vertexOpacity;\n  vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n  gl_PointSize = size * (300.0 / length(mvPosition.xyz));\n  gl_Position = projectionMatrix * mvPosition;\n}\n",fs:"#define GLSLIFY 1\nuniform vec3 color;\nuniform sampler2D texture;\n\nvarying vec3 vColor;\nvarying float fOpacity;\n\nvoid main() {\n  gl_FragColor = vec4(color * vColor, fOpacity);\n  gl_FragColor = gl_FragColor * texture2D(texture, gl_PointCoord);\n}\n",positions:m,colors:x,opacities:h,sizes:p,texture:D(),blending:THREE.NormalBlending}),b=!0},z=function(){for(var n=0;n<f.length;n++){var t=f[n],o=e.getRadian(e.getRandomInt(0,360)),a=e.getRadian(e.getRandomInt(0,360)),i=e.getRandomInt(40,80);t.is_activate=!1,t.applyForce(e.getPolarCoord(o,a,i))}},S=function(){for(var n=0;n<f.length;n++){var t=f[n];t.time++,t.acceleration.length()<1&&(t.is_activate=!0),t.is_activate?(t.applyHook(0,.18),t.applyDrag(.26)):t.applyDrag(.035),t.updateVelocity(),t.velocity.sub(g.velocity),m[3*n+0]=t.velocity.x-g.velocity.x,m[3*n+1]=t.velocity.y-g.velocity.x,m[3*n+2]=t.velocity.z-g.velocity.x,t.size=Math.log(e.getRandomInt(1,128))/Math.log(128)*Math.sqrt(document.body.clientWidth),
p[n]=t.size}g.updatePoints()},D=function(){var n=document.createElement("canvas"),e=n.getContext("2d"),t=null,o=null;return n.width=200,n.height=200,t=e.createRadialGradient(100,100,20,100,100,100),t.addColorStop(.2,"rgba(255, 255, 255, 1)"),t.addColorStop(.5,"rgba(255, 255, 255, 0.3)"),t.addColorStop(1,"rgba(255, 255, 255, 0)"),e.fillStyle=t,e.arc(100,100,100,0,Math.PI/180,!0),e.fill(),o=new THREE.Texture(n),o.minFilter=THREE.NearestFilter,o.needsUpdate=!0,o},I=function(){w(function(){M(),E(l)}),u.setPolarCoord(0,0,1400)},R=function(){c.width=window.innerWidth,c.height=window.innerHeight,u.aspect=window.innerWidth/window.innerHeight,u.updateProjectionMatrix(),s.setSize(window.innerWidth,window.innerHeight)},P=function(){b&&(S(),g.updatePoints()),u.force.position.applyHook(0,.025),u.force.position.applyDrag(.2),u.force.position.updateVelocity(),u.updatePosition(),u.lookAtCenter(),s.render(l,u)},T=function _(){P(),requestAnimationFrame(_)},F=function(){var n=new THREE.Vector2,e=new THREE.Vector2,t=new THREE.Vector2,o=function(e,t,o){n.set(e,t),(0,i["default"])(n),z()},a=function(n,t,o){e.set(n,t),(0,i["default"])(e),u.force.position.anchor.z=1e3*e.x,u.force.position.anchor.y=e.y*-1e3},s=function(n,e,o){t.set(n,e),u.force.position.anchor.z=0,u.force.position.anchor.y=0},l=function(){t.set(0,0),u.force.position.anchor.z=0,u.force.position.anchor.y=0};window.addEventListener("resize",r(function(){R()}),1e3),c.addEventListener("mousedown",function(n){n.preventDefault(),o(n.clientX,n.clientY,!1)}),c.addEventListener("mousemove",function(n){n.preventDefault(),a(n.clientX,n.clientY,!1)}),c.addEventListener("mouseup",function(n){n.preventDefault(),s(n.clientX,n.clientY,!1)}),c.addEventListener("touchstart",function(n){n.preventDefault(),o(n.touches[0].clientX,n.touches[0].clientY,!0)}),c.addEventListener("touchmove",function(n){n.preventDefault(),a(n.touches[0].clientX,n.touches[0].clientY,!0)}),c.addEventListener("touchend",function(n){n.preventDefault(),s(n.changedTouches[0].clientX,n.changedTouches[0].clientY,!0)}),window.addEventListener("mouseout",function(){event.preventDefault(),l()})},H=function(){s.setSize(window.innerWidth,window.innerHeight),s.setClearColor(1118481,1),u.position.set(1e3,1e3,1e3),u.lookAt(new THREE.Vector3),F(),I(),R(),T()};H()};var a=n("../modules/common/normalizeVector2"),i=o(a),r=n("js-util/debounce")},{"../modules/common/normalizeVector2":39,"../modules/old/ForceCamera":49,"../modules/old/Mover":52,"../modules/old/Points.js":53,"../modules/old/util":54,"js-util/debounce":12}],26:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var n=(new r["default"],document.getElementById("canvas-webgl")),e=new THREE.WebGLRenderer({antialias:!1,canvas:n}),t=new THREE.WebGLRenderTarget(document.body.clientWidth,window.innerHeight),o=new THREE.Scene,a=new THREE.Scene,i=new THREE.OrthographicCamera((-1),1,1,(-1),0,1),c=new THREE.PerspectiveCamera(45,document.body.clientWidth/window.innerHeight,1,1e4),l=new THREE.Clock,v=new s["default"],f=(new u["default"],new d["default"]),x=new m["default"],p=new h["default"],b=new y["default"](t.texture),w=document.getElementsByClassName("js-transition-intro"),M=function(){n.width=document.body.clientWidth,n.height=window.innerHeight,c.aspect=document.body.clientWidth/window.innerHeight,c.updateProjectionMatrix(),t.setSize(document.body.clientWidth,window.innerHeight),e.setSize(document.body.clientWidth,window.innerHeight),b.resize()},E=function(){var n=l.getDelta();v.render(n),f.render(n),x.render(n),p.render(n),e.render(a,c,t),b.render(n),e.render(o,i)},z=function R(){E(),requestAnimationFrame(R)},S=function(){window.addEventListener("resize",g(function(){M()}),1e3)},D=function(){for(var n=function(){var n=w[e];n.classList.add("is-opened","is-animate"),n.addEventListener("transitionend",function(){n.classList.remove("is-animate")})},e=0;e<w.length;e++)n()},I=function(){e.setSize(document.body.clientWidth,window.innerHeight),e.setClearColor(1118481,1),c.position.set(0,0,800),c.lookAt(new THREE.Vector3),o.add(b.obj),v.loadTexture(function(){a.add(v.obj),a.add(f.obj),a.add(x.obj),a.add(p.obj),D()}),S(),M(),z()};I()};var a=n("../modules/common/normalizeVector2"),i=(o(a),n("../modules/common/IndexScroller")),r=o(i),c=n("../modules/index/TitleObject"),s=o(c),l=n("../modules/index/FrameObject"),u=o(l),v=n("../modules/index/SkyOctahedron"),d=o(v),f=n("../modules/index/SkyOctahedronShell"),m=o(f),x=n("../modules/index/Ground"),h=o(x),p=n("../modules/index/PostEffect"),y=o(p),g=n("js-util/debounce")},{"../modules/common/IndexScroller":35,"../modules/common/normalizeVector2":39,"../modules/index/FrameObject":41,"../modules/index/Ground":42,"../modules/index/PostEffect":43,"../modules/index/SkyOctahedron":44,"../modules/index/SkyOctahedronShell":45,"../modules/index/TitleObject":46,"js-util/debounce":12}],27:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var n=document.getElementById("canvas-webgl"),e=new THREE.WebGLRenderer({antialias:!1,canvas:n,alpha:!0}),t=new THREE.WebGLRenderTarget(document.body.clientWidth,window.innerHeight),o=new THREE.Scene,a=new THREE.Scene,r=new THREE.OrthographicCamera((-1),1,1,(-1),0,1),s=new c["default"](45,document.body.clientWidth/window.innerHeight,1,1e5),u=new l["default"](s),d=new THREE.Clock,m=new THREE.Vector2,p=new THREE.Vector2,y=new THREE.Vector2,g=!1,b=new THREE.CubeTextureLoader,w=new v["default"],M=new f["default"],E=new x["default"](t.texture),z=function(){n.width=document.body.clientWidth,n.height=window.innerHeight,s.aspect=document.body.clientWidth/window.innerHeight,s.updateProjectionMatrix(),E.resize(),e.setSize(document.body.clientWidth,window.innerHeight),t.setSize(document.body.clientWidth,window.innerHeight)},S=function(){var n=d.getDelta();u.render(),w.render(n),M.render(n),E.render(n),E.uniforms.strengthZoom.value=u.computeZoomLength(),E.uniforms.strengthGlitch.value=u.computeAcceleration(),e.render(a,s,t),e.render(o,r)},D=function _(){S(),requestAnimationFrame(_)},I=function(n){g=!0},R=function(n){g&&u.rotate(m.x-p.x,m.y-p.y)},P=function(n){g=!1,u.touchEnd()},T=function(n){u.zoom(n.deltaY)},F=function(){window.addEventListener("resize",h(function(){z()}),1e3),n.addEventListener("mousedown",function(n){n.preventDefault(),m.set(n.clientX,n.clientY),(0,i["default"])(m),I(!1)}),document.addEventListener("mousemove",function(n){n.preventDefault(),p.set(n.clientX,n.clientY),(0,i["default"])(p),R(!1)}),document.addEventListener("mouseup",function(n){n.preventDefault(),y.set(n.clientX,n.clientY),(0,i["default"])(y),P(!1)}),n.addEventListener("wheel",function(n){n.preventDefault(),T(n)}),n.addEventListener("touchstart",function(n){n.preventDefault(),m.set(n.touches[0].clientX,n.touches[0].clientY),(0,i["default"])(m),I(n.touches[0].clientX,n.touches[0].clientY,!0)}),n.addEventListener("touchmove",function(n){n.preventDefault(),p.set(n.touches[0].clientX,n.touches[0].clientY),(0,i["default"])(p),R(!0)}),n.addEventListener("touchend",function(n){n.preventDefault(),y.set(n.changedTouches[0].clientX,n.changedTouches[0].clientY),(0,i["default"])(y),P(!0)})},H=function(){e.setSize(document.body.clientWidth,window.innerHeight),e.setClearColor(15658734,1),b.setPath("../img/sketch/instancing/").load(["cubemap_px.png","cubemap_nx.png","cubemap_py.png","cubemap_ny.png","cubemap_pz.png","cubemap_nz.png"],function(n){w.init(n),M.init(n),o.add(E.obj),a.add(w.obj),a.add(M.obj)}),F(),z(),D()};H()};var a=n("../modules/common/normalizeVector2"),i=o(a),r=n("../modules/common/ForcePerspectiveCamera"),c=o(r),s=n("../modules/sketch/instancing/CameraController"),l=o(s),u=n("../modules/sketch/instancing/Debris"),v=o(u),d=n("../modules/sketch/instancing/SkyBox"),f=o(d),m=n("../modules/sketch/instancing/PostEffect.js"),x=o(m),h=n("js-util/debounce")},{"../modules/common/ForcePerspectiveCamera":34,"../modules/common/normalizeVector2":39,"../modules/sketch/instancing/CameraController":58,"../modules/sketch/instancing/Debris":59,"../modules/sketch/instancing/PostEffect.js":60,"../modules/sketch/instancing/SkyBox":61,"js-util/debounce":12}],28:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var e=n("../modules/old/util"),t=n("../modules/old/Force3"),o=n("../modules/old/ForceCamera"),a=document.getElementById("canvas-webgl"),c=new THREE.WebGLRenderer({antialias:!0,canvas:a}),s=new THREE.Scene,l=new o(35,window.innerWidth/window.innerHeight,1,1e4),u=(new THREE.Clock,new THREE.Raycaster),v=null,d=new t,f=new t,m=null;d.mass=1.4;var x=function(){var n=new THREE.PlaneBufferGeometry(6,6),e=new THREE.ShaderMaterial({uniforms:{time:{type:"f",value:0},time2:{type:"f",value:0},acceleration:{type:"f",value:0},resolution:{type:"v2",value:new THREE.Vector2(window.innerWidth,window.innerHeight)}},vertexShader:"#define GLSLIFY 1\nvarying mat4 m_matrix;\n\nfloat inverse(float m) {\n  return 1.0 / m;\n}\n\nmat2 inverse(mat2 m) {\n  return mat2(m[1][1],-m[0][1],\n             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nvoid main(void) {\n  m_matrix = inverse(modelMatrix);\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n",fragmentShader:"#define GLSLIFY 1\nuniform float time;\nuniform float time2;\nuniform float acceleration;\nuniform vec2 resolution;\n\nvarying mat4 m_matrix;\n\n// const vec3 cPos = vec3(0.0, 0.0, 10.0);\nconst float targetDepth = 3.5;\nconst vec3 lightDir = vec3(0.577, -0.577, 0.577);\n\nvec3 hsv2rgb(vec3 c){\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nvec3 rotate(vec3 p, float radian_x, float radian_y, float radian_z) {\n  mat3 mx = mat3(\n    1.0, 0.0, 0.0,\n    0.0, cos(radian_x), -sin(radian_x),\n    0.0, sin(radian_x), cos(radian_x)\n  );\n  mat3 my = mat3(\n    cos(radian_y), 0.0, sin(radian_y),\n    0.0, 1.0, 0.0,\n    -sin(radian_y), 0.0, cos(radian_y)\n  );\n  mat3 mz = mat3(\n    cos(radian_z), -sin(radian_z), 0.0,\n    sin(radian_z), cos(radian_z), 0.0,\n    0.0, 0.0, 1.0\n  );\n  return mx * my * mz * p;\n}\n\nfloat dBox(vec3 p, vec3 size) {\n  return length(max(abs(p) - size, 0.0));\n}\n\nfloat getNoise(vec3 p) {\n  return snoise(p * (0.4 + acceleration * 0.1) + time / 100.0);\n}\n\nvec3 getRotate(vec3 p) {\n  return rotate(p, radians(time2), radians(time2 * 2.0), radians(time2));\n}\n\nfloat distanceFunc(vec3 p) {\n  vec4 p1 = m_matrix * vec4(p, 1.0);\n  float n1 = getNoise(p1.xyz);\n  vec3 p2 = getRotate(p1.xyz);\n  float d1 = dBox(p2, vec3(0.8 - min(acceleration, 0.8))) - 0.2;\n  float d2 = dBox(p2, vec3(1.0)) - n1;\n  float d3 = dBox(p2, vec3(0.5 + acceleration * 0.4)) - n1;\n  return min(max(d1, -d2), d3);\n}\n\nfloat distanceFuncForFill(vec3 p) {\n  vec4 p1 = m_matrix * vec4(p, 1.0);\n  float n = getNoise(p1.xyz);\n  vec3 p2 = getRotate(p1.xyz);\n  return dBox(p2, vec3(0.5 + acceleration * 0.4)) - n;\n}\n\nvec3 getNormal(vec3 p) {\n  const float d = 0.1;\n  return normalize(vec3(\n    distanceFunc(p + vec3(d, 0.0, 0.0)) - distanceFunc(p + vec3(-d, 0.0, 0.0)),\n    distanceFunc(p + vec3(0.0, d, 0.0)) - distanceFunc(p + vec3(0.0, -d, 0.0)),\n    distanceFunc(p + vec3(0.0, 0.0, d)) - distanceFunc(p + vec3(0.0, 0.0, -d))\n  ));\n}\n\nvoid main() {\n  vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n\n  vec3 cDir = normalize(cameraPosition * -1.0);\n  vec3 cUp  = vec3(0.0, 1.0, 0.0);\n  vec3 cSide = cross(cDir, cUp);\n\n  vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n  float distance = 0.0;\n  float rLen = 0.0;\n  vec3 rPos = cameraPosition;\n  for(int i = 0; i < 64; i++){\n    distance = distanceFunc(rPos);\n    rLen += distance;\n    rPos = cameraPosition + ray * rLen * 0.2;\n  }\n\n  vec3 normal = getNormal(rPos);\n  if(abs(distance) < 0.5){\n    if (distanceFuncForFill(rPos) > 0.5) {\n      gl_FragColor = vec4(hsv2rgb(vec3(dot(normal, cUp) * 0.8 + time / 400.0, 0.2, dot(normal, cUp) * 0.8 + 0.1)), 1.0);\n    } else {\n      gl_FragColor = vec4(hsv2rgb(vec3(dot(normal, cUp) * 0.1 + time / 400.0, 0.8, dot(normal, cUp) * 0.2 + 0.8)), 1.0);\n    }\n  } else {\n    gl_FragColor = vec4(0.0);\n  }\n}\n",transparent:!0}),t=new THREE.Mesh(n,e);return t.name="MetalCube",t},h=function(){var n=new THREE.OctahedronGeometry(30,4),e=new THREE.BufferGeometry;e.fromGeometry(n);var t=new THREE.ShaderMaterial({uniforms:{time:{type:"f",value:0},acceleration:{type:"f",value:0}},vertexShader:"#define GLSLIFY 1\nuniform float time;\nuniform float acceleration;\n\nvarying vec3 vPosition;\nvarying vec3 vColor;\nvarying mat4 invertMatrix;\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nvec3 hsv2rgb(vec3 c){\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat inverse(float m) {\n  return 1.0 / m;\n}\n\nmat2 inverse(mat2 m) {\n  return mat2(m[1][1],-m[0][1],\n             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nvec3 rotate(vec3 p, float radian_x, float radian_y, float radian_z) {\n  mat3 mx = mat3(\n    1.0, 0.0, 0.0,\n    0.0, cos(radian_x), -sin(radian_x),\n    0.0, sin(radian_x), cos(radian_x)\n  );\n  mat3 my = mat3(\n    cos(radian_y), 0.0, sin(radian_y),\n    0.0, 1.0, 0.0,\n    -sin(radian_y), 0.0, cos(radian_y)\n  );\n  mat3 mz = mat3(\n    cos(radian_z), -sin(radian_z), 0.0,\n    sin(radian_z), cos(radian_z), 0.0,\n    0.0, 0.0, 1.0\n  );\n  return mx * my * mz * p;\n}\n\nvec3 getRotate(vec3 p) {\n  return rotate(p, radians(time / 6.0), radians(time / 7.0), radians(time / 8.0));\n}\n\nvoid main() {\n  float updateTime = time / 400.0;\n  vec3 p_rotate = getRotate(position);\n  float noise = snoise(vec3(p_rotate / 12.1 + updateTime * 0.5));\n  vec3 p_noise = p_rotate + p_rotate * noise / 20.0 * (min(acceleration, 6.0) + 1.0);\n\n  vPosition = p_noise;\n  vColor = hsv2rgb(vec3(updateTime + position.y / 400.0, 0.05 + min(acceleration / 10.0, 0.25), 1.0));\n  invertMatrix = inverse(modelMatrix);\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(p_noise, 1.0);\n}\n",fragmentShader:"#define GLSLIFY 1\nuniform float time;\nuniform float acceleration;\n\nvarying vec3 vPosition;\nvarying vec3 vColor;\nvarying mat4 invertMatrix;\n\nvoid main() {\n  vec3 normal = normalize(cross(dFdx(vPosition), dFdy(vPosition)));\n  vec3 inv_light = normalize(invertMatrix * vec4(0.7, -0.7, 0.7, 1.0)).xyz;\n  float diff = (dot(normal, inv_light) + 1.0) / 4.0 + 0.4;\n  gl_FragColor = vec4(vColor * diff, 1.0);\n}\n",shading:THREE.FlatShading,side:THREE.BackSide}),o=new THREE.Mesh(e,t);return o.name="Background",o},p=function(n,t,o){d.acceleration.length()>.1||!o||(u.setFromCamera(o,t),v=u.intersectObjects(n.children)[0],v&&"MetalCube"==v.object.name&&(d.anchor.copy(e.getPolarCoord(e.getRadian(e.getRandomInt(-20,20)),e.getRadian(e.getRandomInt(0,360)),e.getRandomInt(30,90)/10)),f.applyForce(new THREE.Vector3(1,0,0))))},y=x(),g=h(),b=function(){s.add(y),s.add(g),l.setPolarCoord(0,e.getRadian(90),24)},w=function(){a.width=window.innerWidth,a.height=window.innerHeight,l.aspect=window.innerWidth/window.innerHeight,l.updateProjectionMatrix(),c.setSize(window.innerWidth,window.innerHeight),y.material.uniforms.resolution.value.set(window.innerWidth,window.innerHeight)},M=function(){p(s,l,m),d.applyHook(0,.12),d.applyDrag(.01),d.updateVelocity(),f.applyHook(0,.005),f.applyDrag(.2),f.updateVelocity(),y.position.copy(d.velocity),y.material.uniforms.time.value++,y.material.uniforms.time2.value+=1+Math.floor(4*d.acceleration.length()),y.material.uniforms.acceleration.value=d.acceleration.length(),g.material.uniforms.time.value++,g.material.uniforms.acceleration.value=f.velocity.length(),l.force.position.applyHook(0,.025),l.force.position.applyDrag(.2),l.force.position.updateVelocity(),l.updatePosition(),l.lookAtCenter(),c.render(s,l)},E=function D(){M(),requestAnimationFrame(D)},z=function(){var n=new THREE.Vector2,e=new THREE.Vector2,t=new THREE.Vector2,o=function(e,t,o){n.set(e,t),(0,i["default"])(n)},c=function(n,t,o){e.set(n,t),(0,i["default"])(e),m=e},s=function(n,e,o){t.set(n,e)},l=function(){t.set(0,0)};window.addEventListener("resize",r(function(){w()}),1e3),a.addEventListener("mousedown",function(n){n.preventDefault(),o(n.clientX,n.clientY,!1)}),a.addEventListener("mousemove",function(n){n.preventDefault(),c(n.clientX,n.clientY,!1)}),a.addEventListener("mouseup",function(n){n.preventDefault(),s(n.clientX,n.clientY,!1)}),a.addEventListener("touchstart",function(n){n.preventDefault(),o(n.touches[0].clientX,n.touches[0].clientY,!0)}),a.addEventListener("touchmove",function(n){n.preventDefault(),c(n.touches[0].clientX,n.touches[0].clientY,!0)}),a.addEventListener("touchend",function(n){n.preventDefault(),s(n.changedTouches[0].clientX,n.changedTouches[0].clientY,!0)}),window.addEventListener("mouseout",function(){event.preventDefault(),l()})},S=function(){c.setSize(window.innerWidth,window.innerHeight),c.setClearColor(15658734,1),l.position.set(1e3,1e3,1e3),l.lookAt(new THREE.Vector3),z(),b(),w(),E()};S()};var a=n("../modules/common/normalizeVector2"),i=o(a),r=n("js-util/debounce")},{"../modules/common/normalizeVector2":39,"../modules/old/Force3":48,"../modules/old/ForceCamera":49,"../modules/old/util":54,"js-util/debounce":12}],29:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var n=document.getElementById("canvas-webgl"),e=new THREE.WebGLRenderer({antialias:!1,canvas:n}),t=new THREE.WebGLRenderTarget(document.body.clientWidth,window.innerHeight),o=new THREE.WebGLRenderTarget(document.body.clientWidth,window.innerHeight),a=new THREE.WebGLRenderTarget(document.body.clientWidth,window.innerHeight),r=new THREE.Scene,s=new THREE.Scene,u=new THREE.OrthographicCamera((-1),1,1,(-1),0,1),d=new THREE.PerspectiveCamera(45,document.body.clientWidth/window.innerHeight,1,1e4),x=new THREE.Clock,h=new THREE.Vector2,p=new THREE.Vector2,y=new THREE.Vector2,g=!1,b=new f["default"],w=new c["default"](t.texture),M=new l["default"](o.texture,1,0),E=new l["default"](a.texture,0,1),z=new v["default"](t.texture,o.texture);b.init(e);var S=function(){n.width=document.body.clientWidth,n.height=window.innerHeight,d.aspect=document.body.clientWidth/window.innerHeight,d.updateProjectionMatrix(),M.resize(),E.resize(),t.setSize(document.body.clientWidth,window.innerHeight),o.setSize(document.body.clientWidth,window.innerHeight),a.setSize(document.body.clientWidth,window.innerHeight),e.setSize(document.body.clientWidth,window.innerHeight)},D=function(){var n=x.getDelta();b.render(e,n),e.render(s,d,t),r.add(w.obj),e.render(r,d,o),r.remove(w.obj),r.add(M.obj),e.render(r,d,a),r.remove(M.obj),r.add(E.obj),e.render(r,d,o),r.remove(E.obj),r.add(z.obj),e.render(r,u),r.remove(z.obj)},I=function C(){D(),requestAnimationFrame(C)},R=function(n){g=!0,b.touchStart(h)},P=function(n){g&&b.touchMove(p)},T=function(n){g=!1,b.touchEnd()},F=function(){g=!1,b.touchEnd()},H=function(){window.addEventListener("resize",m(function(){S()}),1e3),n.addEventListener("mousedown",function(n){n.preventDefault(),h.set(n.clientX,n.clientY),(0,i["default"])(h),R(!1)}),n.addEventListener("mousemove",function(n){n.preventDefault(),p.set(n.clientX,n.clientY),(0,i["default"])(p),P(!1)}),n.addEventListener("mouseup",function(n){n.preventDefault(),y.set(n.clientX,n.clientY),(0,i["default"])(y),T(!1)}),n.addEventListener("touchstart",function(n){n.preventDefault(),h.set(n.touches[0].clientX,n.touches[0].clientY),(0,i["default"])(h),R(n.touches[0].clientX,n.touches[0].clientY,!0)}),n.addEventListener("touchmove",function(n){n.preventDefault(),p.set(n.touches[0].clientX,n.touches[0].clientY),(0,i["default"])(p),P(!0)}),n.addEventListener("touchend",function(n){n.preventDefault(),(0,i["default"])(y),y.set(n.changedTouches[0].clientX,n.changedTouches[0].clientY),T(!0)}),window.addEventListener("mouseout",function(){event.preventDefault(),y.set(0,0),F()})},_=function(){e.setSize(document.body.clientWidth,window.innerHeight),e.setClearColor(1118481,1),d.position.set(0,0,1e3),d.lookAt(new THREE.Vector3),s.add(b.obj),H(),S(),I()};_()};var a=n("../modules/common/normalizeVector2"),i=o(a),r=n("../modules/sketch/particle/PostEffectBright.js"),c=o(r),s=n("../modules/sketch/particle/PostEffectBlur.js"),l=o(s),u=n("../modules/sketch/particle/PostEffectBloom.js"),v=o(u),d=n("../modules/sketch/particle/Points"),f=o(d),m=n("js-util/debounce")},{"../modules/common/normalizeVector2":39,"../modules/sketch/particle/Points":62,"../modules/sketch/particle/PostEffectBloom.js":63,"../modules/sketch/particle/PostEffectBlur.js":64,"../modules/sketch/particle/PostEffectBright.js":65,"js-util/debounce":12}],30:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){for(var n=document.getElementById("canvas-webgl"),e=new THREE.WebGLRenderer({antialias:!1,canvas:n,alpha:!0}),t=new THREE.Scene,o=new THREE.PerspectiveCamera(90,document.body.clientWidth/window.innerHeight,1,1e4),a=new THREE.Clock,r=new THREE.Vector2,l=new THREE.Vector2,u=new THREE.Vector2,v=!1,d=0,f=0,m=[],x=function(n){f+=n,f>1&&(m[d].show(),d=d+1>=m.length-1?0:d+1,f=0)},h=0;h<20;h++)m[h]=new c["default"],t.add(m[h].obj);var p=function(){n.width=document.body.clientWidth,n.height=window.innerHeight,o.aspect=document.body.clientWidth/window.innerHeight,o.updateProjectionMatrix(),e.setSize(document.body.clientWidth,window.innerHeight)},y=function(){var n=a.getDelta();x(n);for(var i=0;i<m.length;i++)m[i].render(n);e.render(t,o)},g=function S(){
y(),requestAnimationFrame(S)},b=function(n){v=!0},w=function(n){},M=function(n){v=!1},E=function(){window.addEventListener("resize",s(function(){p()}),1e3),n.addEventListener("mousedown",function(n){n.preventDefault(),r.set(n.clientX,n.clientY),(0,i["default"])(r),b(!1)}),document.addEventListener("mousemove",function(n){n.preventDefault(),l.set(n.clientX,n.clientY),(0,i["default"])(l),w(!1)}),document.addEventListener("mouseup",function(n){n.preventDefault(),u.set(n.clientX,n.clientY),(0,i["default"])(u),M(!1)}),n.addEventListener("touchstart",function(n){n.preventDefault(),r.set(n.touches[0].clientX,n.touches[0].clientY),(0,i["default"])(r),b(n.touches[0].clientX,n.touches[0].clientY,!0)}),n.addEventListener("touchmove",function(n){n.preventDefault(),l.set(n.touches[0].clientX,n.touches[0].clientY),(0,i["default"])(l),w(!0)}),n.addEventListener("touchend",function(n){n.preventDefault(),u.set(n.changedTouches[0].clientX,n.changedTouches[0].clientY),(0,i["default"])(u),M(!0)})},z=function(){e.setSize(document.body.clientWidth,window.innerHeight),e.setClearColor(15856113,1),o.position.set(0,0,1e3),o.lookAt(new THREE.Vector3),E(),p(),g()};z()};var a=n("../modules/common/normalizeVector2"),i=o(a),r=n("../modules/sketch/puddle/Puddle.js"),c=o(r),s=n("js-util/debounce")},{"../modules/common/normalizeVector2":39,"../modules/sketch/puddle/Puddle.js":66,"js-util/debounce":12}],31:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var n=document.getElementById("canvas-webgl"),e=new THREE.WebGLRenderer({antialias:!0,canvas:n}),t=new THREE.WebGLRenderTarget(document.body.clientWidth,window.innerHeight),o=new THREE.Scene,a=new THREE.Scene,i=new THREE.PerspectiveCamera(24,document.body.clientWidth/window.innerHeight,1,15e3),c=new THREE.Clock,l=new THREE.Vector2,d=new THREE.Vector2,f=new THREE.Vector2,m=new THREE.Vector2,x=new Uint8Array(4),h=!1,p=new r["default"],y=new s["default"],g=new u["default"],b=function(){n.width=document.body.clientWidth,n.height=window.innerHeight,i.aspect=document.body.clientWidth/window.innerHeight,i.updateProjectionMatrix(),e.setSize(document.body.clientWidth,window.innerHeight),t.setSize(document.body.clientWidth,window.innerHeight),y.resize()},w=function(){var n=c.getDelta();e.setClearColor(15856113,1),p.render(n),y.render(e,o,n),g.render(e,o,n),e.render(o,i)},M=function P(){w(),requestAnimationFrame(P)},E=function(n){h=!0},z=function(n){h?n&&p.rotate(2*(d.x-f.x)):(e.setClearColor(16777215,1),e.render(a,i,t),e.readRenderTargetPixels(t,d.x,t.height-d.y,1,1,x),p.picked(x[0]<<16|x[1]<<8|x[2]))},S=function(n){h=!1},D=function(n){p.rotate(n.deltaY)},I=function(){window.addEventListener("resize",v(function(){b()}),1e3),n.addEventListener("mousedown",function(n){n.preventDefault(),l.set(n.clientX,n.clientY),E(!1)}),document.addEventListener("mousemove",function(n){n.preventDefault(),d.set(n.clientX,n.clientY),z(!1)}),document.addEventListener("mouseup",function(n){n.preventDefault(),m.set(n.clientX,n.clientY),S(!1)}),n.addEventListener("wheel",function(n){n.preventDefault(),D(n)}),n.addEventListener("touchstart",function(n){n.preventDefault(),l.set(n.touches[0].clientX,n.touches[0].clientY),d.set(n.touches[0].clientX,n.touches[0].clientY),f.set(n.touches[0].clientX,n.touches[0].clientY),E(n.touches[0].clientX,n.touches[0].clientY,!0)}),n.addEventListener("touchmove",function(n){n.preventDefault(),d.set(n.touches[0].clientX,n.touches[0].clientY),z(!0),f.set(n.touches[0].clientX,n.touches[0].clientY)}),n.addEventListener("touchend",function(n){n.preventDefault(),m.set(n.changedTouches[0].clientX,n.changedTouches[0].clientY),S(!0)})},R=function(){e.setSize(document.body.clientWidth,window.innerHeight),i.position.set(0,400,-3e3),i.lookAt(new THREE.Vector3(0,0,0)),y.mirrorCamera.position.set(0,-400,-3e3),y.mirrorCamera.lookAt(new THREE.Vector3(0,0,0)),p.core.obj.position.set(0,80,0),p.wire.obj.position.set(0,80,0),p.wire.objPicked.position.set(0,80,0),y.obj.rotation.set(-.5*Math.PI,0,0),o.add(p.core.obj),o.add(p.wire.obj),o.add(y.obj),o.add(g.obj),o.add(g.cubeCamera),a.add(p.wire.objPicked),I(),b(),M()};R()};var a=n("../modules/common/normalizeVector2"),i=(o(a),n("../modules/sketch/reel/Boxes.js")),r=o(i),c=n("../modules/sketch/reel/Floor.js"),s=o(c),l=n("../modules/sketch/reel/Hill.js"),u=o(l),v=n("js-util/debounce")},{"../modules/common/normalizeVector2":39,"../modules/sketch/reel/Boxes.js":67,"../modules/sketch/reel/Floor.js":69,"../modules/sketch/reel/Hill.js":70,"js-util/debounce":12}],32:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}var a=n("./modules/common/ConsoleSignature.js"),i=o(a),r=n("./modules/common/redirectOldSketches.js"),c=o(r),s=document.querySelector(".l-page"),l=s.dataset.id,u=(new i["default"],function(){if(n("./init/common.js")["default"](),"index"==l)n("./init/index.js")["default"]();else switch(n("./init/commonSketch.js")["default"](),l){case"butterfly":n("./init/butterfly.js")["default"]();break;case"puddle":n("./init/puddle.js")["default"]();break;case"reel":n("./init/reel.js")["default"]();break;case"glitch":n("./init/glitch.js")["default"]();break;case"instancing":n("./init/instancing.js")["default"]();break;case"particle":n("./init/particle.js")["default"]();break;case"attract":n("./init/attract.js")["default"]();break;case"hole":n("./init/hole.js")["default"]();break;case"metal_cube":n("./init/metalCube.js")["default"]();break;case"distort":n("./init/distort.js")["default"]();break;case"image_data":n("./init/imageData.js")["default"]();break;case"gallery":n("./init/gallery.js")["default"]();break;case"comet":n("./init/comet.js")["default"]();break;case"hyper_space":n("./init/hyperSpace.js")["default"]();break;case"fire_ball":n("./init/fireBall.js")["default"]()}(0,c["default"])()});u()},{"./init/attract.js":14,"./init/butterfly.js":15,"./init/comet.js":16,"./init/common.js":17,"./init/commonSketch.js":18,"./init/distort.js":19,"./init/fireBall.js":20,"./init/gallery.js":21,"./init/glitch.js":22,"./init/hole.js":23,"./init/hyperSpace.js":24,"./init/imageData.js":25,"./init/index.js":26,"./init/instancing.js":27,"./init/metalCube.js":28,"./init/particle.js":29,"./init/puddle.js":30,"./init/reel.js":31,"./modules/common/ConsoleSignature.js":33,"./modules/common/redirectOldSketches.js":40}],33:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=function(){function n(){o(this,n),this.message="created by yoichi kobayashi",this.url="http://www.tplh.net",this.show()}return a(n,[{key:"show",value:function(){if(navigator.userAgent.toLowerCase().indexOf("chrome")>-1){var n=["\n%c "+this.message+" %c%c "+this.url+" \n\n","color: #fff; background: #222; padding:3px 0;","padding:3px 1px;","color: #fff; background: #47c; padding:3px 0;"];console.log.apply(console,n)}else window.console&&console.log(this.message+" "+this.url)}}]),n}();t["default"]=i},{}],34:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}function a(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}function i(n,e){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?n:e}function r(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(n,e):n.__proto__=e)}Object.defineProperty(t,"__esModule",{value:!0});var c=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),s=n("./force3"),l=o(s),u=function(n){function e(n,t,o,r){a(this,e);var c=i(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,n,t,o,r));return c.k=.02,c.d=.2,c.velocity=[0,0,0],c.acceleration=[0,0,0],c.anchor=[0,0,0],c.lookK=.02,c.lookD=.2,c.lookVelocity=[0,0,0],c.lookAcceleration=[0,0,0],c.lookAnchor=[0,0,0],c}return r(e,n),c(e,[{key:"updatePosition",value:function(){l["default"].applyHook(this.velocity,this.acceleration,this.anchor,0,this.k),l["default"].applyDrag(this.acceleration,this.d),l["default"].updateVelocity(this.velocity,this.acceleration,1)}},{key:"updateLook",value:function(){l["default"].applyHook(this.lookVelocity,this.lookAcceleration,this.lookAnchor,0,this.lookK),l["default"].applyDrag(this.lookAcceleration,this.lookD),l["default"].updateVelocity(this.lookVelocity,this.lookAcceleration,1)}},{key:"render",value:function(){this.updatePosition(),this.updateLook(),this.position.set(this.velocity[0],this.velocity[1],this.velocity[2]),this.lookAt({x:this.lookVelocity[0],y:this.lookVelocity[1],z:this.lookVelocity[2]})}}]),e}(THREE.PerspectiveCamera);t["default"]=u},{"./force3":38}],35:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}function a(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),r=n("./buildVueIndex"),c=o(r),s=n("./force3"),l=o(s),u=n("gl-matrix"),v=n("js-util/debounce"),d=n("js-util/isSmartphone"),f=function(){function n(){a(this,n),this.vm=(0,c["default"])(this),this.elm={wrap:document.getElementById("index"),contents:document.getElementById("index-contents"),scroll:document.getElementById("index-scroll"),items:document.getElementsByClassName("js-index-scroll-item")},this.items=[],this.offsetTop=window.pageYOffset*-1,this.isAnimate=!1,this.on()}return i(n,[{key:"init",value:function(){var n=this;this.elm.scroll.style.height=this.elm.contents.clientHeight+"px";for(var e=0;e<this.elm.items.length;e++)this.items[e]={offset:this.elm.items[e].offsetTop,velocity:[0,0,0],acceleration:[0,0,0],anchor:[0,0,0],mass:.05*e+1.2},this.elm.items[e].style.transform="translate3D(0, "+this.items[e].velocity[1]+"px, 0)";setTimeout(function(){n.elm.scroll.clientHeight!=n.elm.contents.clientHeight&&(n.elm.scroll.style.height=n.elm.contents.clientHeight+"px")},500)}},{key:"scroll",value:function(){if(!(this.vm.isOpened<1)){this.offsetTop=window.pageYOffset*-1;for(var n=0;n<this.elm.items.length;n++)this.items[n].anchor[1]=this.offsetTop}}},{key:"resize",value:function(){this.vm.isOpened<1||this.init()}},{key:"open",value:function(){this.init(),this.isAnimate=!0,document.body.classList.add("is-opened-index"),this.renderLoop()}},{key:"close",value:function(){this.elm.scroll.style.height=0,this.isAnimate=!1,document.body.classList.remove("is-opened-index")}},{key:"render",value:function(){for(var n=0;n<this.elm.items.length;n++){var e=this.items[n];u.vec3.length(e.acceleration)<.01&&Math.abs(e.velocity[1]-e.anchor[1])<.01||(l["default"].applyHook(e.velocity,e.acceleration,e.anchor,0,.3),l["default"].applyDrag(e.acceleration,.7),l["default"].updateVelocity(e.velocity,e.acceleration,e.mass),this.elm.items[n].style.transform="translate3D(0, "+e.velocity[1]+"px, 0)")}}},{key:"renderLoop",value:function(){var n=this;this.render(),this.isAnimate&&requestAnimationFrame(function(){n.renderLoop()})}},{key:"on",value:function(){var n=this;window.addEventListener("scroll",v(function(e){n.scroll()},10)),d()?window.addEventListener("orientationchange",function(e){n.resize()}):window.addEventListener("resize",v(function(e){n.resize()},100)),document.onkeydown=function(e){switch(e.key){case"Escape":n.vm.toggle()}}}}]),n}();t["default"]=f},{"./buildVueIndex":37,"./force3":38,"gl-matrix":1,"js-util/debounce":12,"js-util/isSmartphone":13}],36:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=function(){function n(e,t,a,i){o(this,n),this.side=0,this.aScene=new THREE.Scene,this.vScene=new THREE.Scene,this.camera=new THREE.PerspectiveCamera(45,1,1,1e3),this.option={type:THREE.FloatType,minFilter:THREE.LinearFilter,magFilter:THREE.NearestFilter},this.acceleration=[new THREE.WebGLRenderTarget(0,0,this.option),new THREE.WebGLRenderTarget(0,0,this.option)],this.velocity=[new THREE.WebGLRenderTarget(0,0,this.option),new THREE.WebGLRenderTarget(0,0,this.option)],this.aUniforms={resolution:{type:"v2",value:new THREE.Vector2(document.body.clientWidth,window.innerHeight)},velocity:{type:"t",value:null},acceleration:{type:"t",value:null},time:{type:"f",value:0}},this.vUniforms={resolution:{type:"v2",value:new THREE.Vector2(document.body.clientWidth,window.innerHeight)},side:{type:"f",value:0},velocityInit:{type:"t",value:null},velocity:{type:"t",value:null},acceleration:{type:"t",value:null},time:{type:"f",value:0}},this.accelerationMesh=this.createMesh(this.aUniforms,e,t),this.velocityMesh=this.createMesh(this.vUniforms,a,i),this.uvs=[],this.targetIndex=0}return a(n,[{key:"init",value:function(n,e,t,o){this.side=Math.ceil(Math.sqrt(e.length/3)),this.vUniforms.side.value=this.side;for(var a=[],i=0;i<3*Math.pow(this.side,2);i+=3)void 0!=e[i]?(a[i+0]=e[i+0],a[i+1]=e[i+1],a[i+2]=e[i+2],this.uvs[i/3*2+0]=i/3%this.side/(this.side-1),this.uvs[i/3*2+1]=Math.floor(i/3/this.side)/(this.side-1)):(a[i+0]=0,a[i+1]=0,a[i+2]=0);if(t){var r=Object.keys(t);if(r.length)for(var i=0;i<r.length;i++){for(var c=t[r[i]],s=c.array.length;s<a.length/3*c.itemSize;s++)c.array.push(0);this.accelerationMesh.geometry.addAttribute(r[i],new THREE.BufferAttribute(new Float32Array(c.array),c.itemSize))}}if(o){var l=Object.keys(o);if(l.length)for(var i=0;i<l.length;i++){for(var u=o[l[i]],s=u.array.length;s<a.length/3*u.itemSize;s++)u.array.push(0);this.velocityMesh.geometry.addAttribute(l[i],new THREE.BufferAttribute(new Float32Array(u.array),u.itemSize))}}this.vUniforms.velocityInit.value=new THREE.DataTexture(new Float32Array(a),this.side,this.side,THREE.RGBFormat,THREE.FloatType),this.vUniforms.velocityInit.value.needsUpdate=!0;for(var v=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),new THREE.ShaderMaterial({uniforms:{velocity:{type:"t",value:this.vUniforms.velocityInit.value}},vertexShader:"#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main(void) {\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n",fragmentShader:"#define GLSLIFY 1\nuniform sampler2D velocity;\n\nvarying vec2 vUv;\n\nvoid main(void) {\n  gl_FragColor = texture2D(velocity, vUv);\n}\n"})),i=0;i<2;i++)this.acceleration[i].setSize(this.side,this.side),this.velocity[i].setSize(this.side,this.side);this.vScene.add(this.camera),this.vScene.add(v),n.render(this.vScene,this.camera,this.velocity[0]),n.render(this.vScene,this.camera,this.velocity[1]),this.vScene.remove(v),this.vScene.add(this.velocityMesh),this.aScene.add(this.accelerationMesh)}},{key:"createMesh",value:function(n,e,t){return new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),new THREE.ShaderMaterial({uniforms:n,vertexShader:e,fragmentShader:t}))}},{key:"render",value:function(n,e){var t=Math.abs(this.targetIndex-1),o=this.targetIndex;this.aUniforms.acceleration.value=this.acceleration[t].texture,this.aUniforms.velocity.value=this.velocity[o].texture,n.render(this.aScene,this.camera,this.acceleration[o]),this.vUniforms.acceleration.value=this.acceleration[o].texture,this.vUniforms.velocity.value=this.velocity[o].texture,n.render(this.vScene,this.camera,this.velocity[t]),this.targetIndex=t,this.aUniforms.time.value+=e,this.vUniforms.time.value+=e}},{key:"getBufferAttributeUv",value:function(){return new THREE.BufferAttribute(new Float32Array(this.uvs),2)}},{key:"getCurrentVelocity",value:function(){return this.velocity[Math.abs(this.targetIndex-1)].texture}},{key:"getCurrentAcceleration",value:function(){return this.acceleration[Math.abs(this.targetIndex-1)].texture}},{key:"mergeAUniforms",value:function(n){this.aUniforms=Object.assign(this.aUniforms,n)}},{key:"mergeVUniforms",value:function(n){this.vUniforms=Object.assign(this.vUniforms,n)}},{key:"resize",value:function(n){this.aUniforms.resolution.value.set(document.body.clientWidth,window.clientHeight),this.vUniforms.resolution.value.set(document.body.clientWidth,window.clientHeight)}}]),n}();t["default"]=i},{}],37:[function(n,e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(n){return new Vue({el:"#index",data:{isOpened:-1},methods:{toggle:function(){1==this.isOpened?(this.isOpened=0,n.close()):(this.isOpened=1,n.open())}}})}},{}],38:[function(n,e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n("gl-matrix");t["default"]={updateVelocity:function(n,e,t){o.vec3.scale(e,e,1/t),o.vec3.add(n,n,e)},applyFriction:function(n,e,t){var a=[0,0,0];o.vec3.scale(a,n,-1);o.vec3.normalize(a,a),o.vec3.scale(a,a,e),o.vec3.add(n,n,a)},applyDrag:function(n,e){var t=[0,0,0];o.vec3.scale(t,n,-1),o.vec3.normalize(t,t),o.vec3.scale(t,t,o.vec3.length(n)*e),o.vec3.add(n,n,t)},applyHook:function(n,e,t,a,i){var r=[0,0,0];o.vec3.sub(r,n,t);var c=o.vec3.length(r)-a;o.vec3.normalize(r,r),o.vec3.scale(r,r,-1*i*c),o.vec3.add(e,e,r)}}},{"gl-matrix":1}],39:[function(n,e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(n){n.x=n.x/document.body.clientWidth*2-1,n.y=2*-(n.y/window.innerHeight)+1}},{}],40:[function(n,e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){for(var n=decodeURIComponent(location.search.substring(1)),e=n.split("&"),t=0;t<e.length;t++)if(!(e[t].indexOf("sketch_id")<0)){var o=e[t].replace("sketch_id=","");switch(o=parseInt(o,10)){case 9:location.href="/sketch-threejs/sketch/attract.html";break;case 8:location.href="/sketch-threejs/sketch/hole.html";break;case 7:location.href="/sketch-threejs/sketch/metal_cube.html";break;case 6:location.href="/sketch-threejs/sketch/distort.html";break;case 5:location.href="/sketch-threejs/sketch/image_data.html";break;case 4:location.href="/sketch-threejs/sketch/gallery.html";break;case 3:location.href="/sketch-threejs/sketch/comet.html";break;case 2:location.href="/sketch-threejs/sketch/hyper_space.html";break;case 1:location.href="/sketch-threejs/sketch/fire_ball.html"}}}},{}],41:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=function(){function n(){o(this,n),this.uniforms={time:{type:"f",value:0},resolution:{type:"v2",value:new THREE.Vector2}},this.obj=this.createObj()}return a(n,[{key:"createObj",value:function(){var n=new THREE.BufferGeometry,e=new Float32Array([0,Math.sqrt(3)/2,0,-1,Math.sqrt(3)/2*-1,0,1,Math.sqrt(3)/2*-1,0]),t=new Uint16Array([0,1,2,0]);return n.addAttribute("position",new THREE.BufferAttribute(e,3)),n.setIndex(new THREE.BufferAttribute(t,1)),new THREE.Line(n,new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute float index;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvoid main() {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n",fragmentShader:"#define GLSLIFY 1\nvoid main() {\n  gl_FragColor = vec4(1.0);\n}\n"}))}}]),n}();t["default"]=i},{}],42:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=n("js-util/MathEx"),r=function(){function n(){o(this,n),this.uniforms={time:{type:"f",value:0}},this.obj=this.createObj(),this.obj.position.set(0,-200,0),this.obj.rotation.set(i.radians(-90),0,0)}return a(n,[{key:"createObj",value:function(){return new THREE.Mesh(new THREE.PlaneBufferGeometry(1024,1024,32,32),new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float time;\n\nvarying vec3 vPosition;\n\nvoid main() {\n  float sin1 = sin((position.x + position.y) * 0.2 + time * 0.5);\n  float sin2 = sin((position.x - position.y) * 0.4 + time * 2.0);\n  float sin3 = sin((position.x + position.y) * -0.6 + time);\n  vec3 updatePosition = vec3(position.x, position.y, position.z + sin1 * 50.0 + sin2 * 10.0 + sin3 * 8.0);\n  vPosition = position;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(updatePosition, 1.0);\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform float time;\n\nvarying vec3 vPosition;\n\nconst float duration = 8.0;\nconst float delay = 4.0;\n\nvec3 convertHsvToRgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main() {\n  float now = clamp((time - delay) / duration, 0.0, 1.0);\n  float opacity = (1.0 - length(vPosition.xy / vec2(512.0))) * 0.6 * now;\n  vec3 v = normalize(vPosition);\n  vec3 rgb = convertHsvToRgb(vec3(0.5 + (v.x + v.y + v.x) / 40.0 + time * 0.1, 0.4, 1.0));\n  gl_FragColor = vec4(rgb, opacity);\n}\n",transparent:!0,wireframe:!0}))}},{key:"render",value:function(n){this.uniforms.time.value+=n}}]),n}();t["default"]=r},{"js-util/MathEx":11}],43:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=function(){function n(e){o(this,n),this.uniforms={time:{type:"f",value:0},resolution:{type:"v2",value:new THREE.Vector2(document.body.clientWidth,window.innerHeight)},texture:{type:"t",value:e}},this.obj=this.createObj(e),this.time=1}return a(n,[{key:"createObj",value:function(){return new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n",fragmentShader:'precision highp float;\n#define GLSLIFY 1\n\nuniform float time;\nuniform vec2 resolution;\nuniform sampler2D texture;\n\nvarying vec2 vUv;\n\nconst float duration = 8.0;\nconst float delay = 4.0;\n\n//\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\nfloat random(vec2 c){\n  return fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec3 convertHsvToRgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main() {\n  float now = clamp((time - delay) / duration, 0.0, 1.0);\n\n  // ホワイトノイズ\n  float whiteNoise = random(vUv.xy * time) * 0.1 - 0.1;\n\n  // モニターエフェクト\n  float monitor1 = abs(sin(vUv.y * resolution.y * 2.4 + time * 10.0)) * 0.04;\n  float monitor2 = abs(sin(vUv.y * resolution.y * 1.0 + time * 3.0)) * 0.04;\n  float monitor = monitor1 - monitor2;\n\n  // ヴィネット\n  float vignetteMask = smoothstep(0.8, 1.4, length(vUv * 2.0 - 1.0));\n  vec3 vignetteColor = convertHsvToRgb(vec3(0.5 + (vUv.x + vUv.y) / 40.0 + time * 0.1, 0.4, 1.0));\n  vec3 vignette = vignetteMask * vignetteColor * 0.1;\n\n  // RGBズレ\n  float r = texture2D(texture, vUv - vec2(2.0, 0.0) / resolution).r;\n  float g = texture2D(texture, vUv).g;\n  float b = texture2D(texture, vUv + vec2(2.0, 0.0) / resolution).b;\n\n  gl_FragColor = vec4((vec3(r, g, b) + whiteNoise) + monitor + vignette, 1.0);\n}\n'}))}},{key:"render",value:function(n){this.uniforms.time.value+=n*this.time}},{key:"resize",value:function(){this.uniforms.resolution.value.set(document.body.clientWidth,window.innerHeight)}}]),n}();t["default"]=i},{}],44:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=(n("js-util/MathEx"),function(n,e,t){var o=[],a=[e[0]-n[0],e[1]-n[1],e[2]-n[2]],i=[t[0]-n[0],t[1]-n[1],t[2]-n[2]];o[0]=a[1]*i[2]-a[2]*i[1],o[1]=a[2]*i[0]-a[0]*i[2],o[2]=a[0]*i[1]-a[1]*i[0];for(var r=Math.sqrt(o[0]*o[0]+o[1]*o[1]+o[2]*o[2],2),c=0;c<o.length;c++)o[c]=o[c]/r;return o}),r=function(){function n(){o(this,n),this.uniforms={time:{type:"f",value:0}},this.obj=this.createObj(),this.obj.position.set(0,210,0)}return a(n,[{key:"createObj",value:function(){for(var n=new THREE.OctahedronBufferGeometry(90,4),e=n.attributes.position.array,t=[],o=[],a=[],r=0;r<e.length;r+=9){var c=i([e[r+0],e[r+1],e[r+2]],[e[r+3],e[r+4],e[r+5]],[e[r+6],e[r+7],e[r+8]]);t.push(c[0],c[1],c[2],c[0],c[1],c[2],c[0],c[1],c[2]);var s=[(e[r+0]+e[r+3]+e[r+6])/3,(e[r+1]+e[r+4]+e[r+7])/3,(e[r+2]+e[r+5]+e[r+8])/3],l=.5*Math.random();o.push(s[0],s[1],s[2],s[0],s[1],s[2],s[0],s[1],s[2]),a.push(l,l,l)}var u=new Float32Array(t),v=new Float32Array(o),d=new Float32Array(a);return n.addAttribute("faceNormal",new THREE.BufferAttribute(u,3)),n.addAttribute("center",new THREE.BufferAttribute(v,3)),n.addAttribute("delay",new THREE.BufferAttribute(d,1)),new THREE.Mesh(n,new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:'#define GLSLIFY 1\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec3 faceNormal;\nattribute vec3 center;\nattribute float delay;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float time;\n\nvarying vec3 vPosition;\nvarying float vNoise;\nvarying float vNow;\n\nconst float duration = 2.0;\nconst float delayAll = 1.0;\n\nfloat exponentialOut(float t) {\n  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\n}\n\nmat4 computeTranslateMat(vec3 v) {\n  return mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    v.x, v.y, v.z, 1.0\n  );\n}\n\nmat4 rotateMatrixX(float radian) {\n  return mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, cos(radian), -sin(radian), 0.0,\n    0.0, sin(radian), cos(radian), 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotateMatrixY(float radian) {\n  return mat4(\n    cos(radian), 0.0, sin(radian), 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    -sin(radian), 0.0, cos(radian), 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotateMatrixZ(float radian) {\n  return mat4(\n    cos(radian), -sin(radian), 0.0, 0.0,\n    sin(radian), cos(radian), 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 computeRotateMat(float radX, float radY, float radZ) {\n  return rotateMatrixX(radX) * rotateMatrixY(radY) * rotateMatrixZ(radZ);\n}\n\n//\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\nvoid main() {\n  float now = exponentialOut(max((time - delayAll - delay - (faceNormal.x + 1.0) / 2.0 - (faceNormal.y + 1.0) / 2.0) / duration, 0.0));\n  mat4 translateMat = computeTranslateMat(vec3(faceNormal) * 1200.0 * (1.0 - now) + vec3(0.0, sin(time) * 10.0, 0.0));\n  mat4 rotateMat = computeRotateMat(0.0, radians((1.0 - now) * faceNormal.y * 4320.0), 0.0);\n  float rotateRadian = radians((time + faceNormal.x + faceNormal.y) * 1440.0);\n  mat4 rotateMatSelf = computeRotateMat(rotateRadian, rotateRadian, 0.0);\n  float noise = smoothstep(-0.4, 0.4,\n    cnoise(vec3(position.x * 0.035 - time, position.y * 0.035 - time, position.z * 0.035 + time))\n  ) * 2.0 - 1.0;\n  vec3 updatePositionSelf = (rotateMatSelf * vec4(position - center, 1.0)).xyz * (1.0 - now) + position\n    + normalize(position) * noise ;\n  vec4 updatePosition = rotateMat * translateMat * vec4(updatePositionSelf, 1.0);\n  vPosition = updatePosition.xyz;\n  vNoise = noise;\n  vNow = now;\n  gl_Position = projectionMatrix * modelViewMatrix * updatePosition;\n}\n',
fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform mat3 normalMatrix;\nuniform float time;\n\nvarying vec3 vPosition;\nvarying float vNoise;\nvarying float vNow;\n\nconst vec3 lightDirection = vec3(1.0, -1.0, -1.0);\nconst float duration = 2.0;\nconst float delayAll = 1.0;\n\nvec3 convertHsvToRgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main() {\n  float now = clamp((time - delayAll - 1.5) / duration, 0.0, 1.0);\n  vec3 normal = normalize(cross(dFdx(vPosition), dFdy(vPosition)));\n  vec3 light = normalize(normalMatrix * lightDirection);\n  float diff = (dot(normal, light) + 1.0) / 2.0 * 0.2;\n  float opacity = smoothstep(0.1, 0.2, vNow);\n  vec3 v = normalize(vPosition);\n  vec3 rgb = (1.0 - now) * vec3(1.0) + convertHsvToRgb(vec3(0.5 + (v.x + v.y + v.x) / 40.0 + time * 0.1, 0.8, 0.4 + sin(time) * 0.05 + vNoise * 0.02));\n  gl_FragColor = vec4(rgb + diff, opacity);\n}\n",shading:THREE.FlatShading,transparent:!0,side:THREE.DoubleSide}))}},{key:"render",value:function(n){this.uniforms.time.value+=n}}]),n}();t["default"]=r},{"js-util/MathEx":11}],45:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=(n("js-util/MathEx"),function(){function n(){o(this,n),this.uniforms={time:{type:"f",value:0}},this.obj=this.createObj(),this.obj.position.set(0,210,0)}return a(n,[{key:"createObj",value:function(){var n=new THREE.OctahedronBufferGeometry(150,4);return new THREE.Mesh(n,new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:'#define GLSLIFY 1\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float time;\n\nvarying vec3 vPosition;\nvarying float vOpacity;\n\nconst float duration = 4.0;\nconst float delay = 3.0;\n\nfloat exponentialOut(float t) {\n  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\n}\n\n//\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\nmat4 computeTranslateMat(vec3 v) {\n  return mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    v.x, v.y, v.z, 1.0\n  );\n}\n\nmat4 computeScaleMat(vec3 scale) {\n  return mat4(\n    scale.x, 0.0, 0.0, 0.0,\n    0.0, scale.y, 0.0, 0.0,\n    0.0, 0.0, scale.z, 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotateMatrixX(float radian) {\n  return mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, cos(radian), -sin(radian), 0.0,\n    0.0, sin(radian), cos(radian), 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotateMatrixY(float radian) {\n  return mat4(\n    cos(radian), 0.0, sin(radian), 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    -sin(radian), 0.0, cos(radian), 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotateMatrixZ(float radian) {\n  return mat4(\n    cos(radian), -sin(radian), 0.0, 0.0,\n    sin(radian), cos(radian), 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 computeRotateMat(float radX, float radY, float radZ) {\n  return rotateMatrixX(radX) * rotateMatrixY(radY) * rotateMatrixZ(radZ);\n}\n\nvoid main() {\n  float now = clamp((time - delay) / duration, 0.0, 1.0);\n  mat4 translateMat = computeTranslateMat(vec3(0.0, sin(time) * 10.0, 0.0));\n  mat4 scaleMat = computeScaleMat(vec3(exponentialOut(now) * 0.6 + 0.4 + sin(time * 2.0) * 0.04));\n  mat4 rotateMat = computeRotateMat(radians(45.0), radians(time * 2.0), radians(-time * 2.0));\n  float noise = smoothstep(-0.4, 0.4, cnoise(position * 0.035 - time)) * 2.0 - 1.0;\n  vec4 updatePosition = translateMat * rotateMat * scaleMat * vec4(position + normalize(position) * noise * 2.0, 1.0);\n  vPosition = normalize(position);\n  vOpacity = normalize(updatePosition).z;\n  gl_Position = projectionMatrix * modelViewMatrix * updatePosition;\n}\n',fragmentShader:'precision highp float;\n#define GLSLIFY 1\n\nuniform float time;\n\nvarying vec3 vPosition;\nvarying float vOpacity;\n\nconst float duration = 4.0;\nconst float delay = 3.0;\n\nvec3 convertHsvToRgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\nfloat random(vec2 c){\n  return fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid main() {\n  float now = clamp((time - delay) / duration, 0.0, 1.0);\n  float noise1 = cnoise(vec3((vPosition * vec3(0.4, 2.0, -0.6) * 2.0 + time))) * 7.0 - (1.0 + (1.0 - now) * 7.0);\n  float noise2 = cnoise(vec3((vPosition * 42.0 + time)));\n  float noise3 = cnoise(vec3((vPosition * 7.0 + time))) * 2.0;\n  float bright = smoothstep(-0.2, 1.0, (noise1 + noise2 + noise3) * now);\n  vec3 v = normalize(vPosition);\n  vec3 rgb = (1.0 - now) * vec3(1.0) + convertHsvToRgb(vec3(0.5 + (v.x + v.y + v.x) / 40.0 + time * 0.1, 0.4, 1.0));\n  float whiteNoise = random(vPosition.xy);\n  if (bright < 0.4) discard;\n  gl_FragColor = vec4(rgb * vec3(1.0 - bright + 0.6) + whiteNoise * 0.2, 0.4 + vOpacity * 0.5 + sin(time * 2.0) * 0.1);\n}\n',transparent:!0,side:THREE.DoubleSide,depthWrite:!1}))}},{key:"render",value:function(n){this.uniforms.time.value+=n}}]),n}());t["default"]=i},{"js-util/MathEx":11}],46:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=function(){function n(){o(this,n),this.uniforms={time:{type:"f",value:0},resolution:{type:"v2",value:new THREE.Vector2},texture:{type:"t",value:null}},this.obj=null,this.isLoaded=!1}return a(n,[{key:"loadTexture",value:function(n){var e=this,t=new THREE.TextureLoader;t.load("/sketch-threejs/img/index/tex_title.png",function(t){t.magFilter=THREE.NearestFilter,t.minFilter=THREE.NearestFilter,e.uniforms.texture.value=t,e.obj=e.createObj(),e.isLoaded=!0,n()})}},{key:"createObj",value:function(){return new THREE.Mesh(new THREE.PlaneBufferGeometry(256,64,40,10),new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float time;\n\nvarying vec2 vUv;\n\nconst float interval = 3.0;\n\nfloat cubicOut(float t) {\n  float f = t - 1.0;\n  return f * f * f + 1.0;\n}\n\nvoid main() {\n  float now = cubicOut(min(time / interval, 1.0));\n  vec3 updatePosition = vec3(\n    position.x * (1.2 - now * 0.2),\n    position.y * (1.2 - now * 0.2),\n    position.z\n  );\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(updatePosition, 1.0);\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform float time;\nuniform sampler2D texture;\n\nvarying vec2 vUv;\n\nconst float interval = 3.0;\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nfloat cubicOut(float t) {\n  float f = t - 1.0;\n  return f * f * f + 1.0;\n}\n\nvoid main() {\n  float now = cubicOut(min(time / interval, 1.0));\n  float noise = (snoise(vec3(vUv.x * 4.0, vUv.y * 4.0, 1.0)) + 1.0) / 2.0;\n  float opacity = smoothstep(0.4, 0.6, ((noise - 1.0) + now * interval) - vUv.x);\n  gl_FragColor = texture2D(texture, vUv) * vec4(vec3(1.0), opacity);\n}\n",transparent:!0}))}},{key:"render",value:function(n){this.isLoaded&&(this.uniforms.time.value+=n)}}]),n}();t["default"]=i},{}],47:[function(n,e,t){"use strict";var o=(n("./util"),function(){var n=function(){this.velocity=new THREE.Vector2,this.acceleration=new THREE.Vector2,this.anchor=new THREE.Vector2,this.mass=1};return n.prototype.updateVelocity=function(){this.acceleration.divideScalar(this.mass),this.velocity.add(this.acceleration)},n.prototype.applyForce=function(n){this.acceleration.add(n)},n.prototype.applyFriction=function(n,e){var t=this.acceleration.clone();e||(e=1),t.multiplyScalar(-1),t.normalize(),t.multiplyScalar(n),this.applyForce(t)},n.prototype.applyDrag=function(n){var e=this.acceleration.clone();e.multiplyScalar(-1),e.normalize(),e.multiplyScalar(this.acceleration.length()*n),this.applyForce(e)},n.prototype.applyHook=function(n,e){var t=this.velocity.clone().sub(this.anchor),o=t.length()-n;t.normalize(),t.multiplyScalar(-1*e*o),this.applyForce(t)},n});e.exports=o()},{"./util":54}],48:[function(n,e,t){"use strict";var o=(n("./util"),function(){var n=function(){this.velocity=new THREE.Vector3,this.acceleration=new THREE.Vector3,this.anchor=new THREE.Vector3,this.mass=1};return n.prototype.updateVelocity=function(){this.acceleration.divideScalar(this.mass),this.velocity.add(this.acceleration)},n.prototype.applyForce=function(n){this.acceleration.add(n)},n.prototype.applyFriction=function(n,e){var t=this.acceleration.clone();e||(e=1),t.multiplyScalar(-1),t.normalize(),t.multiplyScalar(n),this.applyForce(t)},n.prototype.applyDrag=function(n){var e=this.acceleration.clone();e.multiplyScalar(-1),e.normalize(),e.multiplyScalar(this.acceleration.length()*n),this.applyForce(e)},n.prototype.applyHook=function(n,e){var t=this.velocity.clone().sub(this.anchor),o=t.length()-n;t.normalize(),t.multiplyScalar(-1*e*o),this.applyForce(t)},n});e.exports=o()},{"./util":54}],49:[function(n,e,t){"use strict";var o=n("./util"),a=n("./Force3"),i=function(){var n=function(n,e,t,o){THREE.PerspectiveCamera.call(this,n,e,t,o),this.force={position:new a,look:new a},this.up.set(0,1,0)};return n.prototype=Object.create(THREE.PerspectiveCamera.prototype),n.prototype.constructor=n,n.prototype.updatePosition=function(){this.position.copy(this.force.position.velocity)},n.prototype.updateLook=function(){this.lookAt({x:this.force.look.velocity.x,y:this.force.look.velocity.y,z:this.force.look.velocity.z})},n.prototype.reset=function(){this.setPolarCoord(),this.lookAtCenter()},n.prototype.resize=function(n,e){this.aspect=n/e,this.updateProjectionMatrix()},n.prototype.setPolarCoord=function(n,e,t){this.force.position.anchor.copy(o.getPolarCoord(n,e,t))},n.prototype.lookAtCenter=function(){this.lookAt({x:0,y:0,z:0})},n};e.exports=i()},{"./Force3":48,"./util":54}],50:[function(n,e,t){"use strict";var o=n("./util"),a=n("./Force3"),i=function(){var n=function(n,e,t){THREE.HemisphereLight.call(this,n,e,t),this.force=new a};return n.prototype=Object.create(THREE.HemisphereLight.prototype),n.prototype.constructor=n,n.prototype.updatePosition=function(){this.position.copy(this.force.velocity)},n.prototype.setPositionSpherical=function(n,e,t){this.position.copy(o.getPolarCoord(n,e,t))},n};e.exports=i()},{"./Force3":48,"./util":54}],51:[function(n,e,t){"use strict";var o=n("./util"),a=n("./Force3"),i=function(){var n=function(n,e,t,o){THREE.PointLight.call(this,n,e,t,o),this.force=new a};return n.prototype=Object.create(THREE.PointLight.prototype),n.prototype.constructor=n,n.prototype.updatePosition=function(){this.position.copy(this.force.velocity)},n.prototype.setPolarCoord=function(n,e,t){this.position.copy(o.getPolarCoord(n,e,t))},n};e.exports=i()},{"./Force3":48,"./util":54}],52:[function(n,e,t){"use strict";var o=(n("./util"),n("./Force3")),a=function(){var n=function(){this.size=0,this.time=0,this.is_active=!1,o.call(this)};return n.prototype=Object.create(o.prototype),n.prototype.constructor=n,n.prototype.init=function(n){this.velocity=n.clone(),this.anchor=n.clone(),this.acceleration.set(0,0,0),this.time=0},n.prototype.activate=function(){this.is_active=!0},n.prototype.inactivate=function(){this.is_active=!1},n};e.exports=a()},{"./Force3":48,"./util":54}],53:[function(n,e,t){"use strict";var o=(n("./util"),n("./Force3")),a=function(){var n=function(){this.geometry=new THREE.BufferGeometry,this.material=null,this.obj=null,o.call(this)};return n.prototype=Object.create(o.prototype),n.prototype.constructor=n,n.prototype.init=function(n){this.material=new THREE.ShaderMaterial({uniforms:{color:{type:"c",value:new THREE.Color(16777215)},texture:{type:"t",value:n.texture}},vertexShader:n.vs,fragmentShader:n.fs,transparent:!0,depthWrite:!1,blending:n.blending}),this.geometry.addAttribute("position",new THREE.BufferAttribute(n.positions,3)),this.geometry.addAttribute("customColor",new THREE.BufferAttribute(n.colors,3)),this.geometry.addAttribute("vertexOpacity",new THREE.BufferAttribute(n.opacities,1)),this.geometry.addAttribute("size",new THREE.BufferAttribute(n.sizes,1)),this.obj=new THREE.Points(this.geometry,this.material),n.scene.add(this.obj)},n.prototype.updatePoints=function(){this.obj.position.copy(this.velocity),this.obj.geometry.attributes.position.needsUpdate=!0,this.obj.geometry.attributes.vertexOpacity.needsUpdate=!0,this.obj.geometry.attributes.size.needsUpdate=!0,this.obj.geometry.attributes.customColor.needsUpdate=!0},n};e.exports=a()},{"./Force3":48,"./util":54}],54:[function(n,e,t){"use strict";e.exports={getRandomInt:function(n,e){return Math.floor(Math.random()*(e-n))+n},getDegree:function(n){return n/Math.PI*180},getRadian:function(n){return n*Math.PI/180},getPolarCoord:function(n,e,t){var o=Math.cos(n)*Math.cos(e)*t,a=Math.cos(n)*Math.sin(e)*t,i=Math.sin(n)*t;return new THREE.Vector3(o,i,a)}}},{}],55:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}function a(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),r=n("../../../modules/common/PhysicsRenderer"),c=(o(r),240),s=function(){function n(e,t){a(this,n),this.uniforms={index:{type:"f",value:e},time:{type:"f",value:0},size:{type:"f",value:c},texture:{type:"t",value:t}},this.physicsRenderer=null,this.obj=this.createObj()}return i(n,[{key:"createObj",value:function(){var n=new THREE.PlaneBufferGeometry(c,c,24,24),e=new THREE.Mesh(n,new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float index;\nuniform float time;\nuniform float size;\n\nvarying vec3 vPosition;\nvarying vec2 vUv;\n\nvoid main() {\n  float flapTime = radians(sin(time * 6.0 - length(position.xy) / size * 2.6 + index * 2.0) * 32.0);\n  float hovering = cos(time * 2.0 + index * 3.0) * size / 16.0;\n  vec3 updatePosition = vec3(\n    cos(flapTime) * position.x,\n    position.y + hovering,\n    sin(flapTime) * abs(position.x) + hovering\n  );\n\n  vec4 mvPosition = modelViewMatrix * vec4(updatePosition, 1.0);\n\n  vPosition = position;\n  vUv = uv;\n\n  gl_Position = projectionMatrix * mvPosition;\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform float index;\nuniform float time;\nuniform float size;\nuniform sampler2D texture;\n\nvarying vec3 vPosition;\nvarying vec2 vUv;\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nvec3 convertHsvToRgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main() {\n  vec4 texColor = texture2D(texture, vUv);\n\n  float noise = snoise(vPosition / vec3(size * 0.25) + vec3(0.0, 0.0, time));\n  vec3 hsv = vec3(1.0 + noise * 0.2 + index * 0.7, 0.4, 1.0);\n  vec3 rgb = convertHsvToRgb(hsv);\n\n  gl_FragColor = vec4(rgb, 1.0) * texColor;\n}\n",depthWrite:!1,side:THREE.DoubleSide,transparent:!0}));return e.rotation.set(-45*Math.PI/180,0,0),e}},{key:"render",value:function(n,e){this.uniforms.time.value+=e,this.obj.position.z=this.obj.position.z>-900?this.obj.position.z-4:900}}]),n}();t["default"]=s},{"../../../modules/common/PhysicsRenderer":36}],56:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=function(){function n(){o(this,n),this.uniforms={resolution:{type:"v2",value:new THREE.Vector2(document.body.clientWidth,window.innerHeight)},imageResolution:{type:"v2",value:new THREE.Vector2(2048,1356)},texture:{type:"t",value:null}},this.obj=null}return a(n,[{key:"init",value:function(n){var e=this,t=new THREE.TextureLoader;t.load("/sketch-threejs/img/sketch/glitch/osaka.jpg",function(t){e.uniforms.texture.value=t,e.obj=e.createObj(),n()})}},{key:"createObj",value:function(){return new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main(void) {\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform vec2 resolution;\nuniform vec2 imageResolution;\nuniform sampler2D texture;\n\nvarying vec2 vUv;\n\nvoid main(void) {\n  vec2 ratio = vec2(\n      min((resolution.x / resolution.y) / (imageResolution.x / imageResolution.y), 1.0),\n      min((resolution.y / resolution.x) / (imageResolution.y / imageResolution.x), 1.0)\n    );\n\n  vec2 uv = vec2(\n      vUv.x * ratio.x + (1.0 - ratio.x) * 0.5,\n      vUv.y * ratio.y + (1.0 - ratio.y) * 0.5\n    );\n  gl_FragColor = texture2D(texture, uv);\n}\n"}))}},{key:"resize",value:function(){this.uniforms.resolution.value.set(document.body.clientWidth,window.innerHeight)}}]),n}();t["default"]=i},{}],57:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=function(){function n(e){o(this,n),this.uniforms={time:{type:"f",value:0},resolution:{type:"v2",value:new THREE.Vector2(document.body.clientWidth,window.innerHeight)},texture:{type:"t",value:e}},this.obj=this.createObj()}return a(n,[{key:"createObj",value:function(){return new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform float time;\nuniform vec2 resolution;\nuniform sampler2D texture;\n\nvarying vec2 vUv;\n\nfloat random(vec2 c){\n  return fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_0 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_0;\n  vec3 i1 = min( g_0.xyz, l.zxy );\n  vec3 i2 = max( g_0.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nconst float interval = 3.0;\n\nvoid main(void){\n  float strength = smoothstep(interval * 0.5, interval, interval - mod(time, interval));\n  vec2 shake = vec2(strength * 8.0 + 0.5) * vec2(\n    random(vec2(time)) * 2.0 - 1.0,\n    random(vec2(time * 2.0)) * 2.0 - 1.0\n  ) / resolution;\n\n  float y = vUv.y * resolution.y;\n  float rgbWave = (\n      snoise(vec3(0.0, y * 0.01, time * 400.0)) * (2.0 + strength * 32.0)\n      * snoise(vec3(0.0, y * 0.02, time * 200.0)) * (1.0 + strength * 4.0)\n      + step(0.9995, sin(y * 0.005 + time * 1.6)) * 12.0\n      + step(0.9999, sin(y * 0.005 + time * 2.0)) * -18.0\n    ) / resolution.x;\n  float rgbDiff = (6.0 + sin(time * 500.0 + vUv.y * 40.0) * (20.0 * strength + 1.0)) / resolution.x;\n  float rgbUvX = vUv.x + rgbWave;\n  float r = texture2D(texture, vec2(rgbUvX + rgbDiff, vUv.y) + shake).r;\n  float g = texture2D(texture, vec2(rgbUvX, vUv.y) + shake).g;\n  float b = texture2D(texture, vec2(rgbUvX - rgbDiff, vUv.y) + shake).b;\n\n  float whiteNoise = (random(vUv + mod(time, 10.0)) * 2.0 - 1.0) * (0.15 + strength * 0.15);\n\n  float bnTime = floor(time * 20.0) * 200.0;\n  float noiseX = step((snoise(vec3(0.0, vUv.x * 3.0, bnTime)) + 1.0) / 2.0, 0.12 + strength * 0.3);\n  float noiseY = step((snoise(vec3(0.0, vUv.y * 3.0, bnTime)) + 1.0) / 2.0, 0.12 + strength * 0.3);\n  float bnMask = noiseX * noiseY;\n  float bnUvX = vUv.x + sin(bnTime) * 0.2 + rgbWave;\n  float bnR = texture2D(texture, vec2(bnUvX + rgbDiff, vUv.y)).r * bnMask;\n  float bnG = texture2D(texture, vec2(bnUvX, vUv.y)).g * bnMask;\n  float bnB = texture2D(texture, vec2(bnUvX - rgbDiff, vUv.y)).b * bnMask;\n  vec4 blockNoise = vec4(bnR, bnG, bnB, 1.0);\n\n  float bnTime2 = floor(time * 25.0) * 300.0;\n  float noiseX2 = step((snoise(vec3(0.0, vUv.x * 2.0, bnTime2)) + 1.0) / 2.0, 0.12 + strength * 0.5);\n  float noiseY2 = step((snoise(vec3(0.0, vUv.y * 8.0, bnTime2)) + 1.0) / 2.0, 0.12 + strength * 0.3);\n  float bnMask2 = noiseX2 * noiseY2;\n  float bnR2 = texture2D(texture, vec2(bnUvX + rgbDiff, vUv.y)).r * bnMask2;\n  float bnG2 = texture2D(texture, vec2(bnUvX, vUv.y)).g * bnMask2;\n  float bnB2 = texture2D(texture, vec2(bnUvX - rgbDiff, vUv.y)).b * bnMask2;\n  vec4 blockNoise2 = vec4(bnR2, bnG2, bnB2, 1.0);\n\n  float waveNoise = (sin(vUv.y * 1200.0) + 1.0) / 2.0 * (0.15 + strength * 0.2);\n\n  gl_FragColor = vec4(r, g, b, 1.0) * (1.0 - bnMask - bnMask2) + (whiteNoise + blockNoise + blockNoise2 - waveNoise);\n}\n"
}))}},{key:"render",value:function(n){this.uniforms.time.value+=n}},{key:"resize",value:function(){this.uniforms.resolution.value.set(document.body.clientWidth,window.innerHeight)}}]),n}();t["default"]=i},{}],58:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}function a(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),r=n("gl-matrix"),c=o(r),s=n("js-util/MathEx"),l=o(s),u=function(){function n(e){a(this,n),this.camera=e,this.radian1=0,this.radian1Base=0,this.radian2=0,this.radian2Base=0,this.radius=2500,this.isZoom=!1}return i(n,[{key:"rotate",value:function(n,e){this.isZoom===!0&&(this.isZoom=!1),this.radian1=l["default"].clamp(this.radian1Base+e,l["default"].radians(-75),l["default"].radians(75)),this.radian2=this.radian2Base-2*n}},{key:"zoom",value:function(n){if(n){this.isZoom===!1&&(this.isZoom=!0);var e=this.radius;this.radius-=n/Math.abs(n)*200,this.radius=l["default"].clamp(this.radius,700,8e3);e-this.radius}}},{key:"touchEnd",value:function(){this.radian1Base=this.radian1,this.radian2Base=this.radian2}},{key:"render",value:function(){this.camera.anchor=l["default"].polar(this.radian1,this.radian2,this.radius),this.camera.render()}},{key:"computeZoomLength",value:function(){return this.isZoom?.05*c["default"].vec3.length(this.camera.acceleration):0}},{key:"computeAcceleration",value:function(){return.05*c["default"].vec3.length(this.camera.acceleration)}}]),n}();t["default"]=u},{"gl-matrix":1,"js-util/MathEx":11}],59:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=n("js-util/MathEx"),r=function(){function n(){o(this,n),this.uniforms={time:{type:"f",value:0},cubeTex:{type:"t",value:null}},this.instances=1e3,this.obj=null}return a(n,[{key:"init",value:function(n){this.uniforms.cubeTex.value=n,this.obj=this.createObj()}},{key:"createObj",value:function(){var n=new THREE.InstancedBufferGeometry,e=new THREE.BoxBufferGeometry(10,10,10);n.addAttribute("position",e.attributes.position),n.addAttribute("normal",e.attributes.normal),n.setIndex(e.index);for(var t=new THREE.InstancedBufferAttribute(new Float32Array(3*this.instances),3,1),o=new THREE.InstancedBufferAttribute(new Float32Array(this.instances),1,1),a=new THREE.InstancedBufferAttribute(new Float32Array(3*this.instances),3,1),r=0,c=o.count;r<c;r++){var s=i.polar(2*Math.random()*Math.PI,2*Math.random()*Math.PI,3e3*Math.random()+100);t.setXYZ(r,s[0],s[1],s[2]),o.setXYZ(r,100*Math.random()),a.setXYZ(r,Math.random()-.5,Math.random()-.5,Math.random()-.5)}return n.addAttribute("translate",t),n.addAttribute("offset",o),n.addAttribute("rotate",a),new THREE.Mesh(n,new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec3 translate;\nattribute float offset;\nattribute vec3 rotate;\n\nuniform mat4 projectionMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 modelMatrix;\nuniform float time;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n\nmat4 computeTranslateMat(vec3 v) {\n  return mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    v.x, v.y, v.z, 1.0\n  );\n}\n\nmat4 rotateMatrixX(float radian) {\n  return mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, cos(radian), -sin(radian), 0.0,\n    0.0, sin(radian), cos(radian), 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotateMatrixY(float radian) {\n  return mat4(\n    cos(radian), 0.0, sin(radian), 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    -sin(radian), 0.0, cos(radian), 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotateMatrixZ(float radian) {\n  return mat4(\n    cos(radian), -sin(radian), 0.0, 0.0,\n    sin(radian), cos(radian), 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 computeRotateMat(float radX, float radY, float radZ) {\n  return rotateMatrixX(radX) * rotateMatrixY(radY) * rotateMatrixZ(radZ);\n}\n\nvoid main(void) {\n  float radian = radians(time);\n  mat4 rotateWorld = computeRotateMat(radian * 5.0 + rotate.x, radian * 20.0 + rotate.y, radian + rotate.z);\n  mat4 rotateSelf = computeRotateMat(radian * rotate.x * 100.0, radian * rotate.y * 100.0, radian * rotate.z * 100.0);\n  vec4 updatePosition =\n    rotateWorld\n    * computeTranslateMat(translate)\n    * rotateSelf\n    * vec4(position + normalize(position) * offset, 1.0);\n  vPosition = (modelMatrix * updatePosition).xyz;\n  vNormal = (modelMatrix * rotateWorld * rotateSelf * vec4(normal, 1.0)).xyz;\n  gl_Position = projectionMatrix * modelViewMatrix * updatePosition;\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform vec3 cameraPosition;\nuniform float time;\nuniform samplerCube cubeTex;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n\nvoid main() {\n  vec3 ref = reflect(vPosition - cameraPosition, vNormal);\n  vec4 envColor = textureCube(cubeTex, ref);\n  gl_FragColor = envColor * vec4(0.8, 1.0, 0.95, 0.7);\n}\n",transparent:!0,side:THREE.DoubleSide}))}},{key:"render",value:function(n){this.uniforms.time.value+=n}}]),n}();t["default"]=r},{"js-util/MathEx":11}],60:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=function(){function n(e){o(this,n),this.uniforms={time:{type:"f",value:0},resolution:{type:"v2",value:new THREE.Vector2(document.body.clientWidth,window.innerHeight)},texture:{type:"t",value:e},strengthZoom:{type:"f",value:0},strengthGlitch:{type:"f",value:0}},this.obj=this.createObj()}return a(n,[{key:"createObj",value:function(){return new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform float time;\nuniform vec2 resolution;\nuniform sampler2D texture;\nuniform float strengthZoom;\nuniform float strengthGlitch;\n\nvarying vec2 vUv;\n\nfloat random(vec2 c){\n  return fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nvoid main(void){\n  // zoom blur\n  vec2 tFrag = 1.0 / resolution;\n  float nFrag = 1.0 / 30.0;\n  vec2 centerOffset = resolution / 2.0;\n  vec3 destColor = vec3(0.0);\n  vec2 fcc = gl_FragCoord.xy - centerOffset;\n  float totalWeight = 0.0;\n\n  for(float i = 0.0; i <= 30.0; i++){\n    float percent = (i + random(gl_FragCoord.xy)) * nFrag;\n    float weight = percent - percent * percent;\n    vec2  t = gl_FragCoord.xy - fcc * percent * strengthZoom * nFrag;\n    destColor += texture2D(texture, t * tFrag).rgb * weight;\n    totalWeight += weight;\n  }\n  vec4 zoomColor = vec4(destColor / totalWeight, 1.0);\n\n  // glitch\n  float strengthWhiteNoise = min(strengthGlitch * 0.05, 0.1);\n  float whiteNoise = (random(gl_FragCoord.xy + time) * 2.0 - 1.0) * (0.05 + strengthWhiteNoise);\n\n  float strengthBlockNoise = min(strengthGlitch * 0.15, 1.2);\n  float noiseX = step((snoise(vec3(0.0, gl_FragCoord.x / resolution.x * 1.0, time * 600.0)) + 1.0) / 2.0, strengthBlockNoise * 0.6);\n  float noiseY = step((snoise(vec3(0.0, gl_FragCoord.y / resolution.y * 3.0, time * 200.0)) + 1.0) / 2.0, strengthBlockNoise * 0.3);\n  float blockNoiseMask = noiseX * noiseY;\n  vec4 blockNoise = texture2D(texture, 1.0 - vUv) * blockNoiseMask;\n\n  gl_FragColor = zoomColor + whiteNoise + blockNoise;\n}\n"}))}},{key:"render",value:function(n){this.uniforms.time.value+=n}},{key:"resize",value:function(){this.uniforms.resolution.value.set(document.body.clientWidth,window.innerHeight)}}]),n}();t["default"]=i},{}],61:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=function(){function n(){o(this,n),this.uniforms={time:{type:"f",value:0},cubeTex:{type:"t",value:null}},this.obj=null}return a(n,[{key:"init",value:function(n){this.uniforms.cubeTex.value=n,this.obj=this.createObj()}},{key:"createObj",value:function(){return new THREE.Mesh(new THREE.BoxBufferGeometry(3e4,3e4,3e4,1,1,1),new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n\nuniform mat4 projectionMatrix;\nuniform mat4 modelViewMatrix;\nuniform float time;\n\nvarying vec3 vPosition;\n\nvoid main(void) {\n  vPosition = position;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform samplerCube cubeTex;\n\nvarying vec3 vPosition;\n\nvoid main() {\n  vec3 normal = normalize(vPosition);\n  vec4 color = textureCube(cubeTex, normal);\n  gl_FragColor = color;\n}\n",side:THREE.BackSide}))}},{key:"render",value:function(n){this.uniforms.time.value+=n}}]),n}();t["default"]=i},{}],62:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}function a(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),r=n("../../../modules/common/PhysicsRenderer"),c=o(r),s=function(){function n(){a(this,n),this.uniforms={time:{type:"f",value:0},velocity:{type:"t",value:null},acceleration:{type:"t",value:null}},this.physicsRenderer=null,this.vectorTouchMove=new THREE.Vector2(0,0),this.vectorTouchMoveDiff=new THREE.Vector2(0,0),this.obj=null}return i(n,[{key:"init",value:function(n){this.obj=this.createObj(n)}},{key:"createObj",value:function(n){for(var e=window.innerWidth>768?7:6,t=new THREE.OctahedronBufferGeometry(100,e),o=t.attributes.position.array,a=[],i=0;i<o.length;i+=3)a[i+0]=o[i+0]+10*(2*Math.random()-1),a[i+1]=o[i+1]+10*(2*Math.random()-1),a[i+2]=o[i+2]+10*(2*Math.random()-1);return this.physicsRenderer=new c["default"]("#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main(void) {\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n",'#define GLSLIFY 1\nuniform vec2 resolution;\nuniform sampler2D velocity;\nuniform sampler2D acceleration;\nuniform float time;\nuniform vec2 vTouchMove;\n\nvarying vec2 vUv;\n\n//\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n#ifndef PRECISION\n#define PRECISION 0.000001\n#endif\n\nvec3 drag(vec3 a, float value) {\n  return normalize(a * -1.0 + PRECISION) * length(a) * value;\n}\n\nvoid main(void) {\n  vec3 v = texture2D(velocity, vUv).xyz;\n  vec3 a = texture2D(acceleration, vUv).xyz;\n  float noise = sqrt(length(v)) * 10.0;\n  vec3 d = drag(a, 0.028);\n  float fx = cnoise(vec3(time * 0.1, v.y / noise, v.z / noise));\n  float fy = cnoise(vec3(v.x / noise, time * 0.1, v.z / noise));\n  float fz = cnoise(vec3(v.x / noise, v.y / noise, time * 0.1));\n  vec3 f1 = vec3(fx, fy, fz) * 0.24;\n  vec3 f2 = vec3(vTouchMove * 16.0 * (resolution / 640.0), 0.0);\n  vec3 f3 = a + f1 + f2 + d;\n  float vStep = 1.0 - step(1000.0, length(v + f3));\n  gl_FragColor = vec4(f3 * vStep, 1.0);\n}\n',"#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main(void) {\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n","#define GLSLIFY 1\nuniform sampler2D velocity;\nuniform sampler2D acceleration;\nuniform float time;\n\nvarying vec2 vUv;\n\nvec3 polar(float radian1, float radian2, float radius) {\n  return vec3(\n    cos(radian1) * cos(radian2) * radius,\n    sin(radian1) * radius,\n    cos(radian1) * sin(radian2) * radius\n  );\n}\n\nconst float radius = 100.0;\n\nvoid main(void) {\n  vec3 a = texture2D(acceleration, vUv).xyz;\n  vec3 v = texture2D(velocity, vUv).xyz;\n  float vStep = step(0.000001, length(a));\n  gl_FragColor = vec4(\n    (a + v) * vStep + normalize(v + polar(time, -time, 1.0)) * radius * (1.0 - vStep),\n    1.0\n  );\n}\n"),this.physicsRenderer.init(n,a),this.physicsRenderer.mergeAUniforms({vTouchMove:{type:"v2",value:this.vectorTouchMoveDiff}}),this.uniforms.velocity.value=this.physicsRenderer.getCurrentVelocity(),this.uniforms.acceleration.value=this.physicsRenderer.getCurrentAcceleration(),t.addAttribute("uvVelocity",this.physicsRenderer.getBufferAttributeUv()),new THREE.Points(t,new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uvVelocity;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float time;\nuniform sampler2D acceleration;\nuniform sampler2D velocity;\n\nvarying vec3 vAcceleration;\n\nvoid main() {\n  vec3 a = texture2D(acceleration, uvVelocity).xyz;\n  vec3 v = texture2D(velocity, uvVelocity).xyz;\n  vec4 mvPosition = modelViewMatrix * vec4(v, 1.0);\n  vAcceleration = a;\n  gl_PointSize = 1.2 * (1200.0 / length(mvPosition.xyz));\n  gl_Position = projectionMatrix * mvPosition;\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform float time;\n\nvarying vec3 vAcceleration;\n\nvec3 convertHsvToRgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main() {\n  float start = smoothstep(time, 0.0, 1.0);\n  vec3 n;\n  n.xy = gl_PointCoord * 2.0 - 1.0;\n  n.z = 1.0 - dot(n.xy, n.xy);\n  if (n.z < 0.0) discard;\n  float aLength = length(vAcceleration);\n  vec3 color = convertHsvToRgb(vec3(aLength * 0.08 + time * 0.05, 0.5, 0.8));\n  gl_FragColor = vec4(color, 0.4 * start);\n}\n",transparent:!0,depthWrite:!1,blending:THREE.AdditiveBlending}))}},{key:"render",value:function(n,e){this.physicsRenderer.render(n,e),this.uniforms.time.value+=e}},{key:"touchStart",value:function(n){this.vectorTouchMove.copy(n)}},{key:"touchMove",value:function(n){this.vectorTouchMoveDiff.set(n.x-this.vectorTouchMove.x,n.y-this.vectorTouchMove.y),this.vectorTouchMove.copy(n)}},{key:"touchEnd",value:function(){this.vectorTouchMove.set(0,0),this.vectorTouchMoveDiff.set(0,0)}},{key:"resize",value:function(){this.physicsRenderer&&this.physicsRenderer.resize()}}]),n}();t["default"]=s},{"../../../modules/common/PhysicsRenderer":36}],63:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=function(){function n(e,t){o(this,n),this.uniforms={texture1:{type:"t",value:e},texture2:{type:"t",value:t}},this.obj=this.createObj()}return a(n,[{key:"createObj",value:function(){return new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D texture1;\nuniform sampler2D texture2;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 color1 = texture2D(texture1, vUv);\n  vec4 color2 = texture2D(texture2, vUv);\n  gl_FragColor = color1 * 0.6 + color2;\n}\n"}))}}]),n}();t["default"]=i},{}],64:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=function(){function n(e,t,a){o(this,n),this.uniforms={resolution:{type:"v2",value:new THREE.Vector2(document.body.clientWidth,window.innerHeight)},direction:{type:"v2",value:new THREE.Vector2(t,a)},texture:{type:"t",value:e}},this.obj=this.createObj()}return a(n,[{key:"createObj",value:function(){return new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform vec2 resolution;\nuniform vec2 direction;\nuniform sampler2D texture;\n\nvarying vec2 vUv;\n\nvec4 gaussianBlur(sampler2D texture, vec2 uv, float radius, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 step = radius / resolution * direction;\n  color += texture2D(texture, uv - 4.0 * step) * 0.02699548325659403;\n  color += texture2D(texture, uv - 3.0 * step) * 0.06475879783294587;\n  color += texture2D(texture, uv - 2.0 * step) * 0.12098536225957168;\n  color += texture2D(texture, uv - 1.0 * step) * 0.17603266338214976;\n  color += texture2D(texture, uv) * 0.19947114020071635;\n  color += texture2D(texture, uv + 1.0 * step) * 0.17603266338214976;\n  color += texture2D(texture, uv + 2.0 * step) * 0.12098536225957168;\n  color += texture2D(texture, uv + 3.0 * step) * 0.06475879783294587;\n  color += texture2D(texture, uv + 4.0 * step) * 0.02699548325659403;\n  return color;\n}\n\nvoid main() {\n  vec4 color = gaussianBlur(texture, vUv, 1.0, resolution, direction);\n  gl_FragColor = color;\n}\n"}))}},{key:"resize",value:function(){this.uniforms.resolution.value.set(document.body.clientWidth,window.innerHeight)}}]),n}();t["default"]=i},{}],65:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=function(){function n(e){o(this,n),this.uniforms={minBright:{type:"f",value:.3},texture:{type:"t",value:e}},this.obj=this.createObj()}return a(n,[{key:"createObj",value:function(){return new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform float minBright;\nuniform sampler2D texture;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 bright = max(vec4(0.0), (texture2D(texture, vUv) - minBright));\n  gl_FragColor = bright;\n}\n"}))}}]),n}();t["default"]=i},{}],66:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=function(){function n(){o(this,n),this.uniforms={time:{type:"f",value:0},colorH:{type:"f",value:0},noiseRange:{type:"f",value:0}},this.obj=this.createObj(),this.obj.visible=!1}return a(n,[{key:"createObj",value:function(){return new THREE.Mesh(new THREE.PlaneBufferGeometry(1500,1500),new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 modelMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform float time;\nuniform float colorH;\nuniform float noiseRange;\n\nvarying vec2 vUv;\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nvec3 convertHsvToRgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat exponentialOut(float t) {\n  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\n}\n\nvoid main() {\n  float t1 = exponentialOut(min(time, 1.0) / 1.0);\n  float t2 = exponentialOut(clamp(time - 14.0, 0.0, 1.0) / 1.0);\n  vec2 pos = vUv * 2.0 - vec2(1.0);\n  float circleOut = smoothstep(0.0, 0.5, t1 - t2 - length(pos));\n  float circleIn = smoothstep(0.0, 0.5, (t1 - t2) * 0.5 - length(pos));\n  float noise = (snoise(vec3(pos * (1.4 + noiseRange * 0.1) + vec2(sin(time), cos(time)), time + noiseRange * 100.0)) + 1.0) / 2.0;\n  float mask = circleOut * noise + circleIn;\n  float opacity = 1.0 - step(mask, 0.3);\n  float h1 = step(mask, 0.99) * 0.4 - time * 0.05;\n  float h2 = step(mask, 0.4) * 0.5;\n  vec3 hsv = vec3(h1 - h2 + colorH, 0.45, 0.8);\n  vec3 rgb = convertHsvToRgb(hsv);\n  gl_FragColor = vec4(rgb, opacity);\n}\n",transparent:!0}))}},{key:"show",value:function(n){this.uniforms.time.value=0,this.uniforms.colorH.value=Math.random(),this.uniforms.noiseRange.value=3*Math.random(),this.obj.visible=!0,this.obj.position.set((2*Math.random()-1)*window.innerWidth,(2*Math.random()-1)*window.innerHeight,0)}},{key:"render",value:function(n){this.obj.visible&&(this.uniforms.time.value+=n,this.obj.position.z-=3)}}]),n}();t["default"]=i},{}],67:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}function a(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function");
}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),r=n("../../common/force3"),c=o(r),s=n("./Core"),l=o(s),u=n("./Wire"),v=o(u),d=(n("js-util/MathEx"),n("js-util/debounce"),function(){function n(){a(this,n),this.velocity=[0,0,0],this.acceleration=[0,0,0],this.anchor=[0,0,0],this.instances=36,this.core=new l["default"](this.instances),this.wire=new v["default"](this.instances)}return i(n,[{key:"updateRotation",value:function(){c["default"].applyHook(this.velocity,this.acceleration,this.anchor,0,.02),c["default"].applyDrag(this.acceleration,.3),c["default"].updateVelocity(this.velocity,this.acceleration,1),this.core.uniforms.rotate.value=this.velocity[0],this.wire.uniforms.rotate.value=this.velocity[0]}},{key:"rotate",value:function(n){n&&(this.anchor[0]-=.05*n)}},{key:"picked",value:function(n){this.core.uniforms.pickedId.value=n,this.wire.uniforms.pickedId.value=n,n<this.instances&&n>-1?document.body.classList.add("is-picked"):document.body.classList.remove("is-picked")}},{key:"render",value:function(n){this.core.uniforms.time.value+=n,this.wire.render(n),this.updateRotation()}}]),n}());t["default"]=d},{"../../common/force3":38,"./Core":68,"./Wire":71,"js-util/MathEx":11,"js-util/debounce":12}],68:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=n("js-util/MathEx"),r=function(){function n(e){o(this,n),this.uniforms={time:{type:"f",value:0},rotate:{type:"f",value:0},pickedId:{type:"f",value:-1}},this.instances=e,this.obj=this.createObj()}return a(n,[{key:"createObj",value:function(){var n=new THREE.InstancedBufferGeometry,e=new THREE.OctahedronBufferGeometry(30,4);n.addAttribute("position",e.attributes.position),n.addAttribute("normal",e.attributes.normal),n.setIndex(e.index);for(var t=new THREE.InstancedBufferAttribute(new Float32Array(this.instances),1,1),o=new THREE.InstancedBufferAttribute(new Float32Array(3*this.instances),3,1),a=new THREE.InstancedBufferAttribute(new Float32Array(this.instances),1,1),r=new THREE.InstancedBufferAttribute(new Float32Array(this.instances),1,1),c=0;c<this.instances;c++)t.setXYZ(c,i.radians(c/this.instances*360)),o.setXYZ(c,c/this.instances-.25,.2,.9),a.setXYZ(c,Math.random()),r.setXYZ(c,.5*(Math.random()+1));return n.addAttribute("radian",t),n.addAttribute("hsv",o),n.addAttribute("noiseDiff",a),n.addAttribute("speed",r),new THREE.Mesh(n,new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec3 normal;\nattribute float radian;\nattribute vec3 hsv;\nattribute float noiseDiff;\nattribute float speed;\n\nuniform mat4 projectionMatrix;\nuniform mat4 modelViewMatrix;\nuniform float time;\nuniform float rotate;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec3 vColor;\n\nmat4 computeTranslateMat(vec3 v) {\n  return mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    v.x, v.y, v.z, 1.0\n  );\n}\n\nmat4 rotateMatrixX(float radian) {\n  return mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, cos(radian), -sin(radian), 0.0,\n    0.0, sin(radian), cos(radian), 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotateMatrixY(float radian) {\n  return mat4(\n    cos(radian), 0.0, sin(radian), 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    -sin(radian), 0.0, cos(radian), 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotateMatrixZ(float radian) {\n  return mat4(\n    cos(radian), -sin(radian), 0.0, 0.0,\n    sin(radian), cos(radian), 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 computeRotateMat(float radX, float radY, float radZ) {\n  return rotateMatrixX(radX) * rotateMatrixY(radY) * rotateMatrixZ(radZ);\n}\n\nvec3 convertHsvToRgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nvoid main(void) {\n  float noise = snoise(position * 0.02 + time * speed + noiseDiff);\n  mat4 rotateMatWorld = computeRotateMat(0.0, radian + radians(rotate), 0.0);\n  mat4 translateMat = computeTranslateMat(vec3(1000.0, 0.0, 0.0));\n  vec4 updatePosition = rotateMatWorld * translateMat * vec4(\n    position + normalize(position) * noise * 5.0,\n    1.0\n    );\n  vPosition = updatePosition.xyz;\n  vNormal = normal;\n  vColor = convertHsvToRgb(hsv);\n  gl_Position = projectionMatrix * modelViewMatrix * updatePosition;\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform float time;\nuniform vec3 cameraPosition;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec3 vColor;\n\nconst vec3 light = vec3(0.7);\n\nvoid main() {\n  float diff = (dot(vNormal, light) + 1.0) / 2.0 * 0.25 + 0.75;\n  float opacity = (1.0 - (vPosition.z / 1000.0)) * 0.8 + 0.2;\n  gl_FragColor = vec4(vColor * diff, opacity);\n}\n",transparent:!0}))}}]),n}();t["default"]=r},{"js-util/MathEx":11}],69:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=function(){function n(){o(this,n),this.mirrorCamera=new THREE.PerspectiveCamera(24,document.body.clientWidth/window.innerHeight,1,15e3),this.mirrorRender=new THREE.WebGLRenderTarget(document.body.clientWidth,window.innerHeight),this.textureMatrix=new THREE.Matrix4,this.uniforms={time:{type:"f",value:0},texture:{type:"t",value:this.mirrorRender.texture},textureMatrix:{type:"m4",value:this.textureMatrix},mirrorPosition:{type:"v3",value:this.mirrorCamera.position}},this.mirrorCamera.up.set(0,-1,0),this.obj=this.createObj()}return a(n,[{key:"createObj",value:function(){return new THREE.Mesh(new THREE.PlaneBufferGeometry(4e3,4e3),new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec3 normal;\n\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 modelMatrix;\nuniform mat3 normalMatrix;\nuniform mat4 textureMatrix;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec4 vUv;\nvarying mat4 vInvertMatrix;\n\nfloat inverse(float m) {\n  return 1.0 / m;\n}\n\nmat2 inverse(mat2 m) {\n  return mat2(m[1][1],-m[0][1],\n             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nvoid main(void) {\n  vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n  vPosition = worldPosition.xyz;\n  vNormal = normal;\n  vUv = textureMatrix * worldPosition;\n  vInvertMatrix = inverse(modelMatrix);\n  gl_Position = projectionMatrix * viewMatrix * worldPosition;\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D texture;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec4 vUv;\nvarying mat4 vInvertMatrix;\n\nvoid main() {\n  vec4 projectorColor;\n  if (all(bvec4(vUv.x >= 0.0, vUv.y >= 0.0, vUv.x <= vUv.z, vUv.y <= vUv.z))) {\n    projectorColor = texture2DProj(texture, vUv);\n  }\n  gl_FragColor = vec4(1.0, 1.0, 1.0, 0.35) * projectorColor;\n}\n",transparent:!0}))}},{key:"updateTextureMatrix",value:function(){this.textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,1,0,0,0,0,1),this.textureMatrix.multiply(this.mirrorCamera.projectionMatrix),this.textureMatrix.multiply(this.mirrorCamera.matrixWorldInverse)}},{key:"render",value:function(n,e,t){this.uniforms.time.value+=t,this.updateTextureMatrix(),this.obj.visible=!1,n.render(e,this.mirrorCamera,this.mirrorRender),this.obj.visible=!0}},{key:"resize",value:function(){this.mirrorCamera.aspect=document.body.clientWidth/window.innerHeight,this.mirrorCamera.updateProjectionMatrix(),this.mirrorRender.setSize(document.body.clientWidth,window.innerHeight)}}]),n}();t["default"]=i},{}],70:[function(n,e,t){"use strict";function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),i=function(){function n(){o(this,n),this.cubeCamera=new THREE.CubeCamera(1,15e3,1024),this.instances=6,this.uniforms={time:{type:"f",value:0}},this.obj=this.createObj(),this.obj.rotation.set(0,.3*Math.PI,0)}return a(n,[{key:"createObj",value:function(){var n=new THREE.InstancedBufferGeometry,e=new THREE.BoxBufferGeometry(40,1,10);n.addAttribute("position",e.attributes.position),n.addAttribute("normal",e.attributes.normal),n.setIndex(e.index);for(var t=new THREE.InstancedBufferAttribute(new Float32Array(this.instances),1,1),o=new THREE.InstancedBufferAttribute(new Float32Array(this.instances),1,1),a=0,i=this.instances;a<i;a++)t.setXYZ(a,150*(a+1)+200),o.setXYZ(a,120*(a-(this.instances-1)/2));return n.addAttribute("height",t),n.addAttribute("offsetX",o),new THREE.Mesh(n,new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec3 normal;\nattribute float height;\nattribute float offsetX;\n\nuniform mat4 projectionMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 modelMatrix;\n\nvarying vec3 vPosition;\nvarying mat4 vInvertMatrix;\n\nmat4 computeTranslateMat(vec3 v) {\n  return mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    v.x, v.y, v.z, 1.0\n  );\n}\n\nmat4 computeScaleMat(vec3 scale) {\n  return mat4(\n    scale.x, 0.0, 0.0, 0.0,\n    0.0, scale.y, 0.0, 0.0,\n    0.0, 0.0, scale.z, 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nfloat inverse(float m) {\n  return 1.0 / m;\n}\n\nmat2 inverse(mat2 m) {\n  return mat2(m[1][1],-m[0][1],\n             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nvoid main(void) {\n  mat4 translateMat = computeTranslateMat(vec3(offsetX, 0.0, 0.0));\n  mat4 scaleMat = computeScaleMat(vec3(1.0, (position.y + 0.5) * height, 1.0));\n  vec4 updatePosition = scaleMat * translateMat * vec4(position, 1.0);\n  vPosition = (modelMatrix * updatePosition).xyz;\n  vInvertMatrix = inverse(modelMatrix);\n  gl_Position = projectionMatrix * modelViewMatrix * updatePosition;\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform vec3 cameraPosition;\nuniform float time;\n\nvarying vec3 vPosition;\nvarying mat4 vInvertMatrix;\n\nvoid main() {\n  vec3 normal = normalize(cross(dFdx(vPosition), dFdy(vPosition)));\n  vec3 light = vec3(-0.7, 0.7, -0.7);\n  float diff = (dot(normal, light) + 1.0) / 2.0 * 0.2 + 0.8;\n  gl_FragColor = vec4(vec3(0.98) * diff, 1.0);\n}\n",shading:THREE.FlatShading}))}},{key:"render",value:function(n,e,t){this.uniforms.time.value+=t,this.obj.visible=!1,this.cubeCamera.updateCubeMap(n,e),this.obj.visible=!0}}]),n}();t["default"]=i},{}],71:[function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}function a(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),r=n("../../common/force3"),c=(o(r),n("js-util/MathEx")),s=function(){function n(e){a(this,n),this.size=120,this.baseGeometry=new THREE.BoxBufferGeometry(this.size,this.size,this.size),this.uniforms={time:{type:"f",value:0},rotate:{type:"f",value:0},pickedId:{type:"f",value:-1}},this.instances=e,this.obj=this.createObj(),this.objPicked=this.createObjPicked()}return i(n,[{key:"createObj",value:function(){var n=new THREE.InstancedBufferGeometry;n.addAttribute("position",this.baseGeometry.attributes.position),n.setIndex(this.baseGeometry.index);for(var e=new THREE.InstancedBufferAttribute(new Float32Array(this.instances),1,1),t=new THREE.InstancedBufferAttribute(new Float32Array(3*this.instances),3,1),o=new THREE.InstancedBufferAttribute(new Float32Array(this.instances),1,1),a=0;a<this.instances;a++)e.setXYZ(a,c.radians(a/this.instances*360)),t.setXYZ(a,a/this.instances-.25,.2,1),o.setXYZ(a,0);return n.addAttribute("radian",e),n.addAttribute("hsv",t),n.addAttribute("timeHover",o),new THREE.Mesh(n,new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec3 normal;\nattribute float radian;\nattribute vec3 hsv;\nattribute float timeHover;\n\nuniform mat4 projectionMatrix;\nuniform mat4 modelViewMatrix;\nuniform float time;\nuniform float rotate;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec3 vColor;\nvarying mat4 vInvertMatrix;\n\nfloat inverse(float m) {\n  return 1.0 / m;\n}\n\nmat2 inverse(mat2 m) {\n  return mat2(m[1][1],-m[0][1],\n             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\nfloat circularOut(float t) {\n  return sqrt((2.0 - t) * t);\n}\n\nmat4 computeTranslateMat(vec3 v) {\n  return mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    v.x, v.y, v.z, 1.0\n  );\n}\n\nmat4 rotateMatrixX(float radian) {\n  return mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, cos(radian), -sin(radian), 0.0,\n    0.0, sin(radian), cos(radian), 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotateMatrixY(float radian) {\n  return mat4(\n    cos(radian), 0.0, sin(radian), 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    -sin(radian), 0.0, cos(radian), 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotateMatrixZ(float radian) {\n  return mat4(\n    cos(radian), -sin(radian), 0.0, 0.0,\n    sin(radian), cos(radian), 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 computeRotateMat(float radX, float radY, float radZ) {\n  return rotateMatrixX(radX) * rotateMatrixY(radY) * rotateMatrixZ(radZ);\n}\n\nmat4 computeScaleMat(vec3 scale) {\n  return mat4(\n    scale.x, 0.0, 0.0, 0.0,\n    0.0, scale.y, 0.0, 0.0,\n    0.0, 0.0, scale.z, 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nvec3 convertHsvToRgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main(void) {\n  float easeStep = circularOut(timeHover / 0.3);\n  mat4 rotateMatWorld = computeRotateMat(0.0, radian + radians(rotate), 0.0);\n  mat4 scaleMat = computeScaleMat(vec3(1.0 + easeStep * 0.2));\n  mat4 translateMat = computeTranslateMat(vec3(1000.0, 0.0, 0.0));\n  vec4 updatePosition = rotateMatWorld * translateMat * scaleMat * vec4(position, 1.0);\n  vPosition = updatePosition.xyz;\n  vInvertMatrix = inverse(rotateMatWorld * translateMat);\n  vColor = convertHsvToRgb(hsv * vec3(1.0, 1.0 - easeStep, 1.0));\n  gl_Position = projectionMatrix * modelViewMatrix * updatePosition;\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform float time;\nuniform vec3 cameraPosition;\n\nvarying vec3 vPosition;\nvarying vec3 vColor;\nvarying mat4 vInvertMatrix;\n\nconst vec3 color = vec3(0.9);\n\nvoid main() {\n  vec3 normal = normalize(cross(dFdx(vPosition), dFdy(vPosition)));\n  if(!gl_FrontFacing) {\n      normal = -normal;\n  }\n  vec3 light = normalize(vInvertMatrix * vec4(vec3(-1000.0, 1000.0, -1000.0), 1.0)).xyz;\n  float diff = (dot(normal, light) + 1.0) / 2.0 * 0.2 + 0.8;\n  float opacity = (1.0 - (vPosition.z / 1000.0)) * 0.1 + 0.1;\n  gl_FragColor = vec4(color * diff * vColor, opacity);\n}\n",depthWrite:!1,transparent:!0,side:THREE.DoubleSide,shading:THREE.FlatShading}))}},{key:"createObjPicked",value:function(){var n=new THREE.InstancedBufferGeometry;n.addAttribute("position",this.baseGeometry.attributes.position),n.setIndex(this.baseGeometry.index);for(var e=new THREE.InstancedBufferAttribute(new Float32Array(this.instances),1,1),t=new THREE.InstancedBufferAttribute(new Float32Array(3*this.instances),3,1),o=new THREE.Color,a=new THREE.InstancedBufferAttribute(new Float32Array(this.instances),1,1),i=0;i<this.instances;i++)e.setXYZ(i,c.radians(i/this.instances*360)),o.setHex(i),t.setXYZ(i,o.r,o.g,o.b),a.setXYZ(i,0);return n.addAttribute("radian",e),n.addAttribute("pickedColor",t),n.addAttribute("timeHover",a),new THREE.Mesh(n,new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute float radian;\nattribute vec3 pickedColor;\nattribute float timeHover;\n\nuniform mat4 projectionMatrix;\nuniform mat4 modelViewMatrix;\nuniform float time;\nuniform float rotate;\n\nvarying vec3 vColor;\n\nfloat circularOut(float t) {\n  return sqrt((2.0 - t) * t);\n}\n\nmat4 computeTranslateMat(vec3 v) {\n  return mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    v.x, v.y, v.z, 1.0\n  );\n}\n\nmat4 rotateMatrixX(float radian) {\n  return mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, cos(radian), -sin(radian), 0.0,\n    0.0, sin(radian), cos(radian), 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotateMatrixY(float radian) {\n  return mat4(\n    cos(radian), 0.0, sin(radian), 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    -sin(radian), 0.0, cos(radian), 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotateMatrixZ(float radian) {\n  return mat4(\n    cos(radian), -sin(radian), 0.0, 0.0,\n    sin(radian), cos(radian), 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 computeRotateMat(float radX, float radY, float radZ) {\n  return rotateMatrixX(radX) * rotateMatrixY(radY) * rotateMatrixZ(radZ);\n}\n\nmat4 computeScaleMat(vec3 scale) {\n  return mat4(\n    scale.x, 0.0, 0.0, 0.0,\n    0.0, scale.y, 0.0, 0.0,\n    0.0, 0.0, scale.z, 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nvoid main(void) {\n  float easeStep = circularOut(timeHover / 0.3);\n  mat4 rotateMatWorld = computeRotateMat(0.0, radian + radians(rotate), 0.0);\n  mat4 scaleMat = computeScaleMat(vec3(1.0 + easeStep * 0.2));\n  mat4 translateMat = computeTranslateMat(vec3(1000.0, 0.0, 0.0));\n  vec4 updatePosition = rotateMatWorld * translateMat * scaleMat * vec4(position, 1.0);\n  vColor = pickedColor;\n  gl_Position = projectionMatrix * modelViewMatrix * updatePosition;\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform float time;\n\nvarying vec3 vColor;\n\nvoid main() {\n  gl_FragColor = vec4(vColor, 1.0);\n}\n"}))}},{key:"render",value:function(n){var e=this.obj.geometry.attributes.timeHover,t=this.objPicked.geometry.attributes.timeHover;this.uniforms.time.value+=n;for(var o=0;o<e.array.length;o++)this.uniforms.pickedId.value==o?(e.array[o]=Math.min(e.array[o]+n,.3),t.array[o]=Math.min(t.array[o]+n,.3)):(e.array[o]=Math.max(e.array[o]-n,0),t.array[o]=Math.max(t.array[o]-n,0));e.needsUpdate=!0,t.needsUpdate=!0}}]),n}();t["default"]=s},{"../../common/force3":38,"js-util/MathEx":11}]},{},[32]);